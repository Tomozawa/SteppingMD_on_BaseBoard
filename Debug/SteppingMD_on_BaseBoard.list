
SteppingMD_on_BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000184  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000208  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dbc  08006dbc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000007c  08006e5c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08006e5c  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000704f8  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007252  00000000  00000000  0009059d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002373e  00000000  00000000  000977ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  000baf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000057e8  00000000  00000000  000bbc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009b77  00000000  00000000  000c1468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e8d8  00000000  00000000  000cafdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dee61  00000000  00000000  000e98b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c8718  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d1c  00000000  00000000  001c8768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080064c0 	.word	0x080064c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080064c0 	.word	0x080064c0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_f2iz>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000710:	d30f      	bcc.n	8000732 <__aeabi_f2iz+0x2a>
 8000712:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000716:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071a:	d90d      	bls.n	8000738 <__aeabi_f2iz+0x30>
 800071c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000724:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000728:	fa23 f002 	lsr.w	r0, r3, r2
 800072c:	bf18      	it	ne
 800072e:	4240      	negne	r0, r0
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr
 8000738:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800073c:	d101      	bne.n	8000742 <__aeabi_f2iz+0x3a>
 800073e:	0242      	lsls	r2, r0, #9
 8000740:	d105      	bne.n	800074e <__aeabi_f2iz+0x46>
 8000742:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000746:	bf08      	it	eq
 8000748:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr

08000754 <__aeabi_f2uiz>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	d20e      	bcs.n	8000776 <__aeabi_f2uiz+0x22>
 8000758:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800075c:	d30b      	bcc.n	8000776 <__aeabi_f2uiz+0x22>
 800075e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000762:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000766:	d409      	bmi.n	800077c <__aeabi_f2uiz+0x28>
 8000768:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800076c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000770:	fa23 f002 	lsr.w	r0, r3, r2
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr
 800077c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000780:	d101      	bne.n	8000786 <__aeabi_f2uiz+0x32>
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	d102      	bne.n	800078c <__aeabi_f2uiz+0x38>
 8000786:	f04f 30ff 	mov.w	r0, #4294967295
 800078a:	4770      	bx	lr
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <selfrel_offset31>:
 8000794:	6803      	ldr	r3, [r0, #0]
 8000796:	005a      	lsls	r2, r3, #1
 8000798:	bf4c      	ite	mi
 800079a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800079e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80007a2:	4418      	add	r0, r3
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <search_EIT_table>:
 80007a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007ac:	b339      	cbz	r1, 80007fe <search_EIT_table+0x56>
 80007ae:	1e4f      	subs	r7, r1, #1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4615      	mov	r5, r2
 80007b4:	463e      	mov	r6, r7
 80007b6:	f04f 0800 	mov.w	r8, #0
 80007ba:	eb08 0106 	add.w	r1, r8, r6
 80007be:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80007c2:	1049      	asrs	r1, r1, #1
 80007c4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80007c8:	4648      	mov	r0, r9
 80007ca:	f7ff ffe3 	bl	8000794 <selfrel_offset31>
 80007ce:	4603      	mov	r3, r0
 80007d0:	00c8      	lsls	r0, r1, #3
 80007d2:	3008      	adds	r0, #8
 80007d4:	428f      	cmp	r7, r1
 80007d6:	4420      	add	r0, r4
 80007d8:	d00b      	beq.n	80007f2 <search_EIT_table+0x4a>
 80007da:	42ab      	cmp	r3, r5
 80007dc:	d80b      	bhi.n	80007f6 <search_EIT_table+0x4e>
 80007de:	f7ff ffd9 	bl	8000794 <selfrel_offset31>
 80007e2:	3801      	subs	r0, #1
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	f101 0801 	add.w	r8, r1, #1
 80007ea:	d3e6      	bcc.n	80007ba <search_EIT_table+0x12>
 80007ec:	4648      	mov	r0, r9
 80007ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	d9fa      	bls.n	80007ec <search_EIT_table+0x44>
 80007f6:	4588      	cmp	r8, r1
 80007f8:	d001      	beq.n	80007fe <search_EIT_table+0x56>
 80007fa:	1e4e      	subs	r6, r1, #1
 80007fc:	e7dd      	b.n	80007ba <search_EIT_table+0x12>
 80007fe:	f04f 0900 	mov.w	r9, #0
 8000802:	4648      	mov	r0, r9
 8000804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000808 <__gnu_unwind_get_pr_addr>:
 8000808:	2801      	cmp	r0, #1
 800080a:	d007      	beq.n	800081c <__gnu_unwind_get_pr_addr+0x14>
 800080c:	2802      	cmp	r0, #2
 800080e:	d007      	beq.n	8000820 <__gnu_unwind_get_pr_addr+0x18>
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__gnu_unwind_get_pr_addr+0x1c>)
 8000812:	2800      	cmp	r0, #0
 8000814:	bf0c      	ite	eq
 8000816:	4618      	moveq	r0, r3
 8000818:	2000      	movne	r0, #0
 800081a:	4770      	bx	lr
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <__gnu_unwind_get_pr_addr+0x20>)
 800081e:	4770      	bx	lr
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <__gnu_unwind_get_pr_addr+0x24>)
 8000822:	4770      	bx	lr
 8000824:	08000ef9 	.word	0x08000ef9
 8000828:	08000efd 	.word	0x08000efd
 800082c:	08000f01 	.word	0x08000f01

08000830 <get_eit_entry>:
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <get_eit_entry+0x94>)
 8000834:	4604      	mov	r4, r0
 8000836:	b083      	sub	sp, #12
 8000838:	1e8d      	subs	r5, r1, #2
 800083a:	b33b      	cbz	r3, 800088c <get_eit_entry+0x5c>
 800083c:	4628      	mov	r0, r5
 800083e:	a901      	add	r1, sp, #4
 8000840:	f3af 8000 	nop.w
 8000844:	b1e8      	cbz	r0, 8000882 <get_eit_entry+0x52>
 8000846:	9901      	ldr	r1, [sp, #4]
 8000848:	462a      	mov	r2, r5
 800084a:	f7ff ffad 	bl	80007a8 <search_EIT_table>
 800084e:	4601      	mov	r1, r0
 8000850:	b1b8      	cbz	r0, 8000882 <get_eit_entry+0x52>
 8000852:	f7ff ff9f 	bl	8000794 <selfrel_offset31>
 8000856:	684b      	ldr	r3, [r1, #4]
 8000858:	64a0      	str	r0, [r4, #72]	; 0x48
 800085a:	2b01      	cmp	r3, #1
 800085c:	d02e      	beq.n	80008bc <get_eit_entry+0x8c>
 800085e:	2b00      	cmp	r3, #0
 8000860:	db27      	blt.n	80008b2 <get_eit_entry+0x82>
 8000862:	1d08      	adds	r0, r1, #4
 8000864:	f7ff ff96 	bl	8000794 <selfrel_offset31>
 8000868:	2300      	movs	r3, #0
 800086a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800086e:	6803      	ldr	r3, [r0, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db12      	blt.n	800089a <get_eit_entry+0x6a>
 8000874:	f7ff ff8e 	bl	8000794 <selfrel_offset31>
 8000878:	4603      	mov	r3, r0
 800087a:	2000      	movs	r0, #0
 800087c:	6123      	str	r3, [r4, #16]
 800087e:	b003      	add	sp, #12
 8000880:	bd30      	pop	{r4, r5, pc}
 8000882:	2300      	movs	r3, #0
 8000884:	2009      	movs	r0, #9
 8000886:	6123      	str	r3, [r4, #16]
 8000888:	b003      	add	sp, #12
 800088a:	bd30      	pop	{r4, r5, pc}
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <get_eit_entry+0x98>)
 800088e:	490f      	ldr	r1, [pc, #60]	; (80008cc <get_eit_entry+0x9c>)
 8000890:	4618      	mov	r0, r3
 8000892:	1ac9      	subs	r1, r1, r3
 8000894:	10c9      	asrs	r1, r1, #3
 8000896:	9101      	str	r1, [sp, #4]
 8000898:	e7d6      	b.n	8000848 <get_eit_entry+0x18>
 800089a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800089e:	f7ff ffb3 	bl	8000808 <__gnu_unwind_get_pr_addr>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	bf14      	ite	ne
 80008a8:	2000      	movne	r0, #0
 80008aa:	2009      	moveq	r0, #9
 80008ac:	6123      	str	r3, [r4, #16]
 80008ae:	b003      	add	sp, #12
 80008b0:	bd30      	pop	{r4, r5, pc}
 80008b2:	2301      	movs	r3, #1
 80008b4:	1d08      	adds	r0, r1, #4
 80008b6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80008ba:	e7d8      	b.n	800086e <get_eit_entry+0x3e>
 80008bc:	2300      	movs	r3, #0
 80008be:	2005      	movs	r0, #5
 80008c0:	6123      	str	r3, [r4, #16]
 80008c2:	e7dc      	b.n	800087e <get_eit_entry+0x4e>
 80008c4:	00000000 	.word	0x00000000
 80008c8:	08006bb4 	.word	0x08006bb4
 80008cc:	08006dbc 	.word	0x08006dbc

080008d0 <restore_non_core_regs>:
 80008d0:	6803      	ldr	r3, [r0, #0]
 80008d2:	b510      	push	{r4, lr}
 80008d4:	07da      	lsls	r2, r3, #31
 80008d6:	4604      	mov	r4, r0
 80008d8:	d406      	bmi.n	80008e8 <restore_non_core_regs+0x18>
 80008da:	079b      	lsls	r3, r3, #30
 80008dc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80008e0:	d509      	bpl.n	80008f6 <restore_non_core_regs+0x26>
 80008e2:	f000 fc5d 	bl	80011a0 <__gnu_Unwind_Restore_VFP_D>
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	0759      	lsls	r1, r3, #29
 80008ea:	d509      	bpl.n	8000900 <restore_non_core_regs+0x30>
 80008ec:	071a      	lsls	r2, r3, #28
 80008ee:	d50e      	bpl.n	800090e <restore_non_core_regs+0x3e>
 80008f0:	06db      	lsls	r3, r3, #27
 80008f2:	d513      	bpl.n	800091c <restore_non_core_regs+0x4c>
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	f000 fc4b 	bl	8001190 <__gnu_Unwind_Restore_VFP>
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	0759      	lsls	r1, r3, #29
 80008fe:	d4f5      	bmi.n	80008ec <restore_non_core_regs+0x1c>
 8000900:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000904:	f000 fc54 	bl	80011b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	071a      	lsls	r2, r3, #28
 800090c:	d4f0      	bmi.n	80008f0 <restore_non_core_regs+0x20>
 800090e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000912:	f000 fc55 	bl	80011c0 <__gnu_Unwind_Restore_WMMXD>
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	06db      	lsls	r3, r3, #27
 800091a:	d4eb      	bmi.n	80008f4 <restore_non_core_regs+0x24>
 800091c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000924:	f000 bc90 	b.w	8001248 <__gnu_Unwind_Restore_WMMXC>

08000928 <__gnu_unwind_24bit.constprop.0>:
 8000928:	2009      	movs	r0, #9
 800092a:	4770      	bx	lr

0800092c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800092c:	4603      	mov	r3, r0
 800092e:	6800      	ldr	r0, [r0, #0]
 8000930:	b100      	cbz	r0, 8000934 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000932:	4418      	add	r0, r3
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <_Unwind_DebugHook>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <unwind_phase2>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	4604      	mov	r4, r0
 8000940:	460e      	mov	r6, r1
 8000942:	4620      	mov	r0, r4
 8000944:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000946:	f7ff ff73 	bl	8000830 <get_eit_entry>
 800094a:	4605      	mov	r5, r0
 800094c:	b998      	cbnz	r0, 8000976 <unwind_phase2+0x3a>
 800094e:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000952:	4632      	mov	r2, r6
 8000954:	4621      	mov	r1, r4
 8000956:	2001      	movs	r0, #1
 8000958:	6923      	ldr	r3, [r4, #16]
 800095a:	f8c4 c014 	str.w	ip, [r4, #20]
 800095e:	4798      	blx	r3
 8000960:	2808      	cmp	r0, #8
 8000962:	d0ee      	beq.n	8000942 <unwind_phase2+0x6>
 8000964:	2807      	cmp	r0, #7
 8000966:	d106      	bne.n	8000976 <unwind_phase2+0x3a>
 8000968:	4628      	mov	r0, r5
 800096a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800096c:	f7ff ffe4 	bl	8000938 <_Unwind_DebugHook>
 8000970:	1d30      	adds	r0, r6, #4
 8000972:	f000 fc01 	bl	8001178 <__restore_core_regs>
 8000976:	f005 fbed 	bl	8006154 <abort>
 800097a:	bf00      	nop

0800097c <unwind_phase2_forced>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	f04f 0a00 	mov.w	sl, #0
 8000984:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000988:	f10d 0e0c 	add.w	lr, sp, #12
 800098c:	f101 0c04 	add.w	ip, r1, #4
 8000990:	68c7      	ldr	r7, [r0, #12]
 8000992:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000996:	4606      	mov	r6, r0
 8000998:	4614      	mov	r4, r2
 800099a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800099e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009b2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80009b6:	ad02      	add	r5, sp, #8
 80009b8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80009bc:	f8c5 a000 	str.w	sl, [r5]
 80009c0:	e021      	b.n	8000a06 <unwind_phase2_forced+0x8a>
 80009c2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80009c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009c8:	4629      	mov	r1, r5
 80009ca:	6173      	str	r3, [r6, #20]
 80009cc:	a87a      	add	r0, sp, #488	; 0x1e8
 80009ce:	f005 fc03 	bl	80061d8 <memcpy>
 80009d2:	4631      	mov	r1, r6
 80009d4:	4650      	mov	r0, sl
 80009d6:	6933      	ldr	r3, [r6, #16]
 80009d8:	aa7a      	add	r2, sp, #488	; 0x1e8
 80009da:	4798      	blx	r3
 80009dc:	9c88      	ldr	r4, [sp, #544]	; 0x220
 80009de:	4682      	mov	sl, r0
 80009e0:	646c      	str	r4, [r5, #68]	; 0x44
 80009e2:	4633      	mov	r3, r6
 80009e4:	4632      	mov	r2, r6
 80009e6:	4649      	mov	r1, r9
 80009e8:	2001      	movs	r0, #1
 80009ea:	e9cd 5800 	strd	r5, r8, [sp]
 80009ee:	47b8      	blx	r7
 80009f0:	4604      	mov	r4, r0
 80009f2:	b9f0      	cbnz	r0, 8000a32 <unwind_phase2_forced+0xb6>
 80009f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009f8:	4628      	mov	r0, r5
 80009fa:	a97a      	add	r1, sp, #488	; 0x1e8
 80009fc:	f005 fbec 	bl	80061d8 <memcpy>
 8000a00:	f1ba 0f08 	cmp.w	sl, #8
 8000a04:	d11b      	bne.n	8000a3e <unwind_phase2_forced+0xc2>
 8000a06:	4630      	mov	r0, r6
 8000a08:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a0a:	f7ff ff11 	bl	8000830 <get_eit_entry>
 8000a0e:	f104 0909 	add.w	r9, r4, #9
 8000a12:	fa5f fa89 	uxtb.w	sl, r9
 8000a16:	4604      	mov	r4, r0
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d0d2      	beq.n	80009c2 <unwind_phase2_forced+0x46>
 8000a1c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000a1e:	4633      	mov	r3, r6
 8000a20:	6469      	str	r1, [r5, #68]	; 0x44
 8000a22:	4632      	mov	r2, r6
 8000a24:	2001      	movs	r0, #1
 8000a26:	e9cd 5800 	strd	r5, r8, [sp]
 8000a2a:	f04a 0110 	orr.w	r1, sl, #16
 8000a2e:	47b8      	blx	r7
 8000a30:	b100      	cbz	r0, 8000a34 <unwind_phase2_forced+0xb8>
 8000a32:	2409      	movs	r4, #9
 8000a34:	4620      	mov	r0, r4
 8000a36:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	f1ba 0f07 	cmp.w	sl, #7
 8000a42:	d1f6      	bne.n	8000a32 <unwind_phase2_forced+0xb6>
 8000a44:	4620      	mov	r0, r4
 8000a46:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a48:	f7ff ff76 	bl	8000938 <_Unwind_DebugHook>
 8000a4c:	a803      	add	r0, sp, #12
 8000a4e:	f000 fb93 	bl	8001178 <__restore_core_regs>
 8000a52:	bf00      	nop

08000a54 <_Unwind_GetCFA>:
 8000a54:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000a56:	4770      	bx	lr

08000a58 <__gnu_Unwind_RaiseException>:
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8000a5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000a60:	b0f9      	sub	sp, #484	; 0x1e4
 8000a62:	640b      	str	r3, [r1, #64]	; 0x40
 8000a64:	ac01      	add	r4, sp, #4
 8000a66:	f101 0c04 	add.w	ip, r1, #4
 8000a6a:	460e      	mov	r6, r1
 8000a6c:	4605      	mov	r5, r0
 8000a6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a80:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a88:	9700      	str	r7, [sp, #0]
 8000a8a:	e006      	b.n	8000a9a <__gnu_Unwind_RaiseException+0x42>
 8000a8c:	466a      	mov	r2, sp
 8000a8e:	4629      	mov	r1, r5
 8000a90:	692b      	ldr	r3, [r5, #16]
 8000a92:	4798      	blx	r3
 8000a94:	2808      	cmp	r0, #8
 8000a96:	4604      	mov	r4, r0
 8000a98:	d108      	bne.n	8000aac <__gnu_Unwind_RaiseException+0x54>
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000a9e:	f7ff fec7 	bl	8000830 <get_eit_entry>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d0f2      	beq.n	8000a8c <__gnu_Unwind_RaiseException+0x34>
 8000aa6:	2009      	movs	r0, #9
 8000aa8:	b079      	add	sp, #484	; 0x1e4
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	4668      	mov	r0, sp
 8000aae:	f7ff ff0f 	bl	80008d0 <restore_non_core_regs>
 8000ab2:	2c06      	cmp	r4, #6
 8000ab4:	d1f7      	bne.n	8000aa6 <__gnu_Unwind_RaiseException+0x4e>
 8000ab6:	4631      	mov	r1, r6
 8000ab8:	4628      	mov	r0, r5
 8000aba:	f7ff ff3f 	bl	800093c <unwind_phase2>
 8000abe:	bf00      	nop

08000ac0 <__gnu_Unwind_ForcedUnwind>:
 8000ac0:	b410      	push	{r4}
 8000ac2:	4614      	mov	r4, r2
 8000ac4:	6184      	str	r4, [r0, #24]
 8000ac6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000ac8:	60c1      	str	r1, [r0, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	641c      	str	r4, [r3, #64]	; 0x40
 8000ace:	4619      	mov	r1, r3
 8000ad0:	bc10      	pop	{r4}
 8000ad2:	e753      	b.n	800097c <unwind_phase2_forced>

08000ad4 <__gnu_Unwind_Resume>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	6943      	ldr	r3, [r0, #20]
 8000ad8:	68c6      	ldr	r6, [r0, #12]
 8000ada:	640b      	str	r3, [r1, #64]	; 0x40
 8000adc:	b9ae      	cbnz	r6, 8000b0a <__gnu_Unwind_Resume+0x36>
 8000ade:	460a      	mov	r2, r1
 8000ae0:	6903      	ldr	r3, [r0, #16]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	460d      	mov	r5, r1
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	2002      	movs	r0, #2
 8000aea:	4798      	blx	r3
 8000aec:	2807      	cmp	r0, #7
 8000aee:	d005      	beq.n	8000afc <__gnu_Unwind_Resume+0x28>
 8000af0:	2808      	cmp	r0, #8
 8000af2:	d10f      	bne.n	8000b14 <__gnu_Unwind_Resume+0x40>
 8000af4:	4629      	mov	r1, r5
 8000af6:	4620      	mov	r0, r4
 8000af8:	f7ff ff20 	bl	800093c <unwind_phase2>
 8000afc:	4630      	mov	r0, r6
 8000afe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b00:	f7ff ff1a 	bl	8000938 <_Unwind_DebugHook>
 8000b04:	1d28      	adds	r0, r5, #4
 8000b06:	f000 fb37 	bl	8001178 <__restore_core_regs>
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f7ff ff36 	bl	800097c <unwind_phase2_forced>
 8000b10:	f005 fb20 	bl	8006154 <abort>
 8000b14:	f005 fb1e 	bl	8006154 <abort>

08000b18 <__gnu_Unwind_Resume_or_Rethrow>:
 8000b18:	68c2      	ldr	r2, [r0, #12]
 8000b1a:	b12a      	cbz	r2, 8000b28 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000b1c:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8000b20:	2200      	movs	r2, #0
 8000b22:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8000b26:	e729      	b.n	800097c <unwind_phase2_forced>
 8000b28:	e796      	b.n	8000a58 <__gnu_Unwind_RaiseException>
 8000b2a:	bf00      	nop

08000b2c <_Unwind_Complete>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <_Unwind_DeleteException>:
 8000b30:	6883      	ldr	r3, [r0, #8]
 8000b32:	4601      	mov	r1, r0
 8000b34:	b10b      	cbz	r3, 8000b3a <_Unwind_DeleteException+0xa>
 8000b36:	2001      	movs	r0, #1
 8000b38:	4718      	bx	r3
 8000b3a:	4770      	bx	lr

08000b3c <_Unwind_VRS_Get>:
 8000b3c:	2901      	cmp	r1, #1
 8000b3e:	d012      	beq.n	8000b66 <_Unwind_VRS_Get+0x2a>
 8000b40:	d809      	bhi.n	8000b56 <_Unwind_VRS_Get+0x1a>
 8000b42:	b973      	cbnz	r3, 8000b62 <_Unwind_VRS_Get+0x26>
 8000b44:	2a0f      	cmp	r2, #15
 8000b46:	d80c      	bhi.n	8000b62 <_Unwind_VRS_Get+0x26>
 8000b48:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000b4c:	6842      	ldr	r2, [r0, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	9b00      	ldr	r3, [sp, #0]
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	4770      	bx	lr
 8000b56:	3903      	subs	r1, #3
 8000b58:	2901      	cmp	r1, #1
 8000b5a:	bf94      	ite	ls
 8000b5c:	2001      	movls	r0, #1
 8000b5e:	2002      	movhi	r0, #2
 8000b60:	4770      	bx	lr
 8000b62:	2002      	movs	r0, #2
 8000b64:	4770      	bx	lr
 8000b66:	4608      	mov	r0, r1
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <_Unwind_GetGR>:
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	b500      	push	{lr}
 8000b70:	b085      	sub	sp, #20
 8000b72:	460a      	mov	r2, r1
 8000b74:	a903      	add	r1, sp, #12
 8000b76:	9100      	str	r1, [sp, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f7ff ffdf 	bl	8000b3c <_Unwind_VRS_Get>
 8000b7e:	9803      	ldr	r0, [sp, #12]
 8000b80:	b005      	add	sp, #20
 8000b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b86:	bf00      	nop

08000b88 <_Unwind_VRS_Set>:
 8000b88:	2901      	cmp	r1, #1
 8000b8a:	d012      	beq.n	8000bb2 <_Unwind_VRS_Set+0x2a>
 8000b8c:	d809      	bhi.n	8000ba2 <_Unwind_VRS_Set+0x1a>
 8000b8e:	b973      	cbnz	r3, 8000bae <_Unwind_VRS_Set+0x26>
 8000b90:	2a0f      	cmp	r2, #15
 8000b92:	d80c      	bhi.n	8000bae <_Unwind_VRS_Set+0x26>
 8000b94:	9900      	ldr	r1, [sp, #0]
 8000b96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000b9a:	6809      	ldr	r1, [r1, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	6051      	str	r1, [r2, #4]
 8000ba0:	4770      	bx	lr
 8000ba2:	3903      	subs	r1, #3
 8000ba4:	2901      	cmp	r1, #1
 8000ba6:	bf94      	ite	ls
 8000ba8:	2001      	movls	r0, #1
 8000baa:	2002      	movhi	r0, #2
 8000bac:	4770      	bx	lr
 8000bae:	2002      	movs	r0, #2
 8000bb0:	4770      	bx	lr
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_Unwind_SetGR>:
 8000bb8:	2300      	movs	r3, #0
 8000bba:	b510      	push	{r4, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	ac03      	add	r4, sp, #12
 8000bc0:	9203      	str	r2, [sp, #12]
 8000bc2:	9400      	str	r4, [sp, #0]
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff ffde 	bl	8000b88 <_Unwind_VRS_Set>
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd10      	pop	{r4, pc}

08000bd0 <__gnu_Unwind_Backtrace>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	f04f 36ff 	mov.w	r6, #4294967295
 8000bd6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000bd8:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000be2:	f102 0c04 	add.w	ip, r2, #4
 8000be6:	4605      	mov	r5, r0
 8000be8:	460c      	mov	r4, r1
 8000bea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000bee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000bf2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000bf6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000bfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000bfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000c02:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000c06:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000c0a:	9616      	str	r6, [sp, #88]	; 0x58
 8000c0c:	e012      	b.n	8000c34 <__gnu_Unwind_Backtrace+0x64>
 8000c0e:	210c      	movs	r1, #12
 8000c10:	a816      	add	r0, sp, #88	; 0x58
 8000c12:	466a      	mov	r2, sp
 8000c14:	f7ff ffd0 	bl	8000bb8 <_Unwind_SetGR>
 8000c18:	4621      	mov	r1, r4
 8000c1a:	a816      	add	r0, sp, #88	; 0x58
 8000c1c:	47a8      	blx	r5
 8000c1e:	b978      	cbnz	r0, 8000c40 <__gnu_Unwind_Backtrace+0x70>
 8000c20:	4669      	mov	r1, sp
 8000c22:	2008      	movs	r0, #8
 8000c24:	9b04      	ldr	r3, [sp, #16]
 8000c26:	aa16      	add	r2, sp, #88	; 0x58
 8000c28:	4798      	blx	r3
 8000c2a:	2805      	cmp	r0, #5
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	d008      	beq.n	8000c42 <__gnu_Unwind_Backtrace+0x72>
 8000c30:	2809      	cmp	r0, #9
 8000c32:	d005      	beq.n	8000c40 <__gnu_Unwind_Backtrace+0x70>
 8000c34:	4668      	mov	r0, sp
 8000c36:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000c38:	f7ff fdfa 	bl	8000830 <get_eit_entry>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d0e6      	beq.n	8000c0e <__gnu_Unwind_Backtrace+0x3e>
 8000c40:	2609      	movs	r6, #9
 8000c42:	a816      	add	r0, sp, #88	; 0x58
 8000c44:	f7ff fe44 	bl	80008d0 <restore_non_core_regs>
 8000c48:	4630      	mov	r0, r6
 8000c4a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}

08000c50 <__gnu_unwind_pr_common>:
 8000c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c54:	461e      	mov	r6, r3
 8000c56:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000c58:	b089      	sub	sp, #36	; 0x24
 8000c5a:	f854 3b04 	ldr.w	r3, [r4], #4
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4617      	mov	r7, r2
 8000c62:	f000 0803 	and.w	r8, r0, #3
 8000c66:	9406      	str	r4, [sp, #24]
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d079      	beq.n	8000d60 <__gnu_unwind_pr_common+0x110>
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	f88d 201c 	strb.w	r2, [sp, #28]
 8000c72:	0c1a      	lsrs	r2, r3, #16
 8000c74:	f88d 201d 	strb.w	r2, [sp, #29]
 8000c78:	041b      	lsls	r3, r3, #16
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	9305      	str	r3, [sp, #20]
 8000c7e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000c82:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000c84:	f1b8 0f02 	cmp.w	r8, #2
 8000c88:	bf08      	it	eq
 8000c8a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000c8c:	f013 0301 	ands.w	r3, r3, #1
 8000c90:	d00c      	beq.n	8000cac <__gnu_unwind_pr_common+0x5c>
 8000c92:	4638      	mov	r0, r7
 8000c94:	a905      	add	r1, sp, #20
 8000c96:	f000 fb71 	bl	800137c <__gnu_unwind_execute>
 8000c9a:	b918      	cbnz	r0, 8000ca4 <__gnu_unwind_pr_common+0x54>
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	b009      	add	sp, #36	; 0x24
 8000ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca4:	2009      	movs	r0, #9
 8000ca6:	b009      	add	sp, #36	; 0x24
 8000ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cac:	f8d4 a000 	ldr.w	sl, [r4]
 8000cb0:	f1ba 0f00 	cmp.w	sl, #0
 8000cb4:	d0ed      	beq.n	8000c92 <__gnu_unwind_pr_common+0x42>
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	f000 0308 	and.w	r3, r0, #8
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	2e02      	cmp	r6, #2
 8000cc0:	d04a      	beq.n	8000d58 <__gnu_unwind_pr_common+0x108>
 8000cc2:	f8b4 a000 	ldrh.w	sl, [r4]
 8000cc6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000cca:	3404      	adds	r4, #4
 8000ccc:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	f029 0b01 	bic.w	fp, r9, #1
 8000cd6:	4493      	add	fp, r2
 8000cd8:	f7ff ff48 	bl	8000b6c <_Unwind_GetGR>
 8000cdc:	4583      	cmp	fp, r0
 8000cde:	d839      	bhi.n	8000d54 <__gnu_unwind_pr_common+0x104>
 8000ce0:	f02a 0201 	bic.w	r2, sl, #1
 8000ce4:	445a      	add	r2, fp
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	bf94      	ite	ls
 8000cea:	2000      	movls	r0, #0
 8000cec:	2001      	movhi	r0, #1
 8000cee:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	f00a 0a01 	and.w	sl, sl, #1
 8000cfa:	ea43 030a 	orr.w	r3, r3, sl
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d049      	beq.n	8000d96 <__gnu_unwind_pr_common+0x146>
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d032      	beq.n	8000d6c <__gnu_unwind_pr_common+0x11c>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1cc      	bne.n	8000ca4 <__gnu_unwind_pr_common+0x54>
 8000d0a:	f1b8 0f00 	cmp.w	r8, #0
 8000d0e:	d002      	beq.n	8000d16 <__gnu_unwind_pr_common+0xc6>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	f040 80ce 	bne.w	8000eb2 <__gnu_unwind_pr_common+0x262>
 8000d16:	3404      	adds	r4, #4
 8000d18:	f8d4 a000 	ldr.w	sl, [r4]
 8000d1c:	f1ba 0f00 	cmp.w	sl, #0
 8000d20:	d1cd      	bne.n	8000cbe <__gnu_unwind_pr_common+0x6e>
 8000d22:	4638      	mov	r0, r7
 8000d24:	a905      	add	r1, sp, #20
 8000d26:	f000 fb29 	bl	800137c <__gnu_unwind_execute>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d1ba      	bne.n	8000ca4 <__gnu_unwind_pr_common+0x54>
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0b3      	beq.n	8000c9c <__gnu_unwind_pr_common+0x4c>
 8000d34:	210f      	movs	r1, #15
 8000d36:	4638      	mov	r0, r7
 8000d38:	f7ff ff18 	bl	8000b6c <_Unwind_GetGR>
 8000d3c:	210e      	movs	r1, #14
 8000d3e:	4602      	mov	r2, r0
 8000d40:	4638      	mov	r0, r7
 8000d42:	f7ff ff39 	bl	8000bb8 <_Unwind_SetGR>
 8000d46:	4638      	mov	r0, r7
 8000d48:	210f      	movs	r1, #15
 8000d4a:	4a6a      	ldr	r2, [pc, #424]	; (8000ef4 <__gnu_unwind_pr_common+0x2a4>)
 8000d4c:	f7ff ff34 	bl	8000bb8 <_Unwind_SetGR>
 8000d50:	2007      	movs	r0, #7
 8000d52:	e7a8      	b.n	8000ca6 <__gnu_unwind_pr_common+0x56>
 8000d54:	2000      	movs	r0, #0
 8000d56:	e7ca      	b.n	8000cee <__gnu_unwind_pr_common+0x9e>
 8000d58:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000d5c:	3408      	adds	r4, #8
 8000d5e:	e7b5      	b.n	8000ccc <__gnu_unwind_pr_common+0x7c>
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	9305      	str	r3, [sp, #20]
 8000d64:	2303      	movs	r3, #3
 8000d66:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000d6a:	e78a      	b.n	8000c82 <__gnu_unwind_pr_common+0x32>
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000d72:	f1b8 0f00 	cmp.w	r8, #0
 8000d76:	d145      	bne.n	8000e04 <__gnu_unwind_pr_common+0x1b4>
 8000d78:	b128      	cbz	r0, 8000d86 <__gnu_unwind_pr_common+0x136>
 8000d7a:	9a02      	ldr	r2, [sp, #8]
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d05c      	beq.n	8000e3a <__gnu_unwind_pr_common+0x1ea>
 8000d80:	f1bb 0f00 	cmp.w	fp, #0
 8000d84:	d074      	beq.n	8000e70 <__gnu_unwind_pr_common+0x220>
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da00      	bge.n	8000d8c <__gnu_unwind_pr_common+0x13c>
 8000d8a:	3404      	adds	r4, #4
 8000d8c:	f10b 0b01 	add.w	fp, fp, #1
 8000d90:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000d94:	e7c0      	b.n	8000d18 <__gnu_unwind_pr_common+0xc8>
 8000d96:	f1b8 0f00 	cmp.w	r8, #0
 8000d9a:	d119      	bne.n	8000dd0 <__gnu_unwind_pr_common+0x180>
 8000d9c:	b1b0      	cbz	r0, 8000dcc <__gnu_unwind_pr_common+0x17c>
 8000d9e:	6863      	ldr	r3, [r4, #4]
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	1c99      	adds	r1, r3, #2
 8000da4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000da8:	f43f af7c 	beq.w	8000ca4 <__gnu_unwind_pr_common+0x54>
 8000dac:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000db0:	3301      	adds	r3, #1
 8000db2:	9104      	str	r1, [sp, #16]
 8000db4:	f000 8091 	beq.w	8000eda <__gnu_unwind_pr_common+0x28a>
 8000db8:	1d20      	adds	r0, r4, #4
 8000dba:	f7ff fdb7 	bl	800092c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000dbe:	ab04      	add	r3, sp, #16
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f004 fb12 	bl	80053ec <__cxa_type_match>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d15c      	bne.n	8000e86 <__gnu_unwind_pr_common+0x236>
 8000dcc:	3408      	adds	r4, #8
 8000dce:	e7a3      	b.n	8000d18 <__gnu_unwind_pr_common+0xc8>
 8000dd0:	210d      	movs	r1, #13
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000dd8:	f7ff fec8 	bl	8000b6c <_Unwind_GetGR>
 8000ddc:	4581      	cmp	r9, r0
 8000dde:	d1f5      	bne.n	8000dcc <__gnu_unwind_pr_common+0x17c>
 8000de0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000de2:	429c      	cmp	r4, r3
 8000de4:	d1f2      	bne.n	8000dcc <__gnu_unwind_pr_common+0x17c>
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff fcd4 	bl	8000794 <selfrel_offset31>
 8000dec:	210f      	movs	r1, #15
 8000dee:	4602      	mov	r2, r0
 8000df0:	4638      	mov	r0, r7
 8000df2:	f7ff fee1 	bl	8000bb8 <_Unwind_SetGR>
 8000df6:	4638      	mov	r0, r7
 8000df8:	462a      	mov	r2, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f7ff fedc 	bl	8000bb8 <_Unwind_SetGR>
 8000e00:	2007      	movs	r0, #7
 8000e02:	e750      	b.n	8000ca6 <__gnu_unwind_pr_common+0x56>
 8000e04:	210d      	movs	r1, #13
 8000e06:	4638      	mov	r0, r7
 8000e08:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000e0c:	f7ff feae 	bl	8000b6c <_Unwind_GetGR>
 8000e10:	4581      	cmp	r9, r0
 8000e12:	d001      	beq.n	8000e18 <__gnu_unwind_pr_common+0x1c8>
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	e7b6      	b.n	8000d86 <__gnu_unwind_pr_common+0x136>
 8000e18:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	d1fa      	bne.n	8000e14 <__gnu_unwind_pr_common+0x1c4>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000e26:	18e3      	adds	r3, r4, r3
 8000e28:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000e2c:	636b      	str	r3, [r5, #52]	; 0x34
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db5a      	blt.n	8000eea <__gnu_unwind_pr_common+0x29a>
 8000e34:	2301      	movs	r3, #1
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	e7a8      	b.n	8000d8c <__gnu_unwind_pr_common+0x13c>
 8000e3a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e42:	4691      	mov	r9, r2
 8000e44:	46b0      	mov	r8, r6
 8000e46:	f104 0a04 	add.w	sl, r4, #4
 8000e4a:	461e      	mov	r6, r3
 8000e4c:	e00e      	b.n	8000e6c <__gnu_unwind_pr_common+0x21c>
 8000e4e:	4650      	mov	r0, sl
 8000e50:	9604      	str	r6, [sp, #16]
 8000e52:	f7ff fd6b 	bl	800092c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000e56:	2200      	movs	r2, #0
 8000e58:	4601      	mov	r1, r0
 8000e5a:	ab04      	add	r3, sp, #16
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	f109 0901 	add.w	r9, r9, #1
 8000e62:	f10a 0a04 	add.w	sl, sl, #4
 8000e66:	f004 fac1 	bl	80053ec <__cxa_type_match>
 8000e6a:	b9e8      	cbnz	r0, 8000ea8 <__gnu_unwind_pr_common+0x258>
 8000e6c:	45d9      	cmp	r9, fp
 8000e6e:	d1ee      	bne.n	8000e4e <__gnu_unwind_pr_common+0x1fe>
 8000e70:	210d      	movs	r1, #13
 8000e72:	4638      	mov	r0, r7
 8000e74:	f7ff fe7a 	bl	8000b6c <_Unwind_GetGR>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	9a04      	ldr	r2, [sp, #16]
 8000e7c:	2006      	movs	r0, #6
 8000e7e:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 8000e82:	622b      	str	r3, [r5, #32]
 8000e84:	e70f      	b.n	8000ca6 <__gnu_unwind_pr_common+0x56>
 8000e86:	4681      	mov	r9, r0
 8000e88:	210d      	movs	r1, #13
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	f7ff fe6e 	bl	8000b6c <_Unwind_GetGR>
 8000e90:	f1b9 0f02 	cmp.w	r9, #2
 8000e94:	6228      	str	r0, [r5, #32]
 8000e96:	d125      	bne.n	8000ee4 <__gnu_unwind_pr_common+0x294>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	9a04      	ldr	r2, [sp, #16]
 8000e9c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000ea0:	626b      	str	r3, [r5, #36]	; 0x24
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ea6:	e6fe      	b.n	8000ca6 <__gnu_unwind_pr_common+0x56>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000eb0:	e769      	b.n	8000d86 <__gnu_unwind_pr_common+0x136>
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fc6e 	bl	8000794 <selfrel_offset31>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	3404      	adds	r4, #4
 8000ebc:	63ac      	str	r4, [r5, #56]	; 0x38
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	4614      	mov	r4, r2
 8000ec2:	f004 faf1 	bl	80054a8 <__cxa_begin_cleanup>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	f43f aeec 	beq.w	8000ca4 <__gnu_unwind_pr_common+0x54>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	4622      	mov	r2, r4
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	f7ff fe71 	bl	8000bb8 <_Unwind_SetGR>
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	e6e5      	b.n	8000ca6 <__gnu_unwind_pr_common+0x56>
 8000eda:	210d      	movs	r1, #13
 8000edc:	4638      	mov	r0, r7
 8000ede:	f7ff fe45 	bl	8000b6c <_Unwind_GetGR>
 8000ee2:	6228      	str	r0, [r5, #32]
 8000ee4:	9b04      	ldr	r3, [sp, #16]
 8000ee6:	626b      	str	r3, [r5, #36]	; 0x24
 8000ee8:	e7db      	b.n	8000ea2 <__gnu_unwind_pr_common+0x252>
 8000eea:	f10b 0001 	add.w	r0, fp, #1
 8000eee:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000ef2:	e779      	b.n	8000de8 <__gnu_unwind_pr_common+0x198>
 8000ef4:	0800608f 	.word	0x0800608f

08000ef8 <__aeabi_unwind_cpp_pr0>:
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e6a9      	b.n	8000c50 <__gnu_unwind_pr_common>

08000efc <__aeabi_unwind_cpp_pr1>:
 8000efc:	2301      	movs	r3, #1
 8000efe:	e6a7      	b.n	8000c50 <__gnu_unwind_pr_common>

08000f00 <__aeabi_unwind_cpp_pr2>:
 8000f00:	2302      	movs	r3, #2
 8000f02:	e6a5      	b.n	8000c50 <__gnu_unwind_pr_common>

08000f04 <_Unwind_VRS_Pop>:
 8000f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f08:	4606      	mov	r6, r0
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	461c      	mov	r4, r3
 8000f0e:	b0c3      	sub	sp, #268	; 0x10c
 8000f10:	2904      	cmp	r1, #4
 8000f12:	f200 80b8 	bhi.w	8001086 <_Unwind_VRS_Pop+0x182>
 8000f16:	e8df f001 	tbb	[pc, r1]
 8000f1a:	569c      	.short	0x569c
 8000f1c:	2db6      	.short	0x2db6
 8000f1e:	03          	.byte	0x03
 8000f1f:	00          	.byte	0x00
 8000f20:	2c00      	cmp	r4, #0
 8000f22:	f040 80b0 	bne.w	8001086 <_Unwind_VRS_Pop+0x182>
 8000f26:	2a10      	cmp	r2, #16
 8000f28:	f200 80ad 	bhi.w	8001086 <_Unwind_VRS_Pop+0x182>
 8000f2c:	6803      	ldr	r3, [r0, #0]
 8000f2e:	06d8      	lsls	r0, r3, #27
 8000f30:	f100 80f1 	bmi.w	8001116 <_Unwind_VRS_Pop+0x212>
 8000f34:	af20      	add	r7, sp, #128	; 0x80
 8000f36:	4638      	mov	r0, r7
 8000f38:	f000 f990 	bl	800125c <__gnu_Unwind_Save_WMMXC>
 8000f3c:	2401      	movs	r4, #1
 8000f3e:	4638      	mov	r0, r7
 8000f40:	2300      	movs	r3, #0
 8000f42:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000f44:	fa04 f203 	lsl.w	r2, r4, r3
 8000f48:	422a      	tst	r2, r5
 8000f4a:	f103 0301 	add.w	r3, r3, #1
 8000f4e:	d005      	beq.n	8000f5c <_Unwind_VRS_Pop+0x58>
 8000f50:	460a      	mov	r2, r1
 8000f52:	f852 cb04 	ldr.w	ip, [r2], #4
 8000f56:	4611      	mov	r1, r2
 8000f58:	f8c0 c000 	str.w	ip, [r0]
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	f100 0004 	add.w	r0, r0, #4
 8000f62:	d1ef      	bne.n	8000f44 <_Unwind_VRS_Pop+0x40>
 8000f64:	4638      	mov	r0, r7
 8000f66:	63b1      	str	r1, [r6, #56]	; 0x38
 8000f68:	f000 f96e 	bl	8001248 <__gnu_Unwind_Restore_WMMXC>
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	b043      	add	sp, #268	; 0x10c
 8000f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f74:	2c03      	cmp	r4, #3
 8000f76:	f040 8086 	bne.w	8001086 <_Unwind_VRS_Pop+0x182>
 8000f7a:	b294      	uxth	r4, r2
 8000f7c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000f80:	2b10      	cmp	r3, #16
 8000f82:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000f86:	d87e      	bhi.n	8001086 <_Unwind_VRS_Pop+0x182>
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	071f      	lsls	r7, r3, #28
 8000f8c:	f100 80cb 	bmi.w	8001126 <_Unwind_VRS_Pop+0x222>
 8000f90:	af20      	add	r7, sp, #128	; 0x80
 8000f92:	4638      	mov	r0, r7
 8000f94:	f000 f936 	bl	8001204 <__gnu_Unwind_Save_WMMXD>
 8000f98:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000f9a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000f9e:	b154      	cbz	r4, 8000fb6 <_Unwind_VRS_Pop+0xb2>
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000fa6:	1ad0      	subs	r0, r2, r3
 8000fa8:	00e4      	lsls	r4, r4, #3
 8000faa:	581d      	ldr	r5, [r3, r0]
 8000fac:	f843 5b04 	str.w	r5, [r3], #4
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d1fa      	bne.n	8000faa <_Unwind_VRS_Pop+0xa6>
 8000fb4:	4422      	add	r2, r4
 8000fb6:	4638      	mov	r0, r7
 8000fb8:	63b2      	str	r2, [r6, #56]	; 0x38
 8000fba:	f000 f901 	bl	80011c0 <__gnu_Unwind_Restore_WMMXD>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	b043      	add	sp, #268	; 0x10c
 8000fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fc6:	2c01      	cmp	r4, #1
 8000fc8:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000fcc:	b295      	uxth	r5, r2
 8000fce:	d056      	beq.n	800107e <_Unwind_VRS_Pop+0x17a>
 8000fd0:	2c05      	cmp	r4, #5
 8000fd2:	d158      	bne.n	8001086 <_Unwind_VRS_Pop+0x182>
 8000fd4:	eb08 0905 	add.w	r9, r8, r5
 8000fd8:	f1b9 0f20 	cmp.w	r9, #32
 8000fdc:	d853      	bhi.n	8001086 <_Unwind_VRS_Pop+0x182>
 8000fde:	f1b8 0f0f 	cmp.w	r8, #15
 8000fe2:	d973      	bls.n	80010cc <_Unwind_VRS_Pop+0x1c8>
 8000fe4:	46a9      	mov	r9, r5
 8000fe6:	2d00      	cmp	r5, #0
 8000fe8:	f040 8084 	bne.w	80010f4 <_Unwind_VRS_Pop+0x1f0>
 8000fec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000fee:	b365      	cbz	r5, 800104a <_Unwind_VRS_Pop+0x146>
 8000ff0:	af20      	add	r7, sp, #128	; 0x80
 8000ff2:	f04f 0900 	mov.w	r9, #0
 8000ff6:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000ffa:	3f04      	subs	r7, #4
 8000ffc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001000:	f853 1b04 	ldr.w	r1, [r3], #4
 8001004:	42ab      	cmp	r3, r5
 8001006:	f847 1f04 	str.w	r1, [r7, #4]!
 800100a:	d1f9      	bne.n	8001000 <_Unwind_VRS_Pop+0xfc>
 800100c:	f1b9 0f00 	cmp.w	r9, #0
 8001010:	d00f      	beq.n	8001032 <_Unwind_VRS_Pop+0x12e>
 8001012:	466f      	mov	r7, sp
 8001014:	4641      	mov	r1, r8
 8001016:	2910      	cmp	r1, #16
 8001018:	bf38      	it	cc
 800101a:	2110      	movcc	r1, #16
 800101c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001020:	3984      	subs	r1, #132	; 0x84
 8001022:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001026:	f853 0b04 	ldr.w	r0, [r3], #4
 800102a:	42ab      	cmp	r3, r5
 800102c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001030:	d1f9      	bne.n	8001026 <_Unwind_VRS_Pop+0x122>
 8001032:	2c01      	cmp	r4, #1
 8001034:	d07f      	beq.n	8001136 <_Unwind_VRS_Pop+0x232>
 8001036:	f1b8 0f0f 	cmp.w	r8, #15
 800103a:	63b5      	str	r5, [r6, #56]	; 0x38
 800103c:	d942      	bls.n	80010c4 <_Unwind_VRS_Pop+0x1c0>
 800103e:	f1b9 0f00 	cmp.w	r9, #0
 8001042:	d002      	beq.n	800104a <_Unwind_VRS_Pop+0x146>
 8001044:	4668      	mov	r0, sp
 8001046:	f000 f8b3 	bl	80011b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800104a:	2000      	movs	r0, #0
 800104c:	b043      	add	sp, #268	; 0x10c
 800104e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001052:	b9c4      	cbnz	r4, 8001086 <_Unwind_VRS_Pop+0x182>
 8001054:	4623      	mov	r3, r4
 8001056:	2401      	movs	r4, #1
 8001058:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800105a:	1d37      	adds	r7, r6, #4
 800105c:	b2a8      	uxth	r0, r5
 800105e:	fa04 f103 	lsl.w	r1, r4, r3
 8001062:	4201      	tst	r1, r0
 8001064:	bf1c      	itt	ne
 8001066:	f852 1b04 	ldrne.w	r1, [r2], #4
 800106a:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 800106e:	3301      	adds	r3, #1
 8001070:	2b10      	cmp	r3, #16
 8001072:	d1f4      	bne.n	800105e <_Unwind_VRS_Pop+0x15a>
 8001074:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8001078:	d1e7      	bne.n	800104a <_Unwind_VRS_Pop+0x146>
 800107a:	63b2      	str	r2, [r6, #56]	; 0x38
 800107c:	e004      	b.n	8001088 <_Unwind_VRS_Pop+0x184>
 800107e:	eb08 0305 	add.w	r3, r8, r5
 8001082:	2b10      	cmp	r3, #16
 8001084:	d903      	bls.n	800108e <_Unwind_VRS_Pop+0x18a>
 8001086:	2002      	movs	r0, #2
 8001088:	b043      	add	sp, #268	; 0x10c
 800108a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800108e:	f1b8 0f0f 	cmp.w	r8, #15
 8001092:	d8f8      	bhi.n	8001086 <_Unwind_VRS_Pop+0x182>
 8001094:	6833      	ldr	r3, [r6, #0]
 8001096:	07da      	lsls	r2, r3, #31
 8001098:	d506      	bpl.n	80010a8 <_Unwind_VRS_Pop+0x1a4>
 800109a:	4630      	mov	r0, r6
 800109c:	f023 0303 	bic.w	r3, r3, #3
 80010a0:	f840 3b48 	str.w	r3, [r0], #72
 80010a4:	f000 f878 	bl	8001198 <__gnu_Unwind_Save_VFP>
 80010a8:	af20      	add	r7, sp, #128	; 0x80
 80010aa:	4638      	mov	r0, r7
 80010ac:	f000 f874 	bl	8001198 <__gnu_Unwind_Save_VFP>
 80010b0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80010b2:	2d00      	cmp	r5, #0
 80010b4:	d19d      	bne.n	8000ff2 <_Unwind_VRS_Pop+0xee>
 80010b6:	461d      	mov	r5, r3
 80010b8:	3504      	adds	r5, #4
 80010ba:	4638      	mov	r0, r7
 80010bc:	63b5      	str	r5, [r6, #56]	; 0x38
 80010be:	f000 f867 	bl	8001190 <__gnu_Unwind_Restore_VFP>
 80010c2:	e7c2      	b.n	800104a <_Unwind_VRS_Pop+0x146>
 80010c4:	a820      	add	r0, sp, #128	; 0x80
 80010c6:	f000 f86b 	bl	80011a0 <__gnu_Unwind_Restore_VFP_D>
 80010ca:	e7b8      	b.n	800103e <_Unwind_VRS_Pop+0x13a>
 80010cc:	f1b9 0f10 	cmp.w	r9, #16
 80010d0:	d93f      	bls.n	8001152 <_Unwind_VRS_Pop+0x24e>
 80010d2:	f1a9 0910 	sub.w	r9, r9, #16
 80010d6:	6833      	ldr	r3, [r6, #0]
 80010d8:	07d9      	lsls	r1, r3, #31
 80010da:	d508      	bpl.n	80010ee <_Unwind_VRS_Pop+0x1ea>
 80010dc:	4630      	mov	r0, r6
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	f840 3b48 	str.w	r3, [r0], #72
 80010ea:	f000 f85d 	bl	80011a8 <__gnu_Unwind_Save_VFP_D>
 80010ee:	f1b9 0f00 	cmp.w	r9, #0
 80010f2:	d031      	beq.n	8001158 <_Unwind_VRS_Pop+0x254>
 80010f4:	6833      	ldr	r3, [r6, #0]
 80010f6:	075a      	lsls	r2, r3, #29
 80010f8:	d41f      	bmi.n	800113a <_Unwind_VRS_Pop+0x236>
 80010fa:	f1b8 0f0f 	cmp.w	r8, #15
 80010fe:	d924      	bls.n	800114a <_Unwind_VRS_Pop+0x246>
 8001100:	466f      	mov	r7, sp
 8001102:	f1c8 0510 	rsb	r5, r8, #16
 8001106:	4638      	mov	r0, r7
 8001108:	f000 f856 	bl	80011b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800110c:	2d00      	cmp	r5, #0
 800110e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001110:	dd80      	ble.n	8001014 <_Unwind_VRS_Pop+0x110>
 8001112:	af20      	add	r7, sp, #128	; 0x80
 8001114:	e76f      	b.n	8000ff6 <_Unwind_VRS_Pop+0xf2>
 8001116:	f023 0310 	bic.w	r3, r3, #16
 800111a:	6033      	str	r3, [r6, #0]
 800111c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001120:	f000 f89c 	bl	800125c <__gnu_Unwind_Save_WMMXC>
 8001124:	e706      	b.n	8000f34 <_Unwind_VRS_Pop+0x30>
 8001126:	f023 0308 	bic.w	r3, r3, #8
 800112a:	6003      	str	r3, [r0, #0]
 800112c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001130:	f000 f868 	bl	8001204 <__gnu_Unwind_Save_WMMXD>
 8001134:	e72c      	b.n	8000f90 <_Unwind_VRS_Pop+0x8c>
 8001136:	af20      	add	r7, sp, #128	; 0x80
 8001138:	e7be      	b.n	80010b8 <_Unwind_VRS_Pop+0x1b4>
 800113a:	4630      	mov	r0, r6
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	f840 3bd0 	str.w	r3, [r0], #208
 8001144:	f000 f838 	bl	80011b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001148:	e7d7      	b.n	80010fa <_Unwind_VRS_Pop+0x1f6>
 800114a:	a820      	add	r0, sp, #128	; 0x80
 800114c:	f000 f82c 	bl	80011a8 <__gnu_Unwind_Save_VFP_D>
 8001150:	e7d6      	b.n	8001100 <_Unwind_VRS_Pop+0x1fc>
 8001152:	f04f 0900 	mov.w	r9, #0
 8001156:	e7be      	b.n	80010d6 <_Unwind_VRS_Pop+0x1d2>
 8001158:	f1b8 0f0f 	cmp.w	r8, #15
 800115c:	f63f af46 	bhi.w	8000fec <_Unwind_VRS_Pop+0xe8>
 8001160:	af20      	add	r7, sp, #128	; 0x80
 8001162:	4638      	mov	r0, r7
 8001164:	f000 f820 	bl	80011a8 <__gnu_Unwind_Save_VFP_D>
 8001168:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800116a:	2d00      	cmp	r5, #0
 800116c:	f47f af41 	bne.w	8000ff2 <_Unwind_VRS_Pop+0xee>
 8001170:	4638      	mov	r0, r7
 8001172:	f000 f815 	bl	80011a0 <__gnu_Unwind_Restore_VFP_D>
 8001176:	e768      	b.n	800104a <_Unwind_VRS_Pop+0x146>

08001178 <__restore_core_regs>:
 8001178:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800117c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001180:	469c      	mov	ip, r3
 8001182:	46a6      	mov	lr, r4
 8001184:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001188:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800118c:	46e5      	mov	sp, ip
 800118e:	bd00      	pop	{pc}

08001190 <__gnu_Unwind_Restore_VFP>:
 8001190:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <__gnu_Unwind_Save_VFP>:
 8001198:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <__gnu_Unwind_Restore_VFP_D>:
 80011a0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <__gnu_Unwind_Save_VFP_D>:
 80011a8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80011b0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80011b8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <__gnu_Unwind_Restore_WMMXD>:
 80011c0:	ecf0 0102 	ldfe	f0, [r0], #8
 80011c4:	ecf0 1102 	ldfe	f1, [r0], #8
 80011c8:	ecf0 2102 	ldfe	f2, [r0], #8
 80011cc:	ecf0 3102 	ldfe	f3, [r0], #8
 80011d0:	ecf0 4102 	ldfe	f4, [r0], #8
 80011d4:	ecf0 5102 	ldfe	f5, [r0], #8
 80011d8:	ecf0 6102 	ldfe	f6, [r0], #8
 80011dc:	ecf0 7102 	ldfe	f7, [r0], #8
 80011e0:	ecf0 8102 	ldfp	f0, [r0], #8
 80011e4:	ecf0 9102 	ldfp	f1, [r0], #8
 80011e8:	ecf0 a102 	ldfp	f2, [r0], #8
 80011ec:	ecf0 b102 	ldfp	f3, [r0], #8
 80011f0:	ecf0 c102 	ldfp	f4, [r0], #8
 80011f4:	ecf0 d102 	ldfp	f5, [r0], #8
 80011f8:	ecf0 e102 	ldfp	f6, [r0], #8
 80011fc:	ecf0 f102 	ldfp	f7, [r0], #8
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__gnu_Unwind_Save_WMMXD>:
 8001204:	ece0 0102 	stfe	f0, [r0], #8
 8001208:	ece0 1102 	stfe	f1, [r0], #8
 800120c:	ece0 2102 	stfe	f2, [r0], #8
 8001210:	ece0 3102 	stfe	f3, [r0], #8
 8001214:	ece0 4102 	stfe	f4, [r0], #8
 8001218:	ece0 5102 	stfe	f5, [r0], #8
 800121c:	ece0 6102 	stfe	f6, [r0], #8
 8001220:	ece0 7102 	stfe	f7, [r0], #8
 8001224:	ece0 8102 	stfp	f0, [r0], #8
 8001228:	ece0 9102 	stfp	f1, [r0], #8
 800122c:	ece0 a102 	stfp	f2, [r0], #8
 8001230:	ece0 b102 	stfp	f3, [r0], #8
 8001234:	ece0 c102 	stfp	f4, [r0], #8
 8001238:	ece0 d102 	stfp	f5, [r0], #8
 800123c:	ece0 e102 	stfp	f6, [r0], #8
 8001240:	ece0 f102 	stfp	f7, [r0], #8
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <__gnu_Unwind_Restore_WMMXC>:
 8001248:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800124c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001250:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001254:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <__gnu_Unwind_Save_WMMXC>:
 800125c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001260:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001264:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001268:	fca0 b101 	stc2	1, cr11, [r0], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <_Unwind_RaiseException>:
 8001270:	46ec      	mov	ip, sp
 8001272:	b500      	push	{lr}
 8001274:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001278:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001284:	a901      	add	r1, sp, #4
 8001286:	f7ff fbe7 	bl	8000a58 <__gnu_Unwind_RaiseException>
 800128a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800128e:	b012      	add	sp, #72	; 0x48
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <_Unwind_Resume>:
 8001294:	46ec      	mov	ip, sp
 8001296:	b500      	push	{lr}
 8001298:	e92d 5000 	stmdb	sp!, {ip, lr}
 800129c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012a8:	a901      	add	r1, sp, #4
 80012aa:	f7ff fc13 	bl	8000ad4 <__gnu_Unwind_Resume>
 80012ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012b2:	b012      	add	sp, #72	; 0x48
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <_Unwind_Resume_or_Rethrow>:
 80012b8:	46ec      	mov	ip, sp
 80012ba:	b500      	push	{lr}
 80012bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012cc:	a901      	add	r1, sp, #4
 80012ce:	f7ff fc23 	bl	8000b18 <__gnu_Unwind_Resume_or_Rethrow>
 80012d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012d6:	b012      	add	sp, #72	; 0x48
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <_Unwind_ForcedUnwind>:
 80012dc:	46ec      	mov	ip, sp
 80012de:	b500      	push	{lr}
 80012e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012f0:	ab01      	add	r3, sp, #4
 80012f2:	f7ff fbe5 	bl	8000ac0 <__gnu_Unwind_ForcedUnwind>
 80012f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012fa:	b012      	add	sp, #72	; 0x48
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <_Unwind_Backtrace>:
 8001300:	46ec      	mov	ip, sp
 8001302:	b500      	push	{lr}
 8001304:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001308:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001314:	aa01      	add	r2, sp, #4
 8001316:	f7ff fc5b 	bl	8000bd0 <__gnu_Unwind_Backtrace>
 800131a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800131e:	b012      	add	sp, #72	; 0x48
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop

08001324 <next_unwind_byte>:
 8001324:	7a02      	ldrb	r2, [r0, #8]
 8001326:	4603      	mov	r3, r0
 8001328:	b97a      	cbnz	r2, 800134a <next_unwind_byte+0x26>
 800132a:	7a42      	ldrb	r2, [r0, #9]
 800132c:	b1a2      	cbz	r2, 8001358 <next_unwind_byte+0x34>
 800132e:	f04f 0c03 	mov.w	ip, #3
 8001332:	6841      	ldr	r1, [r0, #4]
 8001334:	3a01      	subs	r2, #1
 8001336:	7242      	strb	r2, [r0, #9]
 8001338:	6808      	ldr	r0, [r1, #0]
 800133a:	1d0a      	adds	r2, r1, #4
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	0202      	lsls	r2, r0, #8
 8001340:	f883 c008 	strb.w	ip, [r3, #8]
 8001344:	0e00      	lsrs	r0, r0, #24
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	4770      	bx	lr
 800134a:	6800      	ldr	r0, [r0, #0]
 800134c:	3a01      	subs	r2, #1
 800134e:	721a      	strb	r2, [r3, #8]
 8001350:	0202      	lsls	r2, r0, #8
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	0e00      	lsrs	r0, r0, #24
 8001356:	4770      	bx	lr
 8001358:	20b0      	movs	r0, #176	; 0xb0
 800135a:	4770      	bx	lr

0800135c <_Unwind_GetGR.constprop.0>:
 800135c:	2300      	movs	r3, #0
 800135e:	b500      	push	{lr}
 8001360:	b085      	sub	sp, #20
 8001362:	a903      	add	r1, sp, #12
 8001364:	9100      	str	r1, [sp, #0]
 8001366:	220c      	movs	r2, #12
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbe7 	bl	8000b3c <_Unwind_VRS_Get>
 800136e:	9803      	ldr	r0, [sp, #12]
 8001370:	b005      	add	sp, #20
 8001372:	f85d fb04 	ldr.w	pc, [sp], #4
 8001376:	bf00      	nop

08001378 <unwind_UCB_from_context>:
 8001378:	e7f0      	b.n	800135c <_Unwind_GetGR.constprop.0>
 800137a:	bf00      	nop

0800137c <__gnu_unwind_execute>:
 800137c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001380:	f04f 0800 	mov.w	r8, #0
 8001384:	4605      	mov	r5, r0
 8001386:	460e      	mov	r6, r1
 8001388:	b085      	sub	sp, #20
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff ffca 	bl	8001324 <next_unwind_byte>
 8001390:	28b0      	cmp	r0, #176	; 0xb0
 8001392:	4604      	mov	r4, r0
 8001394:	f000 80ba 	beq.w	800150c <__gnu_unwind_execute+0x190>
 8001398:	0607      	lsls	r7, r0, #24
 800139a:	d520      	bpl.n	80013de <__gnu_unwind_execute+0x62>
 800139c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80013a0:	2b80      	cmp	r3, #128	; 0x80
 80013a2:	d04d      	beq.n	8001440 <__gnu_unwind_execute+0xc4>
 80013a4:	2b90      	cmp	r3, #144	; 0x90
 80013a6:	d036      	beq.n	8001416 <__gnu_unwind_execute+0x9a>
 80013a8:	2ba0      	cmp	r3, #160	; 0xa0
 80013aa:	d060      	beq.n	800146e <__gnu_unwind_execute+0xf2>
 80013ac:	2bb0      	cmp	r3, #176	; 0xb0
 80013ae:	d073      	beq.n	8001498 <__gnu_unwind_execute+0x11c>
 80013b0:	2bc0      	cmp	r3, #192	; 0xc0
 80013b2:	f000 808a 	beq.w	80014ca <__gnu_unwind_execute+0x14e>
 80013b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80013ba:	2bd0      	cmp	r3, #208	; 0xd0
 80013bc:	d10b      	bne.n	80013d6 <__gnu_unwind_execute+0x5a>
 80013be:	f000 0207 	and.w	r2, r0, #7
 80013c2:	3201      	adds	r2, #1
 80013c4:	2305      	movs	r3, #5
 80013c6:	2101      	movs	r1, #1
 80013c8:	4628      	mov	r0, r5
 80013ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013ce:	f7ff fd99 	bl	8000f04 <_Unwind_VRS_Pop>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d0d9      	beq.n	800138a <__gnu_unwind_execute+0xe>
 80013d6:	2009      	movs	r0, #9
 80013d8:	b005      	add	sp, #20
 80013da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013de:	0083      	lsls	r3, r0, #2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	1d1f      	adds	r7, r3, #4
 80013e4:	2300      	movs	r3, #0
 80013e6:	f10d 090c 	add.w	r9, sp, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	220d      	movs	r2, #13
 80013ee:	4628      	mov	r0, r5
 80013f0:	f8cd 9000 	str.w	r9, [sp]
 80013f4:	f7ff fba2 	bl	8000b3c <_Unwind_VRS_Get>
 80013f8:	9b03      	ldr	r3, [sp, #12]
 80013fa:	0660      	lsls	r0, r4, #25
 80013fc:	bf4c      	ite	mi
 80013fe:	1bdf      	submi	r7, r3, r7
 8001400:	18ff      	addpl	r7, r7, r3
 8001402:	2300      	movs	r3, #0
 8001404:	220d      	movs	r2, #13
 8001406:	4628      	mov	r0, r5
 8001408:	4619      	mov	r1, r3
 800140a:	f8cd 9000 	str.w	r9, [sp]
 800140e:	9703      	str	r7, [sp, #12]
 8001410:	f7ff fbba 	bl	8000b88 <_Unwind_VRS_Set>
 8001414:	e7b9      	b.n	800138a <__gnu_unwind_execute+0xe>
 8001416:	f000 030d 	and.w	r3, r0, #13
 800141a:	2b0d      	cmp	r3, #13
 800141c:	d0db      	beq.n	80013d6 <__gnu_unwind_execute+0x5a>
 800141e:	2300      	movs	r3, #0
 8001420:	af03      	add	r7, sp, #12
 8001422:	4619      	mov	r1, r3
 8001424:	f000 020f 	and.w	r2, r0, #15
 8001428:	9700      	str	r7, [sp, #0]
 800142a:	4628      	mov	r0, r5
 800142c:	f7ff fb86 	bl	8000b3c <_Unwind_VRS_Get>
 8001430:	2300      	movs	r3, #0
 8001432:	220d      	movs	r2, #13
 8001434:	4628      	mov	r0, r5
 8001436:	4619      	mov	r1, r3
 8001438:	9700      	str	r7, [sp, #0]
 800143a:	f7ff fba5 	bl	8000b88 <_Unwind_VRS_Set>
 800143e:	e7a4      	b.n	800138a <__gnu_unwind_execute+0xe>
 8001440:	4630      	mov	r0, r6
 8001442:	f7ff ff6f 	bl	8001324 <next_unwind_byte>
 8001446:	0224      	lsls	r4, r4, #8
 8001448:	4320      	orrs	r0, r4
 800144a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800144e:	d0c2      	beq.n	80013d6 <__gnu_unwind_execute+0x5a>
 8001450:	2300      	movs	r3, #0
 8001452:	0104      	lsls	r4, r0, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4628      	mov	r0, r5
 8001458:	b2a2      	uxth	r2, r4
 800145a:	f7ff fd53 	bl	8000f04 <_Unwind_VRS_Pop>
 800145e:	2800      	cmp	r0, #0
 8001460:	d1b9      	bne.n	80013d6 <__gnu_unwind_execute+0x5a>
 8001462:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001466:	bf18      	it	ne
 8001468:	f04f 0801 	movne.w	r8, #1
 800146c:	e78d      	b.n	800138a <__gnu_unwind_execute+0xe>
 800146e:	43c3      	mvns	r3, r0
 8001470:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	411a      	asrs	r2, r3
 800147a:	2300      	movs	r3, #0
 800147c:	0701      	lsls	r1, r0, #28
 800147e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001482:	bf48      	it	mi
 8001484:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001488:	4628      	mov	r0, r5
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fd3a 	bl	8000f04 <_Unwind_VRS_Pop>
 8001490:	2800      	cmp	r0, #0
 8001492:	f43f af7a 	beq.w	800138a <__gnu_unwind_execute+0xe>
 8001496:	e79e      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 8001498:	28b1      	cmp	r0, #177	; 0xb1
 800149a:	d03c      	beq.n	8001516 <__gnu_unwind_execute+0x19a>
 800149c:	28b2      	cmp	r0, #178	; 0xb2
 800149e:	f000 80b0 	beq.w	8001602 <__gnu_unwind_execute+0x286>
 80014a2:	28b3      	cmp	r0, #179	; 0xb3
 80014a4:	d04a      	beq.n	800153c <__gnu_unwind_execute+0x1c0>
 80014a6:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80014aa:	2bb4      	cmp	r3, #180	; 0xb4
 80014ac:	d093      	beq.n	80013d6 <__gnu_unwind_execute+0x5a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	f000 0207 	and.w	r2, r0, #7
 80014b4:	441a      	add	r2, r3
 80014b6:	4628      	mov	r0, r5
 80014b8:	4619      	mov	r1, r3
 80014ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014be:	f7ff fd21 	bl	8000f04 <_Unwind_VRS_Pop>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	f43f af61 	beq.w	800138a <__gnu_unwind_execute+0xe>
 80014c8:	e785      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 80014ca:	28c6      	cmp	r0, #198	; 0xc6
 80014cc:	d04f      	beq.n	800156e <__gnu_unwind_execute+0x1f2>
 80014ce:	28c7      	cmp	r0, #199	; 0xc7
 80014d0:	d061      	beq.n	8001596 <__gnu_unwind_execute+0x21a>
 80014d2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80014d6:	2bc0      	cmp	r3, #192	; 0xc0
 80014d8:	d070      	beq.n	80015bc <__gnu_unwind_execute+0x240>
 80014da:	28c8      	cmp	r0, #200	; 0xc8
 80014dc:	d07c      	beq.n	80015d8 <__gnu_unwind_execute+0x25c>
 80014de:	28c9      	cmp	r0, #201	; 0xc9
 80014e0:	f47f af79 	bne.w	80013d6 <__gnu_unwind_execute+0x5a>
 80014e4:	4630      	mov	r0, r6
 80014e6:	f7ff ff1d 	bl	8001324 <next_unwind_byte>
 80014ea:	2305      	movs	r3, #5
 80014ec:	4602      	mov	r2, r0
 80014ee:	2101      	movs	r1, #1
 80014f0:	4628      	mov	r0, r5
 80014f2:	0314      	lsls	r4, r2, #12
 80014f4:	f002 020f 	and.w	r2, r2, #15
 80014f8:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 80014fc:	440a      	add	r2, r1
 80014fe:	4322      	orrs	r2, r4
 8001500:	f7ff fd00 	bl	8000f04 <_Unwind_VRS_Pop>
 8001504:	2800      	cmp	r0, #0
 8001506:	f43f af40 	beq.w	800138a <__gnu_unwind_execute+0xe>
 800150a:	e764      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 800150c:	f1b8 0f00 	cmp.w	r8, #0
 8001510:	d01c      	beq.n	800154c <__gnu_unwind_execute+0x1d0>
 8001512:	2000      	movs	r0, #0
 8001514:	e760      	b.n	80013d8 <__gnu_unwind_execute+0x5c>
 8001516:	4630      	mov	r0, r6
 8001518:	f7ff ff04 	bl	8001324 <next_unwind_byte>
 800151c:	4602      	mov	r2, r0
 800151e:	2800      	cmp	r0, #0
 8001520:	f43f af59 	beq.w	80013d6 <__gnu_unwind_execute+0x5a>
 8001524:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001528:	f47f af55 	bne.w	80013d6 <__gnu_unwind_execute+0x5a>
 800152c:	4619      	mov	r1, r3
 800152e:	4628      	mov	r0, r5
 8001530:	f7ff fce8 	bl	8000f04 <_Unwind_VRS_Pop>
 8001534:	2800      	cmp	r0, #0
 8001536:	f43f af28 	beq.w	800138a <__gnu_unwind_execute+0xe>
 800153a:	e74c      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 800153c:	4630      	mov	r0, r6
 800153e:	f7ff fef1 	bl	8001324 <next_unwind_byte>
 8001542:	2301      	movs	r3, #1
 8001544:	4602      	mov	r2, r0
 8001546:	4619      	mov	r1, r3
 8001548:	4628      	mov	r0, r5
 800154a:	e7d2      	b.n	80014f2 <__gnu_unwind_execute+0x176>
 800154c:	ac03      	add	r4, sp, #12
 800154e:	4643      	mov	r3, r8
 8001550:	220e      	movs	r2, #14
 8001552:	4641      	mov	r1, r8
 8001554:	4628      	mov	r0, r5
 8001556:	9400      	str	r4, [sp, #0]
 8001558:	f7ff faf0 	bl	8000b3c <_Unwind_VRS_Get>
 800155c:	4643      	mov	r3, r8
 800155e:	220f      	movs	r2, #15
 8001560:	4628      	mov	r0, r5
 8001562:	4641      	mov	r1, r8
 8001564:	9400      	str	r4, [sp, #0]
 8001566:	f7ff fb0f 	bl	8000b88 <_Unwind_VRS_Set>
 800156a:	4640      	mov	r0, r8
 800156c:	e734      	b.n	80013d8 <__gnu_unwind_execute+0x5c>
 800156e:	4630      	mov	r0, r6
 8001570:	f7ff fed8 	bl	8001324 <next_unwind_byte>
 8001574:	4602      	mov	r2, r0
 8001576:	2303      	movs	r3, #3
 8001578:	0314      	lsls	r4, r2, #12
 800157a:	f002 020f 	and.w	r2, r2, #15
 800157e:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001582:	3201      	adds	r2, #1
 8001584:	4628      	mov	r0, r5
 8001586:	4619      	mov	r1, r3
 8001588:	4322      	orrs	r2, r4
 800158a:	f7ff fcbb 	bl	8000f04 <_Unwind_VRS_Pop>
 800158e:	2800      	cmp	r0, #0
 8001590:	f43f aefb 	beq.w	800138a <__gnu_unwind_execute+0xe>
 8001594:	e71f      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 8001596:	4630      	mov	r0, r6
 8001598:	f7ff fec4 	bl	8001324 <next_unwind_byte>
 800159c:	4602      	mov	r2, r0
 800159e:	2800      	cmp	r0, #0
 80015a0:	f43f af19 	beq.w	80013d6 <__gnu_unwind_execute+0x5a>
 80015a4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80015a8:	f47f af15 	bne.w	80013d6 <__gnu_unwind_execute+0x5a>
 80015ac:	2104      	movs	r1, #4
 80015ae:	4628      	mov	r0, r5
 80015b0:	f7ff fca8 	bl	8000f04 <_Unwind_VRS_Pop>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	f43f aee8 	beq.w	800138a <__gnu_unwind_execute+0xe>
 80015ba:	e70c      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 80015bc:	2303      	movs	r3, #3
 80015be:	f000 020f 	and.w	r2, r0, #15
 80015c2:	3201      	adds	r2, #1
 80015c4:	4628      	mov	r0, r5
 80015c6:	4619      	mov	r1, r3
 80015c8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80015cc:	f7ff fc9a 	bl	8000f04 <_Unwind_VRS_Pop>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	f43f aeda 	beq.w	800138a <__gnu_unwind_execute+0xe>
 80015d6:	e6fe      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 80015d8:	4630      	mov	r0, r6
 80015da:	f7ff fea3 	bl	8001324 <next_unwind_byte>
 80015de:	4602      	mov	r2, r0
 80015e0:	2101      	movs	r1, #1
 80015e2:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 80015e6:	f002 020f 	and.w	r2, r2, #15
 80015ea:	3410      	adds	r4, #16
 80015ec:	440a      	add	r2, r1
 80015ee:	2305      	movs	r3, #5
 80015f0:	4628      	mov	r0, r5
 80015f2:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80015f6:	f7ff fc85 	bl	8000f04 <_Unwind_VRS_Pop>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	f43f aec5 	beq.w	800138a <__gnu_unwind_execute+0xe>
 8001600:	e6e9      	b.n	80013d6 <__gnu_unwind_execute+0x5a>
 8001602:	2300      	movs	r3, #0
 8001604:	f10d 090c 	add.w	r9, sp, #12
 8001608:	220d      	movs	r2, #13
 800160a:	4619      	mov	r1, r3
 800160c:	4628      	mov	r0, r5
 800160e:	f8cd 9000 	str.w	r9, [sp]
 8001612:	f7ff fa93 	bl	8000b3c <_Unwind_VRS_Get>
 8001616:	4630      	mov	r0, r6
 8001618:	f7ff fe84 	bl	8001324 <next_unwind_byte>
 800161c:	0602      	lsls	r2, r0, #24
 800161e:	f04f 0402 	mov.w	r4, #2
 8001622:	d50c      	bpl.n	800163e <__gnu_unwind_execute+0x2c2>
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800162a:	40a0      	lsls	r0, r4
 800162c:	4418      	add	r0, r3
 800162e:	9003      	str	r0, [sp, #12]
 8001630:	4630      	mov	r0, r6
 8001632:	f7ff fe77 	bl	8001324 <next_unwind_byte>
 8001636:	0603      	lsls	r3, r0, #24
 8001638:	f104 0407 	add.w	r4, r4, #7
 800163c:	d4f2      	bmi.n	8001624 <__gnu_unwind_execute+0x2a8>
 800163e:	9b03      	ldr	r3, [sp, #12]
 8001640:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001644:	40a2      	lsls	r2, r4
 8001646:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800164a:	441a      	add	r2, r3
 800164c:	2300      	movs	r3, #0
 800164e:	9203      	str	r2, [sp, #12]
 8001650:	4628      	mov	r0, r5
 8001652:	220d      	movs	r2, #13
 8001654:	4619      	mov	r1, r3
 8001656:	f8cd 9000 	str.w	r9, [sp]
 800165a:	f7ff fa95 	bl	8000b88 <_Unwind_VRS_Set>
 800165e:	e694      	b.n	800138a <__gnu_unwind_execute+0xe>

08001660 <__gnu_unwind_frame>:
 8001660:	460b      	mov	r3, r1
 8001662:	f04f 0c03 	mov.w	ip, #3
 8001666:	b500      	push	{lr}
 8001668:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800166a:	4618      	mov	r0, r3
 800166c:	6853      	ldr	r3, [r2, #4]
 800166e:	b085      	sub	sp, #20
 8001670:	3208      	adds	r2, #8
 8001672:	9202      	str	r2, [sp, #8]
 8001674:	a901      	add	r1, sp, #4
 8001676:	0e1a      	lsrs	r2, r3, #24
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	f88d c00c 	strb.w	ip, [sp, #12]
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	f88d 200d 	strb.w	r2, [sp, #13]
 8001684:	f7ff fe7a 	bl	800137c <__gnu_unwind_execute>
 8001688:	b005      	add	sp, #20
 800168a:	f85d fb04 	ldr.w	pc, [sp], #4
 800168e:	bf00      	nop

08001690 <_Unwind_GetRegionStart>:
 8001690:	b508      	push	{r3, lr}
 8001692:	f7ff fe71 	bl	8001378 <unwind_UCB_from_context>
 8001696:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001698:	bd08      	pop	{r3, pc}
 800169a:	bf00      	nop

0800169c <_Unwind_GetLanguageSpecificData>:
 800169c:	b508      	push	{r3, lr}
 800169e:	f7ff fe6b 	bl	8001378 <unwind_UCB_from_context>
 80016a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80016a4:	79c3      	ldrb	r3, [r0, #7]
 80016a6:	3302      	adds	r3, #2
 80016a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop

080016b0 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80016b0:	4613      	mov	r3, r2
	  if (_Num)
 80016b2:	1a0a      	subs	r2, r1, r0
 80016b4:	d003      	beq.n	80016be <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0+0xe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80016b6:	4601      	mov	r1, r0
 80016b8:	1a98      	subs	r0, r3, r2
 80016ba:	f004 bd9b 	b.w	80061f4 <memmove>
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
    }
 80016be:	4770      	bx	lr

080016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>:
	{
		// priority: {filter_match_index[7:6] | is_can2[:5] | is_fifo1[:4] | is_bit16[:3] | is_mask[:2] : index[1:0]}
		template<FilterWidth filter_width, FilterMode filter_mode>
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
		{
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 80016c0:	4281      	cmp	r1, r0
 80016c2:	bf94      	ite	ls
 80016c4:	2120      	movls	r1, #32
 80016c6:	2100      	movhi	r1, #0
 80016c8:	2a01      	cmp	r2, #1
 80016ca:	bf0c      	ite	eq
 80016cc:	2310      	moveq	r3, #16
 80016ce:	2300      	movne	r3, #0
 80016d0:	4308      	orrs	r0, r1
		}
 80016d2:	4318      	orrs	r0, r3
 80016d4:	4770      	bx	lr

080016d6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
 80016d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016d8:	460e      	mov	r6, r1
 80016da:	a902      	add	r1, sp, #8
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
 80016dc:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 80016de:	4604      	mov	r4, r0
 80016e0:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 80016e4:	d018      	beq.n	8001718 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80016e6:	1c41      	adds	r1, r0, #1
 80016e8:	42b1      	cmp	r1, r6
 80016ea:	d015      	beq.n	8001718 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>(
	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
	    return __x < __y;
	  }
	else
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 80016ec:	460d      	mov	r5, r1
	{
	  if (__comp(__i, __first))
 80016ee:	7823      	ldrb	r3, [r4, #0]
 80016f0:	f815 7b01 	ldrb.w	r7, [r5], #1
 80016f4:	42bb      	cmp	r3, r7
 80016f6:	d906      	bls.n	8001706 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 80016f8:	462a      	mov	r2, r5
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff ffd8 	bl	80016b0 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8001700:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001702:	4629      	mov	r1, r5
 8001704:	e7f0      	b.n	80016e8 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x12>
 8001706:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 800170a:	429f      	cmp	r7, r3
 800170c:	d202      	bcs.n	8001714 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x3e>
	  *__last = _GLIBCXX_MOVE(*__next);
 800170e:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8001712:	e7f8      	b.n	8001706 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8001714:	700f      	strb	r7, [r1, #0]
    }
 8001716:	e7f4      	b.n	8001702 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x2c>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
 8001718:	b003      	add	sp, #12
 800171a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800171c <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 800171c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800171e:	460e      	mov	r6, r1
 8001720:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 8001722:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8001724:	4604      	mov	r4, r0
 8001726:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 800172a:	d01e      	beq.n	800176a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800172c:	1c41      	adds	r1, r0, #1
 800172e:	42b1      	cmp	r1, r6
 8001730:	d01b      	beq.n	800176a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001732:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 8001734:	7823      	ldrb	r3, [r4, #0]
 8001736:	f815 7b01 	ldrb.w	r7, [r5], #1
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	f007 0203 	and.w	r2, r7, #3
 8001742:	429a      	cmp	r2, r3
 8001744:	d206      	bcs.n	8001754 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8001746:	462a      	mov	r2, r5
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff ffb1 	bl	80016b0 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 800174e:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001750:	4629      	mov	r1, r5
 8001752:	e7ec      	b.n	800172e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 8001754:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 8001758:	f003 0003 	and.w	r0, r3, #3
 800175c:	4282      	cmp	r2, r0
 800175e:	d202      	bcs.n	8001766 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 8001760:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8001764:	e7f6      	b.n	8001754 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 8001766:	700f      	strb	r7, [r1, #0]
    }
 8001768:	e7f2      	b.n	8001750 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 800176a:	b003      	add	sp, #12
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800176e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800176e:	b5f0      	push	{r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 8001770:	1e54      	subs	r4, r2, #1
 8001772:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001776:	1065      	asrs	r5, r4, #1
 8001778:	460c      	mov	r4, r1
 800177a:	42a5      	cmp	r5, r4
 800177c:	dd0f      	ble.n	800179e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x30>
	{
	  __secondChild = 2 * (__secondChild + 1);
 800177e:	1c67      	adds	r7, r4, #1
 8001780:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8001784:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8001786:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 800178a:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 800178e:	45bc      	cmp	ip, r7
		     __first + (__secondChild - 1)))
	    __secondChild--;
 8001790:	bf88      	it	hi
 8001792:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8001796:	5d87      	ldrb	r7, [r0, r6]
 8001798:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 800179a:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 800179c:	e7ed      	b.n	800177a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xc>
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800179e:	07d5      	lsls	r5, r2, #31
 80017a0:	d40d      	bmi.n	80017be <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
 80017a2:	3a02      	subs	r2, #2
 80017a4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80017a8:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 80017ac:	d107      	bne.n	80017be <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
	{
	  __secondChild = 2 * (__secondChild + 1);
 80017ae:	1c62      	adds	r2, r4, #1
 80017b0:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80017b2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80017b6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80017ba:	5502      	strb	r2, [r0, r4]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
 80017bc:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 80017be:	1e62      	subs	r2, r4, #1
 80017c0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80017c4:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80017c6:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80017c8:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80017cc:	da09      	bge.n	80017e2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
 80017ce:	5c84      	ldrb	r4, [r0, r2]
 80017d0:	42a3      	cmp	r3, r4
 80017d2:	d906      	bls.n	80017e2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80017d4:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 80017d6:	1e54      	subs	r4, r2, #1
 80017d8:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80017dc:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80017de:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80017e0:	e7f1      	b.n	80017c6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x58>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80017e2:	702b      	strb	r3, [r5, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
 80017e6:	b082      	sub	sp, #8
 80017e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017ec:	4604      	mov	r4, r0
 80017ee:	460d      	mov	r5, r1
 80017f0:	4617      	mov	r7, r2
 80017f2:	b087      	sub	sp, #28
 80017f4:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80017f6:	f100 0801 	add.w	r8, r0, #1
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 80017fa:	1b2e      	subs	r6, r5, r4
 80017fc:	2e10      	cmp	r6, #16
 80017fe:	dd29      	ble.n	8001854 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x6e>
	{
	  if (__depth_limit == 0)
 8001800:	bb6f      	cbnz	r7, 800185e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x78>
 8001802:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8001806:	f10d 0808 	add.w	r8, sp, #8
 800180a:	f10d 0910 	add.w	r9, sp, #16
 800180e:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8001812:	e889 0003 	stmia.w	r9, {r0, r1}

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
 8001816:	1eb7      	subs	r7, r6, #2
 8001818:	107f      	asrs	r7, r7, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800181a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800181e:	4632      	mov	r2, r6
 8001820:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001824:	5de3      	ldrb	r3, [r4, r7]
 8001826:	4639      	mov	r1, r7
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff ffa0 	bl	800176e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
			     __comp);
	  if (__parent == 0)
 800182e:	b10f      	cbz	r7, 8001834 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	    return;
	  __parent--;
 8001830:	3f01      	subs	r7, #1
      while (true)
 8001832:	e7f2      	b.n	800181a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8001834:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8001838:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 800183a:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 800183c:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8001840:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8001842:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001846:	4632      	mov	r2, r6
 8001848:	2100      	movs	r1, #0
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff ff8f 	bl	800176e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8001850:	2e01      	cmp	r6, #1
 8001852:	dcef      	bgt.n	8001834 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
	  __last = __cut;
	}
    }
 8001854:	b007      	add	sp, #28
 8001856:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800185a:	b002      	add	sp, #8
 800185c:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800185e:	1076      	asrs	r6, r6, #1
 8001860:	7860      	ldrb	r0, [r4, #1]
 8001862:	5da1      	ldrb	r1, [r4, r6]
 8001864:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      if (__comp(__a, __b))
 8001868:	4288      	cmp	r0, r1
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800186a:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 800186c:	f107 37ff 	add.w	r7, r7, #4294967295
      if (__comp(__a, __b))
 8001870:	d224      	bcs.n	80018bc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xd6>
	  if (__comp(__b, __c))
 8001872:	428a      	cmp	r2, r1
 8001874:	d91c      	bls.n	80018b0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xca>
      __a = _GLIBCXX_MOVE(__b);
 8001876:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001878:	55a3      	strb	r3, [r4, r6]
 800187a:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 800187c:	462b      	mov	r3, r5
 800187e:	4616      	mov	r6, r2
 8001880:	f894 e000 	ldrb.w	lr, [r4]
 8001884:	f812 0b01 	ldrb.w	r0, [r2], #1
	  while (__comp(__first, __pivot))
 8001888:	4570      	cmp	r0, lr
 800188a:	d3f8      	bcc.n	800187e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>
	  --__last;
 800188c:	1e59      	subs	r1, r3, #1
 800188e:	460b      	mov	r3, r1
 8001890:	f811 c901 	ldrb.w	ip, [r1], #-1
	  while (__comp(__pivot, __last))
 8001894:	45e6      	cmp	lr, ip
 8001896:	d3fa      	bcc.n	800188e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xa8>
	  if (!(__first < __last))
 8001898:	429e      	cmp	r6, r3
 800189a:	d317      	bcc.n	80018cc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe6>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800189c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800189e:	4629      	mov	r1, r5
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	463a      	mov	r2, r7
 80018a4:	4630      	mov	r0, r6
 80018a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018a8:	f7ff ff9d 	bl	80017e6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
      while (__last - __first > int(_S_threshold))
 80018ac:	4635      	mov	r5, r6
 80018ae:	e7a4      	b.n	80017fa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x14>
	  else if (__comp(__a, __c))
 80018b0:	4282      	cmp	r2, r0
 80018b2:	d905      	bls.n	80018c0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xda>
      __a = _GLIBCXX_MOVE(__b);
 80018b4:	7022      	strb	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018b6:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 80018ba:	e7de      	b.n	800187a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__a, __c))
 80018bc:	4282      	cmp	r2, r0
 80018be:	d902      	bls.n	80018c6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe0>
      __a = _GLIBCXX_MOVE(__b);
 80018c0:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018c2:	7063      	strb	r3, [r4, #1]
 80018c4:	e7d9      	b.n	800187a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__b, __c))
 80018c6:	428a      	cmp	r2, r1
 80018c8:	d9d5      	bls.n	8001876 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x90>
 80018ca:	e7f3      	b.n	80018b4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xce>
      __a = _GLIBCXX_MOVE(__b);
 80018cc:	f802 cc01 	strb.w	ip, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 80018d0:	7018      	strb	r0, [r3, #0]
	  while (__comp(__first, __pivot))
 80018d2:	e7d4      	b.n	800187e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>

080018d4 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
  // sort

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b087      	sub	sp, #28
 80018d8:	ae02      	add	r6, sp, #8
	   _Compare __comp)
    {
      if (__first != __last)
 80018da:	4288      	cmp	r0, r1
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80018dc:	4604      	mov	r4, r0
 80018de:	460d      	mov	r5, r1
 80018e0:	e886 000c 	stmia.w	r6, {r2, r3}
      if (__first != __last)
 80018e4:	d02a      	beq.n	800193c <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
	{
	  std::__introsort_loop(__first, __last,
				std::__lg(__last - __first) * 2,
 80018e6:	1a0f      	subs	r7, r1, r0

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80018e8:	fab7 f287 	clz	r2, r7
 80018ec:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	0052      	lsls	r2, r2, #1
 80018f4:	9b02      	ldr	r3, [sp, #8]
 80018f6:	f7ff ff76 	bl	80017e6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
 80018fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80018fe:	ab04      	add	r3, sp, #16
      if (__last - __first > int(_S_threshold))
 8001900:	2f10      	cmp	r7, #16
 8001902:	e883 0003 	stmia.w	r3, {r0, r1}
 8001906:	dd14      	ble.n	8001932 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8001908:	cb0c      	ldmia	r3, {r2, r3}
 800190a:	f104 0610 	add.w	r6, r4, #16
 800190e:	4631      	mov	r1, r6
 8001910:	4620      	mov	r0, r4
 8001912:	f7ff fee0 	bl	80016d6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8001916:	42b5      	cmp	r5, r6
 8001918:	d010      	beq.n	800193c <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800191a:	4633      	mov	r3, r6
	__val = _GLIBCXX_MOVE(*__last);
 800191c:	7832      	ldrb	r2, [r6, #0]
 800191e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
      while (__comp(__val, __next))
 8001922:	428a      	cmp	r2, r1
 8001924:	d202      	bcs.n	800192c <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x58>
	  *__last = _GLIBCXX_MOVE(*__next);
 8001926:	f803 1901 	strb.w	r1, [r3], #-1
      while (__comp(__val, __next))
 800192a:	e7f8      	b.n	800191e <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x4a>
      *__last = _GLIBCXX_MOVE(__val);
 800192c:	701a      	strb	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800192e:	3601      	adds	r6, #1
 8001930:	e7f1      	b.n	8001916 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	std::__insertion_sort(__first, __last, __comp);
 8001932:	4629      	mov	r1, r5
 8001934:	cb0c      	ldmia	r3, {r2, r3}
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff fecd 	bl	80016d6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
				__comp);
	  std::__final_insertion_sort(__first, __last, __comp);
	}
    }
 800193c:	b007      	add	sp, #28
 800193e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001940 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8001942:	1e54      	subs	r4, r2, #1
 8001944:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001948:	1065      	asrs	r5, r4, #1
 800194a:	460c      	mov	r4, r1
 800194c:	42a5      	cmp	r5, r4
 800194e:	dd13      	ble.n	8001978 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 8001950:	1c67      	adds	r7, r4, #1
 8001952:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8001956:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8001958:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 800195c:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8001960:	f00c 0c03 	and.w	ip, ip, #3
 8001964:	f007 0703 	and.w	r7, r7, #3
 8001968:	45bc      	cmp	ip, r7
	    __secondChild--;
 800196a:	bf88      	it	hi
 800196c:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8001970:	5d87      	ldrb	r7, [r0, r6]
 8001972:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 8001974:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 8001976:	e7e9      	b.n	800194c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8001978:	07d5      	lsls	r5, r2, #31
 800197a:	d40d      	bmi.n	8001998 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 800197c:	3a02      	subs	r2, #2
 800197e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001982:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8001986:	d107      	bne.n	8001998 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 8001988:	1c62      	adds	r2, r4, #1
 800198a:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800198c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001990:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8001994:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 8001996:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800199e:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80019a0:	f003 0603 	and.w	r6, r3, #3
 80019a4:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80019a6:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80019aa:	da0b      	bge.n	80019c4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 80019ac:	5c84      	ldrb	r4, [r0, r2]
 80019ae:	f004 0703 	and.w	r7, r4, #3
 80019b2:	42b7      	cmp	r7, r6
 80019b4:	d206      	bcs.n	80019c4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80019b6:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 80019b8:	1e54      	subs	r4, r2, #1
 80019ba:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80019be:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80019c0:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80019c2:	e7ef      	b.n	80019a4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80019c4:	702b      	strb	r3, [r5, #0]
    }
 80019c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80019c8:	b082      	sub	sp, #8
 80019ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ce:	4604      	mov	r4, r0
 80019d0:	460d      	mov	r5, r1
 80019d2:	4617      	mov	r7, r2
 80019d4:	b087      	sub	sp, #28
 80019d6:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80019d8:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 80019dc:	1b2e      	subs	r6, r5, r4
 80019de:	2e10      	cmp	r6, #16
 80019e0:	dd29      	ble.n	8001a36 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 80019e2:	bb6f      	cbnz	r7, 8001a40 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 80019e4:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80019e8:	f10d 0808 	add.w	r8, sp, #8
 80019ec:	f10d 0910 	add.w	r9, sp, #16
 80019f0:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 80019f4:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 80019f8:	1eb7      	subs	r7, r6, #2
 80019fa:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80019fc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8001a00:	4632      	mov	r2, r6
 8001a02:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001a06:	5de3      	ldrb	r3, [r4, r7]
 8001a08:	4639      	mov	r1, r7
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff ff98 	bl	8001940 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8001a10:	b10f      	cbz	r7, 8001a16 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 8001a12:	3f01      	subs	r7, #1
      while (true)
 8001a14:	e7f2      	b.n	80019fc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8001a16:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8001a1a:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8001a1c:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8001a1e:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8001a22:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8001a24:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001a28:	4632      	mov	r2, r6
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff ff87 	bl	8001940 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 8001a32:	2e01      	cmp	r6, #1
 8001a34:	dcef      	bgt.n	8001a16 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 8001a36:	b007      	add	sp, #28
 8001a38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a3c:	b002      	add	sp, #8
 8001a3e:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8001a40:	1076      	asrs	r6, r6, #1
 8001a42:	f894 e001 	ldrb.w	lr, [r4, #1]
 8001a46:	5da1      	ldrb	r1, [r4, r6]
 8001a48:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8001a4c:	f00e 0903 	and.w	r9, lr, #3
 8001a50:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 8001a54:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001a56:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 8001a58:	f107 37ff 	add.w	r7, r7, #4294967295
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001a5c:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 8001a60:	d229      	bcs.n	8001ab6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 8001a62:	4594      	cmp	ip, r2
 8001a64:	d221      	bcs.n	8001aaa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 8001a66:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001a68:	55a3      	strb	r3, [r4, r6]
 8001a6a:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	4616      	mov	r6, r2
 8001a70:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001a72:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001a76:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 8001a7a:	f00c 0003 	and.w	r0, ip, #3
 8001a7e:	4288      	cmp	r0, r1
 8001a80:	d3f5      	bcc.n	8001a6e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001a86:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 8001a8a:	f00e 0903 	and.w	r9, lr, #3
 8001a8e:	4549      	cmp	r1, r9
 8001a90:	d3f8      	bcc.n	8001a84 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 8001a92:	429e      	cmp	r6, r3
 8001a94:	d318      	bcc.n	8001ac8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8001a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001a98:	4629      	mov	r1, r5
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	463a      	mov	r2, r7
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001aa2:	f7ff ff91 	bl	80019c8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 8001aa6:	4635      	mov	r5, r6
 8001aa8:	e798      	b.n	80019dc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 8001aaa:	4591      	cmp	r9, r2
 8001aac:	d205      	bcs.n	8001aba <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 8001aae:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001ab0:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 8001ab4:	e7d9      	b.n	8001a6a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 8001ab6:	4591      	cmp	r9, r2
 8001ab8:	d203      	bcs.n	8001ac2 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8001aba:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8001abe:	7063      	strb	r3, [r4, #1]
 8001ac0:	e7d3      	b.n	8001a6a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 8001ac2:	4594      	cmp	ip, r2
 8001ac4:	d2cf      	bcs.n	8001a66 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 8001ac6:	e7f2      	b.n	8001aae <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 8001ac8:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 8001acc:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 8001ad0:	e7cd      	b.n	8001a6e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

08001ad2 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:

		template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8001ad2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	b099      	sub	sp, #100	; 0x64
 8001ada:	4617      	mov	r7, r2
 8001adc:	4688      	mov	r8, r1
		{
			std::array<u8, sizeof...(filter_widthes)> priorities;

			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8001ade:	688a      	ldr	r2, [r1, #8]
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	2000      	movs	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8001ae4:	461e      	mov	r6, r3
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8001ae6:	f7ff fdeb 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4621      	mov	r1, r4
 8001aee:	9003      	str	r0, [sp, #12]
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fde5 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001af6:	68b2      	ldr	r2, [r6, #8]
 8001af8:	4621      	mov	r1, r4
 8001afa:	9004      	str	r0, [sp, #16]
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7ff fddf 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001b04:	4621      	mov	r1, r4
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	9005      	str	r0, [sp, #20]
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f7ff fdd8 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001b12:	4621      	mov	r1, r4
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	9006      	str	r0, [sp, #24]
 8001b18:	2004      	movs	r0, #4
 8001b1a:	f7ff fdd1 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001b20:	4621      	mov	r1, r4
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	9007      	str	r0, [sp, #28]
 8001b26:	2005      	movs	r0, #5
 8001b28:	f7ff fdca 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001b2e:	4621      	mov	r1, r4
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	900b      	str	r0, [sp, #44]	; 0x2c
 8001b34:	2006      	movs	r0, #6
 8001b36:	f7ff fdc3 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001b3c:	4683      	mov	fp, r0
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4621      	mov	r1, r4
 8001b42:	2007      	movs	r0, #7
 8001b44:	f7ff fdbc 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001b4a:	4682      	mov	sl, r0
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	4621      	mov	r1, r4
 8001b50:	2008      	movs	r0, #8
 8001b52:	f7ff fdb5 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001b58:	4681      	mov	r9, r0
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	2009      	movs	r0, #9
 8001b60:	f7ff fdae 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001b66:	4621      	mov	r1, r4
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	9008      	str	r0, [sp, #32]
 8001b6c:	200a      	movs	r0, #10
 8001b6e:	f7ff fda7 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001b74:	4621      	mov	r1, r4
 8001b76:	9009      	str	r0, [sp, #36]	; 0x24
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	200b      	movs	r0, #11
 8001b7c:	f7ff fda0 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b80:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001b82:	4621      	mov	r1, r4
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	900a      	str	r0, [sp, #40]	; 0x28
 8001b88:	200c      	movs	r0, #12
 8001b8a:	f7ff fd99 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001b90:	4605      	mov	r5, r0
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4621      	mov	r1, r4
 8001b96:	200d      	movs	r0, #13
 8001b98:	f7ff fd92 	bl	80016c0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b9c:	9b03      	ldr	r3, [sp, #12]
 8001b9e:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
 8001ba2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8001ba6:	9b04      	ldr	r3, [sp, #16]
 8001ba8:	f88d b056 	strb.w	fp, [sp, #86]	; 0x56
 8001bac:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 8001bb0:	9b05      	ldr	r3, [sp, #20]
 8001bb2:	f88d a057 	strb.w	sl, [sp, #87]	; 0x57
 8001bb6:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 8001bba:	9b06      	ldr	r3, [sp, #24]
 8001bbc:	f88d 9058 	strb.w	r9, [sp, #88]	; 0x58
 8001bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bc4:	9b07      	ldr	r3, [sp, #28]
 8001bc6:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
 8001bca:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8001bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8001bd0:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8001bd4:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
 8001bd8:	9b08      	ldr	r3, [sp, #32]
 8001bda:	a814      	add	r0, sp, #80	; 0x50
 8001bdc:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 8001be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001be2:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8001be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001be8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001bf4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    {
      _Compare _M_comp;

      explicit _GLIBCXX14_CONSTEXPR
      _Iter_comp_iter(_Compare __comp)
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8001bf8:	ab12      	add	r3, sp, #72	; 0x48
 8001bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8001bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001bfe:	ab10      	add	r3, sp, #64	; 0x40
 8001c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c02:	f7ff fe67 	bl	80018d4 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
	     typename _Comp = ranges::less, typename _Proj = identity>
      requires sortable<iterator_t<_Range>, _Comp, _Proj>
      constexpr borrowed_iterator_t<_Range>
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8001c06:	2200      	movs	r2, #0
			
			std::ranges::sort(priorities);

			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
			{
				for(u32 i = 0; auto& priority : priorities)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	a814      	add	r0, sp, #80	; 0x50
				{
					priority |= (i << 6);
 8001c0c:	7803      	ldrb	r3, [r0, #0]
 8001c0e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f800 3b01 	strb.w	r3, [r0], #1
					++i;

					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8001c18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c1c:	4293      	cmp	r3, r2
					++i;
 8001c1e:	f101 0101 	add.w	r1, r1, #1
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8001c22:	d001      	beq.n	8001c28 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x156>
				for(u32 i = 0; auto& priority : priorities)
 8001c24:	290e      	cmp	r1, #14
 8001c26:	d1f1      	bne.n	8001c0c <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x13a>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8001c28:	3210      	adds	r2, #16
 8001c2a:	2a40      	cmp	r2, #64	; 0x40
 8001c2c:	d1ec      	bne.n	8001c08 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x136>
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001c2e:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 8001c32:	ad0d      	add	r5, sp, #52	; 0x34
 8001c34:	ac0c      	add	r4, sp, #48	; 0x30
 8001c36:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8001c3a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8001c3e:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8001c42:	462b      	mov	r3, r5
 8001c44:	a814      	add	r0, sp, #80	; 0x50
 8001c46:	2206      	movs	r2, #6
 8001c48:	9400      	str	r4, [sp, #0]
 8001c4a:	9510      	str	r5, [sp, #64]	; 0x40
 8001c4c:	9411      	str	r4, [sp, #68]	; 0x44
 8001c4e:	f7ff febb 	bl	80019c8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	std::__insertion_sort(__first, __last, __comp);
 8001c52:	4623      	mov	r3, r4
 8001c54:	462a      	mov	r2, r5
 8001c56:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8001c5a:	a814      	add	r0, sp, #80	; 0x50
 8001c5c:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
 8001c60:	f7ff fd5c 	bl	800171c <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>

			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});

			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001c64:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8001c68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	f8c8 300c 	str.w	r3, [r8, #12]
 8001c70:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	60f3      	str	r3, [r6, #12]
 8001c80:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	60d3      	str	r3, [r2, #12]
 8001c88:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8001c8c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	60d3      	str	r3, [r2, #12]
 8001c92:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
 8001c96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	60d3      	str	r3, [r2, #12]
 8001c9c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8001ca0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	60d3      	str	r3, [r2, #12]
 8001ca6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 8001caa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	60d3      	str	r3, [r2, #12]
 8001cb0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8001cb4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	60d3      	str	r3, [r2, #12]
 8001cba:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 8001cbe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	60d3      	str	r3, [r2, #12]
 8001cc4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8001cc8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	60d3      	str	r3, [r2, #12]
 8001cce:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8001cd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	60d3      	str	r3, [r2, #12]
 8001cd8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8001cdc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	60d3      	str	r3, [r2, #12]
 8001ce2:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 8001ce6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	60d3      	str	r3, [r2, #12]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
		}
 8001cec:	b019      	add	sp, #100	; 0x64
 8001cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001cf4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
			clear_bit(bxcan->FA1R, bit_position);
		}
	}

	template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf8:	460e      	mov	r6, r1
 8001cfa:	b091      	sub	sp, #68	; 0x44
	requires (sizeof...(filter_args) <= Config::filter_bank_total_size)
	{
		// assign FMI.
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001cfc:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d00:	9f24      	ldr	r7, [sp, #144]	; 0x90
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d02:	f8cd c014 	str.w	ip, [sp, #20]
 8001d06:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d0a:	e9dd ba20 	ldrd	fp, sl, [sp, #128]	; 0x80
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d0e:	f8cd c010 	str.w	ip, [sp, #16]
 8001d12:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d16:	e9dd 9822 	ldrd	r9, r8, [sp, #136]	; 0x88
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d1a:	f8cd c00c 	str.w	ip, [sp, #12]
 8001d1e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8001d22:	e9cd a907 	strd	sl, r9, [sp, #28]
 8001d26:	f8cd c008 	str.w	ip, [sp, #8]
 8001d2a:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8001d2e:	f8cd b018 	str.w	fp, [sp, #24]
 8001d32:	f8cd c004 	str.w	ip, [sp, #4]
 8001d36:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d3a:	4615      	mov	r5, r2
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d3c:	f8cd c000 	str.w	ip, [sp]
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d40:	461c      	mov	r4, r3
 8001d42:	900d      	str	r0, [sp, #52]	; 0x34
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d44:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
 8001d48:	f7ff fec3 	bl	8001ad2 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		bit &= ~reg;
	}

	inline constexpr void set_bit(volatile auto& bit, const auto reg)
	{
		bit = bit | reg;
 8001d4c:	4bd1      	ldr	r3, [pc, #836]	; (8002094 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a0>)
 8001d4e:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit & ~reg;
 8001d5a:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8001d5e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001d62:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit | reg;
 8001d66:	f8d3 0600 	ldr.w	r0, [r3, #1536]	; 0x600
 8001d6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d6c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001d70:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001d74:	6871      	ldr	r1, [r6, #4]
 8001d76:	6830      	ldr	r0, [r6, #0]
 8001d78:	aa0e      	add	r2, sp, #56	; 0x38
 8001d7a:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001d7c:	4ac6      	ldr	r2, [pc, #792]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001d7e:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001d82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001d84:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 8001d88:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001d94:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001da0:	68b2      	ldr	r2, [r6, #8]
 8001da2:	2a00      	cmp	r2, #0
 8001da4:	f040 827d 	bne.w	80022a2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ae>
		bit = bit & ~reg;
 8001da8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001dac:	f022 0201 	bic.w	r2, r2, #1
		bit = bit | reg;
 8001db0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001db4:	7c32      	ldrb	r2, [r6, #16]
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	f000 8278 	beq.w	80022ac <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5b8>
 8001dbc:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
		bit = bit & ~reg;
 8001dc4:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001dc8:	6828      	ldr	r0, [r5, #0]
 8001dca:	6869      	ldr	r1, [r5, #4]
 8001dcc:	ab0e      	add	r3, sp, #56	; 0x38
 8001dce:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001dd0:	4bb1      	ldr	r3, [pc, #708]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001dd2:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001dd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001ddc:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
 8001de0:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001de4:	f042 0202 	orr.w	r2, r2, #2
 8001de8:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001dec:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001df0:	f042 0202 	orr.w	r2, r2, #2
 8001df4:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001df8:	68aa      	ldr	r2, [r5, #8]
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	f040 825b 	bne.w	80022b6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5c2>
		bit = bit & ~reg;
 8001e00:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001e04:	f022 0202 	bic.w	r2, r2, #2
		bit = bit | reg;
 8001e08:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001e0c:	7c2a      	ldrb	r2, [r5, #16]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	f000 8256 	beq.w	80022c0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5cc>
 8001e14:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001e18:	f042 0202 	orr.w	r2, r2, #2
		bit = bit & ~reg;
 8001e1c:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001e20:	6820      	ldr	r0, [r4, #0]
 8001e22:	6861      	ldr	r1, [r4, #4]
 8001e24:	ab0e      	add	r3, sp, #56	; 0x38
 8001e26:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001e28:	4b9b      	ldr	r3, [pc, #620]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001e2a:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001e30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e34:	f8c3 2654 	str.w	r2, [r3, #1620]	; 0x654
 8001e38:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001e3c:	f042 0204 	orr.w	r2, r2, #4
 8001e40:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001e44:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001e48:	f042 0204 	orr.w	r2, r2, #4
 8001e4c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001e50:	68a2      	ldr	r2, [r4, #8]
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	f040 8239 	bne.w	80022ca <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5d6>
		bit = bit & ~reg;
 8001e58:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001e5c:	f022 0204 	bic.w	r2, r2, #4
		bit = bit | reg;
 8001e60:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001e64:	7c22      	ldrb	r2, [r4, #16]
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	f000 8234 	beq.w	80022d4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5e0>
 8001e6c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001e70:	f042 0204 	orr.w	r2, r2, #4
		bit = bit & ~reg;
 8001e74:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001e78:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8001e7c:	6810      	ldr	r0, [r2, #0]
 8001e7e:	6851      	ldr	r1, [r2, #4]
 8001e80:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001e84:	f8c3 0258 	str.w	r0, [r3, #600]	; 0x258
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001e8a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e8e:	f8c3 265c 	str.w	r2, [r3, #1628]	; 0x65c
 8001e92:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001e96:	f042 0208 	orr.w	r2, r2, #8
 8001e9a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001e9e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001ea2:	f042 0208 	orr.w	r2, r2, #8
 8001ea6:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001eaa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001eac:	6892      	ldr	r2, [r2, #8]
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	f040 8215 	bne.w	80022de <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ea>
		bit = bit & ~reg;
 8001eb4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001eb8:	f022 0208 	bic.w	r2, r2, #8
		bit = bit | reg;
 8001ebc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001ec0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001ec2:	7c12      	ldrb	r2, [r2, #16]
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	f000 820f 	beq.w	80022e8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5f4>
 8001eca:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001ece:	f042 0208 	orr.w	r2, r2, #8
		bit = bit & ~reg;
 8001ed2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001ed6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001ed8:	ab0e      	add	r3, sp, #56	; 0x38
 8001eda:	6810      	ldr	r0, [r2, #0]
 8001edc:	6851      	ldr	r1, [r2, #4]
 8001ede:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001ee2:	f8c3 0260 	str.w	r0, [r3, #608]	; 0x260
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001ee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001ee8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001eec:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
 8001ef0:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001ef4:	f042 0210 	orr.w	r2, r2, #16
 8001ef8:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001efc:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001f00:	f042 0210 	orr.w	r2, r2, #16
 8001f04:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001f08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001f0a:	6892      	ldr	r2, [r2, #8]
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	f040 81f0 	bne.w	80022f2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5fe>
		bit = bit & ~reg;
 8001f12:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001f16:	f022 0210 	bic.w	r2, r2, #16
		bit = bit | reg;
 8001f1a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001f1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001f20:	7c12      	ldrb	r2, [r2, #16]
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	f000 81ea 	beq.w	80022fc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x608>
 8001f28:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001f2c:	f042 0210 	orr.w	r2, r2, #16
		bit = bit & ~reg;
 8001f30:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001f34:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001f36:	ab0e      	add	r3, sp, #56	; 0x38
 8001f38:	6810      	ldr	r0, [r2, #0]
 8001f3a:	6851      	ldr	r1, [r2, #4]
 8001f3c:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001f3e:	4b56      	ldr	r3, [pc, #344]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001f40:	f8c3 0268 	str.w	r0, [r3, #616]	; 0x268
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001f44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001f46:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001f4a:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8001f4e:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001f52:	f042 0220 	orr.w	r2, r2, #32
 8001f56:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001f5a:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001f5e:	f042 0220 	orr.w	r2, r2, #32
 8001f62:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001f66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001f68:	6892      	ldr	r2, [r2, #8]
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	f040 81cb 	bne.w	8002306 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x612>
		bit = bit & ~reg;
 8001f70:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001f74:	f022 0220 	bic.w	r2, r2, #32
		bit = bit | reg;
 8001f78:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001f7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001f7e:	7c12      	ldrb	r2, [r2, #16]
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	f000 81c5 	beq.w	8002310 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x61c>
 8001f86:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001f8a:	f042 0220 	orr.w	r2, r2, #32
		bit = bit & ~reg;
 8001f8e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001f92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001f94:	ab0e      	add	r3, sp, #56	; 0x38
 8001f96:	6810      	ldr	r0, [r2, #0]
 8001f98:	6851      	ldr	r1, [r2, #4]
 8001f9a:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001f9e:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001fa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001fa4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001fa8:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
 8001fac:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb4:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001fb8:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc0:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001fc4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001fc6:	6892      	ldr	r2, [r2, #8]
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	f040 81a6 	bne.w	800231a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x626>
		bit = bit & ~reg;
 8001fce:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		bit = bit | reg;
 8001fd6:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001fda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001fdc:	7c12      	ldrb	r2, [r2, #16]
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	f000 81a0 	beq.w	8002324 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x630>
 8001fe4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		bit = bit & ~reg;
 8001fec:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001ff0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001ff2:	ab0e      	add	r3, sp, #56	; 0x38
 8001ff4:	6810      	ldr	r0, [r2, #0]
 8001ff6:	6851      	ldr	r1, [r2, #4]
 8001ff8:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001ffc:	f8c3 0278 	str.w	r0, [r3, #632]	; 0x278
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002002:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002006:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 800200a:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800200e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002012:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002016:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800201a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800201e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002022:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002024:	6892      	ldr	r2, [r2, #8]
 8002026:	2a00      	cmp	r2, #0
 8002028:	f040 8181 	bne.w	800232e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x63a>
		bit = bit & ~reg;
 800202c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
		bit = bit | reg;
 8002034:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002038:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800203a:	7c12      	ldrb	r2, [r2, #16]
 800203c:	2a00      	cmp	r2, #0
 800203e:	f000 817b 	beq.w	8002338 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x644>
 8002042:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
		bit = bit & ~reg;
 800204a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800204e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002050:	ab0e      	add	r3, sp, #56	; 0x38
 8002052:	6810      	ldr	r0, [r2, #0]
 8002054:	6851      	ldr	r1, [r2, #4]
 8002056:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 800205a:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800205e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002060:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002064:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
 8002068:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800206c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002070:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002074:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800207c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002080:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002082:	6892      	ldr	r2, [r2, #8]
 8002084:	2a00      	cmp	r2, #0
 8002086:	f040 815c 	bne.w	8002342 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x64e>
		bit = bit & ~reg;
 800208a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800208e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002092:	e003      	b.n	800209c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
 8002094:	40006000 	.word	0x40006000
 8002098:	40006400 	.word	0x40006400
		bit = bit | reg;
 800209c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80020a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80020a2:	7c12      	ldrb	r2, [r2, #16]
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	f000 8151 	beq.w	800234c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x658>
 80020aa:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80020ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		bit = bit & ~reg;
 80020b2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80020b6:	f8db 0000 	ldr.w	r0, [fp]
 80020ba:	f8db 1004 	ldr.w	r1, [fp, #4]
 80020be:	ab0e      	add	r3, sp, #56	; 0x38
 80020c0:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80020c2:	4bbe      	ldr	r3, [pc, #760]	; (80023bc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80020c4:	f8c3 0288 	str.w	r0, [r3, #648]	; 0x288
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80020c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80020ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80020ce:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
 80020d2:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80020d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020da:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80020de:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80020ea:	f8db 2008 	ldr.w	r2, [fp, #8]
 80020ee:	2a00      	cmp	r2, #0
 80020f0:	f040 8131 	bne.w	8002356 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x662>
		bit = bit & ~reg;
 80020f4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80020f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		bit = bit | reg;
 80020fc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002100:	f89b 2010 	ldrb.w	r2, [fp, #16]
 8002104:	2a00      	cmp	r2, #0
 8002106:	f000 812b 	beq.w	8002360 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x66c>
 800210a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		bit = bit & ~reg;
 8002112:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002116:	f8da 0000 	ldr.w	r0, [sl]
 800211a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800211e:	ab0e      	add	r3, sp, #56	; 0x38
 8002120:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002122:	4ba6      	ldr	r3, [pc, #664]	; (80023bc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002124:	f8c3 0290 	str.w	r0, [r3, #656]	; 0x290
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800212a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800212e:	f8c3 2694 	str.w	r2, [r3, #1684]	; 0x694
 8002132:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800213e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002142:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002146:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800214a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800214e:	2a00      	cmp	r2, #0
 8002150:	f040 810b 	bne.w	800236a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x676>
		bit = bit & ~reg;
 8002154:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
		bit = bit | reg;
 800215c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002160:	f89a 2010 	ldrb.w	r2, [sl, #16]
 8002164:	2a00      	cmp	r2, #0
 8002166:	f000 8105 	beq.w	8002374 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x680>
 800216a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800216e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
		bit = bit & ~reg;
 8002172:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002176:	f8d9 0000 	ldr.w	r0, [r9]
 800217a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800217e:	ab0e      	add	r3, sp, #56	; 0x38
 8002180:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002182:	4b8e      	ldr	r3, [pc, #568]	; (80023bc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002184:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002188:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800218a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800218e:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
 8002192:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800219e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80021aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	f040 80e5 	bne.w	800237e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x68a>
		bit = bit & ~reg;
 80021b4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80021b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
		bit = bit | reg;
 80021bc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80021c0:	f899 2010 	ldrb.w	r2, [r9, #16]
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	f000 80df 	beq.w	8002388 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x694>
 80021ca:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80021ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
		bit = bit & ~reg;
 80021d2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80021d6:	f8d8 0000 	ldr.w	r0, [r8]
 80021da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80021de:	ab0e      	add	r3, sp, #56	; 0x38
 80021e0:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80021e4:	f8c3 02a0 	str.w	r0, [r3, #672]	; 0x2a0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80021e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80021ea:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80021ee:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
 80021f2:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80021f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021fa:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80021fe:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002206:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800220a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800220e:	2a00      	cmp	r2, #0
 8002210:	f040 80bf 	bne.w	8002392 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x69e>
		bit = bit & ~reg;
 8002214:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002218:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
		bit = bit | reg;
 800221c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002220:	f898 2010 	ldrb.w	r2, [r8, #16]
 8002224:	2a00      	cmp	r2, #0
 8002226:	f000 80b9 	beq.w	800239c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6a8>
 800222a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800222e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
		bit = bit & ~reg;
 8002232:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002236:	6838      	ldr	r0, [r7, #0]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	ab0e      	add	r3, sp, #56	; 0x38
 800223c:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002240:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002246:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800224a:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
 800224e:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002252:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002256:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800225a:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800225e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002262:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	2a00      	cmp	r2, #0
 800226a:	f040 809c 	bne.w	80023a6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6b2>
		bit = bit & ~reg;
 800226e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
		bit = bit | reg;
 8002276:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 800227a:	7c3a      	ldrb	r2, [r7, #16]
 800227c:	2a00      	cmp	r2, #0
 800227e:	f000 8097 	beq.w	80023b0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6bc>
 8002282:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002286:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		bit = bit & ~reg;
 800228a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 800228e:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6cc>)
 8002290:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);

		// clear FINIT
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
	}
 800229c:	b011      	add	sp, #68	; 0x44
 800229e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bit = bit | reg;
 80022a2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	e581      	b.n	8001db0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xbc>
		bit = bit & ~reg;
 80022ac:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	e586      	b.n	8001dc4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>
		bit = bit | reg;
 80022b6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022ba:	f042 0202 	orr.w	r2, r2, #2
 80022be:	e5a3      	b.n	8001e08 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x114>
		bit = bit & ~reg;
 80022c0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022c4:	f022 0202 	bic.w	r2, r2, #2
 80022c8:	e5a8      	b.n	8001e1c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x128>
		bit = bit | reg;
 80022ca:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022ce:	f042 0204 	orr.w	r2, r2, #4
 80022d2:	e5c5      	b.n	8001e60 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x16c>
		bit = bit & ~reg;
 80022d4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022d8:	f022 0204 	bic.w	r2, r2, #4
 80022dc:	e5ca      	b.n	8001e74 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x180>
		bit = bit | reg;
 80022de:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022e2:	f042 0208 	orr.w	r2, r2, #8
 80022e6:	e5e9      	b.n	8001ebc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c8>
		bit = bit & ~reg;
 80022e8:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022ec:	f022 0208 	bic.w	r2, r2, #8
 80022f0:	e5ef      	b.n	8001ed2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1de>
		bit = bit | reg;
 80022f2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022f6:	f042 0210 	orr.w	r2, r2, #16
 80022fa:	e60e      	b.n	8001f1a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x226>
		bit = bit & ~reg;
 80022fc:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002300:	f022 0210 	bic.w	r2, r2, #16
 8002304:	e614      	b.n	8001f30 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x23c>
		bit = bit | reg;
 8002306:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800230a:	f042 0220 	orr.w	r2, r2, #32
 800230e:	e633      	b.n	8001f78 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x284>
		bit = bit & ~reg;
 8002310:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002314:	f022 0220 	bic.w	r2, r2, #32
 8002318:	e639      	b.n	8001f8e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x29a>
		bit = bit | reg;
 800231a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800231e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002322:	e658      	b.n	8001fd6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2e2>
		bit = bit & ~reg;
 8002324:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800232c:	e65e      	b.n	8001fec <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2f8>
		bit = bit | reg;
 800232e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002336:	e67d      	b.n	8002034 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x340>
		bit = bit & ~reg;
 8002338:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800233c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002340:	e683      	b.n	800204a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x356>
		bit = bit | reg;
 8002342:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234a:	e6a7      	b.n	800209c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
		bit = bit & ~reg;
 800234c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002354:	e6ad      	b.n	80020b2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3be>
		bit = bit | reg;
 8002356:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	e6cd      	b.n	80020fc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x408>
		bit = bit & ~reg;
 8002360:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002368:	e6d3      	b.n	8002112 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x41e>
		bit = bit | reg;
 800236a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800236e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002372:	e6f3      	b.n	800215c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x468>
		bit = bit & ~reg;
 8002374:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237c:	e6f9      	b.n	8002172 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x47e>
		bit = bit | reg;
 800237e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002386:	e719      	b.n	80021bc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4c8>
		bit = bit & ~reg;
 8002388:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800238c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002390:	e71f      	b.n	80021d2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4de>
		bit = bit | reg;
 8002392:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002396:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800239a:	e73f      	b.n	800221c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x528>
		bit = bit & ~reg;
 800239c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80023a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023a4:	e745      	b.n	8002232 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x53e>
		bit = bit | reg;
 80023a6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80023aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ae:	e762      	b.n	8002276 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x582>
		bit = bit & ~reg;
 80023b0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80023b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b8:	e767      	b.n	800228a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x596>
 80023ba:	bf00      	nop
 80023bc:	40006400 	.word	0x40006400
 80023c0:	40006000 	.word	0x40006000

080023c4 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_>:
				const auto&& expr = (n + end - begin) % n;
				return expr ? expr : n;
			}
		}

		constexpr void push(const Elem& x) noexcept override
 80023c4:	b530      	push	{r4, r5, lr}
		{
			if(end == n) end = begin;
 80023c6:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74

			buffer[end] = x;
 80023ca:	240b      	movs	r4, #11
			if(end == n) end = begin;
 80023cc:	2b0a      	cmp	r3, #10
 80023ce:	bf08      	it	eq
 80023d0:	6782      	streq	r2, [r0, #120]	; 0x78
			buffer[end] = x;
 80023d2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80023d4:	680d      	ldr	r5, [r1, #0]
			
			if(end == n - 1) end = 0;
 80023d6:	2b09      	cmp	r3, #9
			buffer[end] = x;
 80023d8:	fb04 0403 	mla	r4, r4, r3, r0
			if(end == n - 1) end = 0;
 80023dc:	bf08      	it	eq
 80023de:	2300      	moveq	r3, #0
			buffer[end] = x;
 80023e0:	6065      	str	r5, [r4, #4]
 80023e2:	684d      	ldr	r5, [r1, #4]
			else ++end;
 80023e4:	bf18      	it	ne
 80023e6:	3301      	addne	r3, #1
			buffer[end] = x;
 80023e8:	60a5      	str	r5, [r4, #8]
 80023ea:	890d      	ldrh	r5, [r1, #8]

			if(begin == end)
 80023ec:	429a      	cmp	r2, r3
			buffer[end] = x;
 80023ee:	81a5      	strh	r5, [r4, #12]
 80023f0:	7a89      	ldrb	r1, [r1, #10]
 80023f2:	73a1      	strb	r1, [r4, #14]
 80023f4:	6783      	str	r3, [r0, #120]	; 0x78
			if(begin == end)
 80023f6:	d105      	bne.n	8002404 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_+0x40>
			{
				if(begin == n - 1) begin = 0;
 80023f8:	2a09      	cmp	r2, #9
 80023fa:	bf0b      	itete	eq
 80023fc:	2300      	moveq	r3, #0
				else ++begin;
 80023fe:	3201      	addne	r2, #1
				if(begin == n - 1) begin = 0;
 8002400:	6743      	streq	r3, [r0, #116]	; 0x74
				else ++begin;
 8002402:	6742      	strne	r2, [r0, #116]	; 0x74
			}
		}
 8002404:	bd30      	pop	{r4, r5, pc}

08002406 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_>:
		constexpr void push(const Elem& x) noexcept override
 8002406:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n) end = begin;
 8002408:	e9d0 c379 	ldrd	ip, r3, [r0, #484]	; 0x1e4
			buffer[end] = x;
 800240c:	2418      	movs	r4, #24
			if(end == n) end = begin;
 800240e:	2b14      	cmp	r3, #20
 8002410:	bf08      	it	eq
 8002412:	f8c0 c1e8 	streq.w	ip, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 8002416:	460d      	mov	r5, r1
			buffer[end] = x;
 8002418:	f8d0 71e8 	ldr.w	r7, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 800241c:	4606      	mov	r6, r0
			if(end == n - 1) end = 0;
 800241e:	2f13      	cmp	r7, #19
			buffer[end] = x;
 8002420:	fb04 0407 	mla	r4, r4, r7, r0
 8002424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
			if(end == n - 1) end = 0;
 8002426:	bf08      	it	eq
 8002428:	2700      	moveq	r7, #0
			buffer[end] = x;
 800242a:	f104 0404 	add.w	r4, r4, #4
 800242e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			else ++end;
 8002430:	bf18      	it	ne
 8002432:	3701      	addne	r7, #1
			if(begin == end)
 8002434:	45bc      	cmp	ip, r7
			buffer[end] = x;
 8002436:	e895 0003 	ldmia.w	r5, {r0, r1}
 800243a:	e884 0003 	stmia.w	r4, {r0, r1}
 800243e:	f8c6 71e8 	str.w	r7, [r6, #488]	; 0x1e8
			if(begin == end)
 8002442:	d107      	bne.n	8002454 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_+0x4e>
				if(begin == n - 1) begin = 0;
 8002444:	f1bc 0f13 	cmp.w	ip, #19
 8002448:	bf0c      	ite	eq
 800244a:	2300      	moveq	r3, #0
				else ++begin;
 800244c:	f10c 0301 	addne.w	r3, ip, #1
 8002450:	f8c6 31e4 	str.w	r3, [r6, #484]	; 0x1e4
		}
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002456 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv>:
			if(end == n) return 0;
 8002456:	f8d0 31e8 	ldr.w	r3, [r0, #488]	; 0x1e8
 800245a:	2b14      	cmp	r3, #20
 800245c:	d00c      	beq.n	8002478 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv+0x22>
				const auto&& expr = (n + end - begin) % n;
 800245e:	f8d0 01e4 	ldr.w	r0, [r0, #484]	; 0x1e4
 8002462:	3314      	adds	r3, #20
 8002464:	1a18      	subs	r0, r3, r0
 8002466:	2314      	movs	r3, #20
 8002468:	fbb0 f2f3 	udiv	r2, r0, r3
 800246c:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 8002470:	2800      	cmp	r0, #0
 8002472:	bf08      	it	eq
 8002474:	4618      	moveq	r0, r3
 8002476:	4770      	bx	lr
			if(end == n) return 0;
 8002478:	2000      	movs	r0, #0
		}
 800247a:	4770      	bx	lr

0800247c <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE5clearEv>:
		}

		constexpr void clear() noexcept
		{
			begin = 0;
			end = n;
 800247c:	2200      	movs	r2, #0
 800247e:	2314      	movs	r3, #20
 8002480:	e9c0 2379 	strd	r2, r3, [r0, #484]	; 0x1e4
		}
 8002484:	4770      	bx	lr

08002486 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv>:
			if(end == n) return 0;
 8002486:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002488:	2b0a      	cmp	r3, #10
 800248a:	d00b      	beq.n	80024a4 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv+0x1e>
				const auto&& expr = (n + end - begin) % n;
 800248c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800248e:	330a      	adds	r3, #10
 8002490:	1a18      	subs	r0, r3, r0
 8002492:	230a      	movs	r3, #10
 8002494:	fbb0 f2f3 	udiv	r2, r0, r3
 8002498:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 800249c:	2800      	cmp	r0, #0
 800249e:	bf08      	it	eq
 80024a0:	4618      	moveq	r0, r3
 80024a2:	4770      	bx	lr
			if(end == n) return 0;
 80024a4:	2000      	movs	r0, #0
		}
 80024a6:	4770      	bx	lr

080024a8 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE5clearEv>:
			end = n;
 80024a8:	2200      	movs	r2, #0
 80024aa:	230a      	movs	r3, #10
 80024ac:	e9c0 231d 	strd	r2, r3, [r0, #116]	; 0x74
		}
 80024b0:	4770      	bx	lr

080024b2 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 80024b2:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 80024b4:	f8d1 e1e8 	ldr.w	lr, [r1, #488]	; 0x1e8
		constexpr std::optional<Elem> pop() noexcept
 80024b8:	4684      	mov	ip, r0
			if(end == n)
 80024ba:	f1be 0f14 	cmp.w	lr, #20
		constexpr std::optional<Elem> pop() noexcept
 80024be:	460e      	mov	r6, r1
 80024c0:	b087      	sub	sp, #28
			if(end == n)
 80024c2:	d105      	bne.n	80024d0 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x1e>
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 80024c4:	2300      	movs	r3, #0
		}
 80024c6:	4660      	mov	r0, ip

      template<typename... _Args>
	constexpr
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
	  _M_engaged(true)
 80024c8:	f88c 3018 	strb.w	r3, [ip, #24]
 80024cc:	b007      	add	sp, #28
 80024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 80024d0:	2418      	movs	r4, #24
 80024d2:	466d      	mov	r5, sp
 80024d4:	f8d1 71e4 	ldr.w	r7, [r1, #484]	; 0x1e4
			if(begin == n - 1) begin = 0;
 80024d8:	2f13      	cmp	r7, #19
			Elem ret = buffer[begin];
 80024da:	fb04 1407 	mla	r4, r4, r7, r1
			if(begin == n - 1) begin = 0;
 80024de:	bf08      	it	eq
 80024e0:	2700      	moveq	r7, #0
			Elem ret = buffer[begin];
 80024e2:	f104 0404 	add.w	r4, r4, #4
 80024e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ea:	e894 0003 	ldmia.w	r4, {r0, r1}
			else ++begin;
 80024ee:	bf18      	it	ne
 80024f0:	3701      	addne	r7, #1
			if(begin == end)
 80024f2:	45be      	cmp	lr, r7
			Elem ret = buffer[begin];
 80024f4:	e885 0003 	stmia.w	r5, {r0, r1}
				end = n;
 80024f8:	bf08      	it	eq
 80024fa:	2314      	moveq	r3, #20
	  constexpr _Storage() noexcept : _M_empty() { }

	  template<typename... _Args>
	    constexpr
	    _Storage(in_place_t, _Args&&... __args)
	    : _M_value(std::forward<_Args>(__args)...)
 80024fc:	4664      	mov	r4, ip
 80024fe:	466d      	mov	r5, sp
 8002500:	bf08      	it	eq
 8002502:	f8c6 31e8 	streq.w	r3, [r6, #488]	; 0x1e8
 8002506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800250a:	e895 0003 	ldmia.w	r5, {r0, r1}
	  _M_engaged(true)
 800250e:	2301      	movs	r3, #1
	    : _M_value(std::forward<_Args>(__args)...)
 8002510:	e884 0003 	stmia.w	r4, {r0, r1}
 8002514:	f8c6 71e4 	str.w	r7, [r6, #484]	; 0x1e4
 8002518:	e7d5      	b.n	80024c6 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x14>

0800251a <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 800251a:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 800251c:	6f8f      	ldr	r7, [r1, #120]	; 0x78
		constexpr std::optional<Elem> pop() noexcept
 800251e:	4603      	mov	r3, r0
			if(end == n)
 8002520:	2f0a      	cmp	r7, #10
		constexpr std::optional<Elem> pop() noexcept
 8002522:	460a      	mov	r2, r1
 8002524:	b085      	sub	sp, #20
			if(end == n)
 8002526:	d104      	bne.n	8002532 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x18>
      _Optional_payload_base() = default;
 8002528:	2200      	movs	r2, #0
		}
 800252a:	4618      	mov	r0, r3
	  _M_engaged(true)
 800252c:	72da      	strb	r2, [r3, #11]
 800252e:	b005      	add	sp, #20
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 8002532:	260b      	movs	r6, #11
 8002534:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8002536:	ad01      	add	r5, sp, #4
			if(begin == n - 1) begin = 0;
 8002538:	2c09      	cmp	r4, #9
			Elem ret = buffer[begin];
 800253a:	fb06 1604 	mla	r6, r6, r4, r1
			if(begin == n - 1) begin = 0;
 800253e:	bf08      	it	eq
 8002540:	2400      	moveq	r4, #0
			Elem ret = buffer[begin];
 8002542:	6870      	ldr	r0, [r6, #4]
 8002544:	68b1      	ldr	r1, [r6, #8]
			else ++begin;
 8002546:	bf18      	it	ne
 8002548:	3401      	addne	r4, #1
			Elem ret = buffer[begin];
 800254a:	c503      	stmia	r5!, {r0, r1}
 800254c:	7bb1      	ldrb	r1, [r6, #14]
			if(begin == end)
 800254e:	42a7      	cmp	r7, r4
			Elem ret = buffer[begin];
 8002550:	70a9      	strb	r1, [r5, #2]
				end = n;
 8002552:	bf08      	it	eq
 8002554:	210a      	moveq	r1, #10
			Elem ret = buffer[begin];
 8002556:	89b0      	ldrh	r0, [r6, #12]
				end = n;
 8002558:	bf08      	it	eq
 800255a:	6791      	streq	r1, [r2, #120]	; 0x78
			Elem ret = buffer[begin];
 800255c:	8028      	strh	r0, [r5, #0]
 800255e:	6754      	str	r4, [r2, #116]	; 0x74
	    : _M_value(std::forward<_Args>(__args)...)
 8002560:	aa01      	add	r2, sp, #4
 8002562:	ca03      	ldmia	r2!, {r0, r1}
 8002564:	6059      	str	r1, [r3, #4]
 8002566:	8811      	ldrh	r1, [r2, #0]
 8002568:	7892      	ldrb	r2, [r2, #2]
 800256a:	6018      	str	r0, [r3, #0]
 800256c:	729a      	strb	r2, [r3, #10]
 800256e:	8119      	strh	r1, [r3, #8]
	  _M_engaged(true)
 8002570:	2201      	movs	r2, #1
 8002572:	e7da      	b.n	800252a <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x10>

08002574 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE>:
	public:
		TxUnit(const u32 base_id) noexcept:
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
		{}

		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 8002574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			auto for_body_par_id = [this, &pillarbox]<std::underlying_type_t<OffsetIdsEnum> offset_id, std::underlying_type_t<OffsetIdsEnum> n>(CompileForIndex<offset_id, n>) noexcept
			{
				CompileForIndex<offset_id + 1, n> ret{};

				ret.is_breaked = std::get<offset_id>(tx_ids).transmit(pillarbox, this->base_id);
 8002578:	6885      	ldr	r5, [r0, #8]
		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 800257a:	460e      	mov	r6, r1
	{
		using Impl = TxIdImplInjectorAdaptor<offset_id>;
		SafeCircularQueue<MpuSpecific::TxFrame, Impl::queue_size()> queue{};

		// Mailboxが満杯になった(あるいはエラーが発生した)らfalse, そうでなければtrueを返す.
		bool transmit(MpuSpecific::Pillarbox& pillarbox, const u32 base_id) noexcept
 800257c:	ea5f 28d5 	movs.w	r8, r5, lsr #11
 8002580:	bf14      	ite	ne
 8002582:	2704      	movne	r7, #4
 8002584:	2700      	moveq	r7, #0
 8002586:	b08a      	sub	sp, #40	; 0x28
		{
			while(true)
			{
				if(pillarbox.not_full())
				{
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8002588:	f100 040c 	add.w	r4, r0, #12

		void post(const u32 id, TxFrame& frame) noexcept
		{
			CAN_TxHeaderTypeDef tx_header
			{
				.StdId = id & max_std_id,
 800258c:	f3c5 050a 	ubfx	r5, r5, #0, #11
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
		}

		bool not_full() const noexcept
		{
			return HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0;
 8002590:	6830      	ldr	r0, [r6, #0]
 8002592:	f001 fefe 	bl	8004392 <HAL_CAN_GetTxMailboxesFreeLevel>
				if(pillarbox.not_full())
 8002596:	b308      	cbz	r0, 80025dc <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8002598:	4621      	mov	r1, r4
 800259a:	a801      	add	r0, sp, #4
 800259c:	f7ff ffbd 	bl	800251a <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>
 80025a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80025a4:	b1d3      	cbz	r3, 80025dc <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 80025a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025aa:	6830      	ldr	r0, [r6, #0]
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2302      	movne	r3, #2
 80025b2:	2300      	moveq	r3, #0
			};
 80025b4:	9307      	str	r3, [sp, #28]
				.DLC = frame.header.dlc,
 80025b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025ba:	f10d 0207 	add.w	r2, sp, #7
				.DLC = frame.header.dlc,
 80025be:	9308      	str	r3, [sp, #32]
			};
 80025c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025c4:	a904      	add	r1, sp, #16
			};
 80025c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			u32 mailbox{};
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025ce:	466b      	mov	r3, sp
			};
 80025d0:	e9cd 5804 	strd	r5, r8, [sp, #16]
 80025d4:	9706      	str	r7, [sp, #24]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025d6:	f001 fe8e 	bl	80042f6 <HAL_CAN_AddTxMessage>
 80025da:	e7d9      	b.n	8002590 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x1c>
				return ret;
			};

			compile_for(for_body_par_id, CompileForIndex<static_cast<std::underlying_type_t<OffsetIdsEnum>>(0), to_underlying(OffsetIdsEnum::n)>{});
		}
 80025dc:	b00a      	add	sp, #40	; 0x28
 80025de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025e2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>:
    __insertion_sort(_RandomAccessIterator __first,
 80025e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025e4:	460e      	mov	r6, r1
 80025e6:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 80025e8:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 80025ea:	4604      	mov	r4, r0
 80025ec:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 80025f0:	d01d      	beq.n	800262e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80025f2:	1d05      	adds	r5, r0, #4
 80025f4:	42b5      	cmp	r5, r6
 80025f6:	d01a      	beq.n	800262e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
 80025f8:	682f      	ldr	r7, [r5, #0]
			}
		}

		void sort_tx_unit() noexcept
		{
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	68b9      	ldr	r1, [r7, #8]
	  if (__comp(__i, __first))
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4299      	cmp	r1, r3
 8002602:	d209      	bcs.n	8002618 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x36>
	  if (_Num)
 8002604:	42a5      	cmp	r5, r4
 8002606:	d004      	beq.n	8002612 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x30>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8002608:	4621      	mov	r1, r4
 800260a:	1b2a      	subs	r2, r5, r4
 800260c:	1d20      	adds	r0, r4, #4
 800260e:	f003 fdf1 	bl	80061f4 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 8002612:	6027      	str	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002614:	3504      	adds	r5, #4
 8002616:	e7ed      	b.n	80025f4 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x12>
	  if (__comp(__i, __first))
 8002618:	462b      	mov	r3, r5
 800261a:	f853 2c04 	ldr.w	r2, [r3, #-4]
      while (__comp(__val, __next))
 800261e:	6890      	ldr	r0, [r2, #8]
 8002620:	4281      	cmp	r1, r0
 8002622:	d202      	bcs.n	800262a <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x48>
	  *__last = _GLIBCXX_MOVE(*__next);
 8002624:	f843 2904 	str.w	r2, [r3], #-4
      while (__comp(__val, __next))
 8002628:	e7f7      	b.n	800261a <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800262a:	601f      	str	r7, [r3, #0]
    }
 800262c:	e7f2      	b.n	8002614 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x32>
    }
 800262e:	b003      	add	sp, #12
 8002630:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002632 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8002632:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8002634:	1e54      	subs	r4, r2, #1
 8002636:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800263a:	1066      	asrs	r6, r4, #1
		     __first + (__secondChild - 1)))
 800263c:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
      while (__secondChild < (__len - 1) / 2)
 8002640:	460c      	mov	r4, r1
 8002642:	42a6      	cmp	r6, r4
 8002644:	dd14      	ble.n	8002670 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x3e>
	  __secondChild = 2 * (__secondChild + 1);
 8002646:	1c65      	adds	r5, r4, #1
 8002648:	006f      	lsls	r7, r5, #1
		     __first + (__secondChild - 1)))
 800264a:	eb0c 0545 	add.w	r5, ip, r5, lsl #1
 800264e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	  if (__comp(__first + __secondChild,
 8002652:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002656:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 800265a:	68ad      	ldr	r5, [r5, #8]
 800265c:	45ae      	cmp	lr, r5
	    __secondChild--;
 800265e:	bf88      	it	hi
 8002660:	f107 37ff 	addhi.w	r7, r7, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8002664:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8002668:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	  __holeIndex = __secondChild;
 800266c:	463c      	mov	r4, r7
      while (__secondChild < (__len - 1) / 2)
 800266e:	e7e8      	b.n	8002642 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x10>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8002670:	07d5      	lsls	r5, r2, #31
 8002672:	d40e      	bmi.n	8002692 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
 8002674:	3a02      	subs	r2, #2
 8002676:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800267a:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 800267e:	d108      	bne.n	8002692 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
	  __secondChild = 2 * (__secondChild + 1);
 8002680:	1c62      	adds	r2, r4, #1
 8002682:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8002684:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002688:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800268c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
	  __holeIndex = __secondChild - 1;
 8002690:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8002692:	1e62      	subs	r2, r4, #1
 8002694:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002698:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800269a:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800269c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80026a0:	eb00 0584 	add.w	r5, r0, r4, lsl #2
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80026a4:	da0d      	bge.n	80026c2 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
 80026a6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80026aa:	689e      	ldr	r6, [r3, #8]
 80026ac:	68a7      	ldr	r7, [r4, #8]
 80026ae:	42b7      	cmp	r7, r6
 80026b0:	d207      	bcs.n	80026c2 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80026b2:	f840 400c 	str.w	r4, [r0, ip]
	  __parent = (__holeIndex - 1) / 2;
 80026b6:	1e54      	subs	r4, r2, #1
 80026b8:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80026bc:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80026be:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80026c0:	e7eb      	b.n	800269a <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x68>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80026c2:	602b      	str	r3, [r5, #0]
    }
 80026c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026c6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80026c6:	b082      	sub	sp, #8
 80026c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026cc:	4604      	mov	r4, r0
 80026ce:	460d      	mov	r5, r1
 80026d0:	4616      	mov	r6, r2
 80026d2:	b087      	sub	sp, #28
 80026d4:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80026d6:	1d07      	adds	r7, r0, #4
      while (__last - __first > int(_S_threshold))
 80026d8:	1b2b      	subs	r3, r5, r4
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	dd2c      	ble.n	8002738 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x72>
      const _DistanceType __len = __last - __first;
 80026de:	ea4f 08a3 	mov.w	r8, r3, asr #2
	  if (__depth_limit == 0)
 80026e2:	bb76      	cbnz	r6, 8002742 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x7c>
 80026e4:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	f10d 0910 	add.w	r9, sp, #16
 80026ee:	e887 0003 	stmia.w	r7, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 80026f2:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 80026f6:	f1a8 0602 	sub.w	r6, r8, #2
 80026fa:	1076      	asrs	r6, r6, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80026fc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8002700:	4642      	mov	r2, r8
 8002702:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002706:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 800270a:	4631      	mov	r1, r6
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff ff90 	bl	8002632 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
	  if (__parent == 0)
 8002712:	b10e      	cbz	r6, 8002718 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
	  __parent--;
 8002714:	3e01      	subs	r6, #1
      while (true)
 8002716:	e7f1      	b.n	80026fc <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x36>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8002718:	f855 3d04 	ldr.w	r3, [r5, #-4]!
      *__result = _GLIBCXX_MOVE(*__first);
 800271c:	6822      	ldr	r2, [r4, #0]
			 _DistanceType(__last - __first),
 800271e:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8002720:	e897 0003 	ldmia.w	r7, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8002724:	602a      	str	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8002726:	e88d 0003 	stmia.w	sp, {r0, r1}
 800272a:	10b2      	asrs	r2, r6, #2
 800272c:	2100      	movs	r1, #0
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff ff7f 	bl	8002632 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
      while (__last - __first > 1)
 8002734:	2e04      	cmp	r6, #4
 8002736:	dcef      	bgt.n	8002718 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
    }
 8002738:	b007      	add	sp, #28
 800273a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800273e:	b002      	add	sp, #8
 8002740:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002742:	10db      	asrs	r3, r3, #3
 8002744:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002748:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800274c:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8002750:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002754:	f855 cc04 	ldr.w	ip, [r5, #-4]
      if (__comp(__a, __b))
 8002758:	45f1      	cmp	r9, lr
 800275a:	f8dc 1008 	ldr.w	r1, [ip, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800275e:	6822      	ldr	r2, [r4, #0]
	  --__depth_limit;
 8002760:	f106 36ff 	add.w	r6, r6, #4294967295
      if (__comp(__a, __b))
 8002764:	d22a      	bcs.n	80027bc <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xf6>
	  if (__comp(__b, __c))
 8002766:	458e      	cmp	lr, r1
 8002768:	d221      	bcs.n	80027ae <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xe8>
      __a = _GLIBCXX_MOVE(__b);
 800276a:	6020      	str	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800276c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8002770:	463a      	mov	r2, r7
      while (__last - __first > int(_S_threshold))
 8002772:	462b      	mov	r3, r5
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	4690      	mov	r8, r2
 8002778:	f852 1b04 	ldr.w	r1, [r2], #4
 800277c:	f8d0 9008 	ldr.w	r9, [r0, #8]
	  while (__comp(__first, __pivot))
 8002780:	6888      	ldr	r0, [r1, #8]
 8002782:	4548      	cmp	r0, r9
 8002784:	d3f6      	bcc.n	8002774 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>
	  --__last;
 8002786:	1f18      	subs	r0, r3, #4
 8002788:	4603      	mov	r3, r0
 800278a:	f850 e904 	ldr.w	lr, [r0], #-4
	  while (__comp(__pivot, __last))
 800278e:	f8de c008 	ldr.w	ip, [lr, #8]
 8002792:	45e1      	cmp	r9, ip
 8002794:	d3f8      	bcc.n	8002788 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xc2>
	  if (!(__first < __last))
 8002796:	4598      	cmp	r8, r3
 8002798:	d318      	bcc.n	80027cc <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x106>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800279a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800279c:	4629      	mov	r1, r5
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4632      	mov	r2, r6
 80027a2:	4640      	mov	r0, r8
 80027a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027a6:	f7ff ff8e 	bl	80026c6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      while (__last - __first > int(_S_threshold))
 80027aa:	4645      	mov	r5, r8
 80027ac:	e794      	b.n	80026d8 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x12>
	  else if (__comp(__a, __c))
 80027ae:	4589      	cmp	r9, r1
 80027b0:	d206      	bcs.n	80027c0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 80027b2:	f8c4 c000 	str.w	ip, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 80027b6:	f845 2c04 	str.w	r2, [r5, #-4]
    }
 80027ba:	e7d9      	b.n	8002770 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__a, __c))
 80027bc:	4589      	cmp	r9, r1
 80027be:	d202      	bcs.n	80027c6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x100>
 80027c0:	e9c4 8200 	strd	r8, r2, [r4]
 80027c4:	e7d4      	b.n	8002770 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__b, __c))
 80027c6:	458e      	cmp	lr, r1
 80027c8:	d2cf      	bcs.n	800276a <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xa4>
 80027ca:	e7f2      	b.n	80027b2 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xec>
      __a = _GLIBCXX_MOVE(__b);
 80027cc:	f842 ec04 	str.w	lr, [r2, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
 80027d0:	6019      	str	r1, [r3, #0]
	  while (__comp(__first, __pivot))
 80027d2:	e7cf      	b.n	8002774 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>

080027d4 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>:
		u32 base_id;

	public:
		UnitBase(const u32 id_num, const u32 base_id) noexcept:
			id_num{id_num},
			base_id{base_id}
 80027d4:	2301      	movs	r3, #1
		Transmitter(const std::same_as<u32> auto ... args) noexcept:
 80027d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027da:	4604      	mov	r4, r0
 80027dc:	e9c0 3101 	strd	r3, r1, [r0, #4]
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
 80027e0:	4b2e      	ldr	r3, [pc, #184]	; (800289c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xc8>)
 80027e2:	b089      	sub	sp, #36	; 0x24

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80027e4:	227c      	movs	r2, #124	; 0x7c
 80027e6:	2100      	movs	r1, #0
 80027e8:	f840 3b0c 	str.w	r3, [r0], #12
 80027ec:	f003 fd1c 	bl	8006228 <memset>
	class SafeCircularQueue final : SafeCircularQueueEraseN<Elem>
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xcc>)
 80027f2:	226e      	movs	r2, #110	; 0x6e
 80027f4:	2100      	movs	r1, #0
 80027f6:	60e3      	str	r3, [r4, #12]
 80027f8:	f104 0010 	add.w	r0, r4, #16
 80027fc:	f003 fd14 	bl	8006228 <memset>
 8002800:	230a      	movs	r3, #10
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 8002802:	f104 0688 	add.w	r6, r4, #136	; 0x88
      { return iterator(data() + _Nm); }
 8002806:	f104 078c 	add.w	r7, r4, #140	; 0x8c
				std::__lg(__last - __first) * 2,
 800280a:	eba7 0806 	sub.w	r8, r7, r6
 800280e:	ea4f 02a8 	mov.w	r2, r8, asr #2
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8002812:	fab2 f282 	clz	r2, r2
			tx_units{args ...}
 8002816:	e9c4 3421 	strd	r3, r4, [r4, #132]	; 0x84
 800281a:	2300      	movs	r3, #0
	  std::__introsort_loop(__first, __last,
 800281c:	ad03      	add	r5, sp, #12
 800281e:	f10d 0908 	add.w	r9, sp, #8
 8002822:	f1c2 021f 	rsb	r2, r2, #31
 8002826:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
      end() noexcept
 800282a:	f88d 300c 	strb.w	r3, [sp, #12]
 800282e:	f88d 3008 	strb.w	r3, [sp, #8]
 8002832:	4639      	mov	r1, r7
 8002834:	462b      	mov	r3, r5
 8002836:	4630      	mov	r0, r6
 8002838:	f8cd 9000 	str.w	r9, [sp]
 800283c:	0052      	lsls	r2, r2, #1
 800283e:	9504      	str	r5, [sp, #16]
 8002840:	f8cd 9014 	str.w	r9, [sp, #20]
 8002844:	f7ff ff3f 	bl	80026c6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      if (__last - __first > int(_S_threshold))
 8002848:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 800284c:	e9cd 5906 	strd	r5, r9, [sp, #24]
    __final_insertion_sort(_RandomAccessIterator __first,
 8002850:	ab06      	add	r3, sp, #24
      if (__last - __first > int(_S_threshold))
 8002852:	dd16      	ble.n	8002882 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xae>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8002854:	cb0c      	ldmia	r3, {r2, r3}
 8002856:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 800285a:	4629      	mov	r1, r5
 800285c:	4630      	mov	r0, r6
 800285e:	f7ff fec0 	bl	80025e2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002862:	42bd      	cmp	r5, r7
 8002864:	d012      	beq.n	800288c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xb8>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8002866:	462b      	mov	r3, r5
	__val = _GLIBCXX_MOVE(*__last);
 8002868:	682a      	ldr	r2, [r5, #0]
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 800286a:	6890      	ldr	r0, [r2, #8]
 800286c:	f853 1c04 	ldr.w	r1, [r3, #-4]
      while (__comp(__val, __next))
 8002870:	688e      	ldr	r6, [r1, #8]
 8002872:	42b0      	cmp	r0, r6
 8002874:	d202      	bcs.n	800287c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xa8>
	  *__last = _GLIBCXX_MOVE(*__next);
 8002876:	f843 1904 	str.w	r1, [r3], #-4
      while (__comp(__val, __next))
 800287a:	e7f7      	b.n	800286c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x98>
      *__last = _GLIBCXX_MOVE(__val);
 800287c:	601a      	str	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800287e:	3504      	adds	r5, #4
 8002880:	e7ef      	b.n	8002862 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x8e>
	std::__insertion_sort(__first, __last, __comp);
 8002882:	4639      	mov	r1, r7
 8002884:	cb0c      	ldmia	r3, {r2, r3}
 8002886:	4630      	mov	r0, r6
 8002888:	f7ff feab 	bl	80025e2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
			is_id_sorted = true;
 800288c:	2301      	movs	r3, #1
		}
 800288e:	4620      	mov	r0, r4
			is_id_sorted = true;
 8002890:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		}
 8002894:	b009      	add	sp, #36	; 0x24
 8002896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800289a:	bf00      	nop
 800289c:	080066e0 	.word	0x080066e0
 80028a0:	080066c8 	.word	0x080066c8

080028a4 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE>:

}

namespace Chibarobo2022
{
	inline CRSLib::Can::Transmitter<Chibarobo2022::SampleTx> transmitter{(u32)0x100};
 80028a4:	4a15      	ldr	r2, [pc, #84]	; (80028fc <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x58>)
			transmitter.transmit(can_manager.pillarbox);
			
			executor.run_once();
		}
	}
}
 80028a6:	b510      	push	{r4, lr}
 80028a8:	6813      	ldr	r3, [r2, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	d104      	bne.n	80028bc <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x18>
 80028b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b6:	4812      	ldr	r0, [pc, #72]	; (8002900 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x5c>)
 80028b8:	f7ff ff8c 	bl	80027d4 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>
	};
}

namespace Chibarobo2022
{
	inline CRSLib::Can::Receiver<Chibarobo2022::SampleRx> receiver{(u32)0x101};
 80028bc:	4a11      	ldr	r2, [pc, #68]	; (8002904 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x60>)
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	d117      	bne.n	80028f8 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x54>
 80028c8:	4c0f      	ldr	r4, [pc, #60]	; (8002908 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x64>)
 80028ca:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 80028ce:	6023      	str	r3, [r4, #0]
 80028d0:	f240 1301 	movw	r3, #257	; 0x101
 80028d4:	2100      	movs	r1, #0
 80028d6:	f104 0008 	add.w	r0, r4, #8
 80028da:	6063      	str	r3, [r4, #4]
 80028dc:	f003 fca4 	bl	8006228 <memset>
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x68>)
 80028e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028e6:	2100      	movs	r1, #0
 80028e8:	f104 000c 	add.w	r0, r4, #12
 80028ec:	60a3      	str	r3, [r4, #8]
 80028ee:	f003 fc9b 	bl	8006228 <memset>
 80028f2:	2314      	movs	r3, #20
 80028f4:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 80028f8:	bd10      	pop	{r4, pc}
 80028fa:	bf00      	nop
 80028fc:	2000009c 	.word	0x2000009c
 8002900:	20000294 	.word	0x20000294
 8002904:	20000098 	.word	0x20000098
 8002908:	200000a0 	.word	0x200000a0
 800290c:	080066ec 	.word	0x080066ec

08002910 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE9_M_invokeERKSt9_Any_dataOS0_Om>:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 8002910:	2000      	movs	r0, #0
 8002912:	4770      	bx	lr

08002914 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 8002914:	b11a      	cbz	r2, 800291e <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 8002916:	2a01      	cmp	r2, #1
 8002918:	d004      	beq.n	8002924 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
      }
 800291a:	2000      	movs	r0, #0
 800291c:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800291e:	4b02      	ldr	r3, [pc, #8]	; (8002928 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>)
 8002920:	6003      	str	r3, [r0, #0]
	    break;
 8002922:	e7fa      	b.n	800291a <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002924:	6001      	str	r1, [r0, #0]
	    break;
 8002926:	e7f8      	b.n	800291a <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
 8002928:	08006748 	.word	0x08006748

0800292c <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>:
namespace stepping_md {
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController::rx_frames;

	std::list<CanController*> CanController::pInstances;

	CanController::CanController(CanManager& can_manager, Parameters& params, uint32_t offset_from_bid): can_manager(can_manager), params(params), offset_from_bid(offset_from_bid){
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	6001      	str	r1, [r0, #0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x40>)
 8002932:	4604      	mov	r4, r0
 8002934:	6101      	str	r1, [r0, #16]
	    _M_manager = &_My_handler::_M_manager;
 8002936:	490e      	ldr	r1, [pc, #56]	; (8002970 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x44>)
 8002938:	e9c0 2305 	strd	r2, r3, [r0, #20]
 800293c:	60c1      	str	r1, [r0, #12]
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800293e:	200c      	movs	r0, #12
 8002940:	f003 f889 	bl	8005a56 <_Znwj>
 8002944:	e007      	b.n	8002956 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x2a>
      if (_M_manager)
 8002946:	68e3      	ldr	r3, [r4, #12]
    class function<_Res(_ArgTypes...)>
 8002948:	1d21      	adds	r1, r4, #4
      if (_M_manager)
 800294a:	b113      	cbz	r3, 8002952 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x26>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800294c:	2203      	movs	r2, #3
 800294e:	4608      	mov	r0, r1
 8002950:	4798      	blx	r3
 8002952:	f002 fd27 	bl	80053a4 <__cxa_end_cleanup>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8002956:	4d07      	ldr	r5, [pc, #28]	; (8002974 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x48>)
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002958:	6084      	str	r4, [r0, #8]
 800295a:	4629      	mov	r1, r5
 800295c:	f003 fb5c 	bl	8006018 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002960:	68ab      	ldr	r3, [r5, #8]
		CanController::pInstances.push_back(this);
	}
 8002962:	4620      	mov	r0, r4
 8002964:	3301      	adds	r3, #1
 8002966:	60ab      	str	r3, [r5, #8]
 8002968:	bd38      	pop	{r3, r4, r5, pc}
 800296a:	bf00      	nop
 800296c:	08002911 	.word	0x08002911
 8002970:	08002915 	.word	0x08002915
 8002974:	20000324 	.word	0x20000324

08002978 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800297c:	6843      	ldr	r3, [r0, #4]
 800297e:	f8d0 8000 	ldr.w	r8, [r0]
 8002982:	4c41      	ldr	r4, [pc, #260]	; (8002a88 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x110>)
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	eba3 0308 	sub.w	r3, r3, r8
 800298a:	10db      	asrs	r3, r3, #3
 800298c:	4363      	muls	r3, r4
 800298e:	4692      	mov	sl, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8002990:	4a3e      	ldr	r2, [pc, #248]	; (8002a8c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 8002992:	4607      	mov	r7, r0
 8002994:	4293      	cmp	r3, r2
 8002996:	4689      	mov	r9, r1
 8002998:	d102      	bne.n	80029a0 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
 800299a:	483d      	ldr	r0, [pc, #244]	; (8002a90 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x118>)
 800299c:	f003 fb43 	bl	8006026 <_ZSt20__throw_length_errorPKc>
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	461c      	mov	r4, r3
 80029a4:	bf38      	it	cc
 80029a6:	2401      	movcc	r4, #1
 80029a8:	18e4      	adds	r4, r4, r3
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80029aa:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80029ae:	d23b      	bcs.n	8002a28 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80029b0:	b3e4      	cbz	r4, 8002a2c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb4>
 80029b2:	4294      	cmp	r4, r2
 80029b4:	bf28      	it	cs
 80029b6:	4614      	movcs	r4, r2
 80029b8:	2018      	movs	r0, #24
 80029ba:	4360      	muls	r0, r4
 80029bc:	f003 f84b 	bl	8005a56 <_Znwj>
 80029c0:	4606      	mov	r6, r0
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80029c2:	46d4      	mov	ip, sl
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
 80029c4:	46b3      	mov	fp, r6
 80029c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80029ca:	46c2      	mov	sl, r8
 80029cc:	eb06 0e05 	add.w	lr, r6, r5
 80029d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80029d4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80029d8:	e88e 0003 	stmia.w	lr, {r0, r1}
      for (; __first != __last; ++__first, (void)++__cur)
 80029dc:	45d1      	cmp	r9, sl
 80029de:	f10b 0b18 	add.w	fp, fp, #24
 80029e2:	d125      	bne.n	8002a30 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb8>
 80029e4:	2318      	movs	r3, #24
 80029e6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002a94 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x11c>
 80029ea:	08ed      	lsrs	r5, r5, #3
 80029ec:	fb0a f505 	mul.w	r5, sl, r5
 80029f0:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 80029f4:	fb03 8b05 	mla	fp, r3, r5, r8
 80029f8:	fb05 3303 	mla	r3, r5, r3, r3
 80029fc:	18f3      	adds	r3, r6, r3
 80029fe:	4699      	mov	r9, r3
 8002a00:	465d      	mov	r5, fp
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	9b01      	ldr	r3, [sp, #4]
 8002a06:	f109 0918 	add.w	r9, r9, #24
 8002a0a:	429d      	cmp	r5, r3
 8002a0c:	d01e      	beq.n	8002a4c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xd4>
 8002a0e:	46ae      	mov	lr, r5
 8002a10:	f1a9 0c18 	sub.w	ip, r9, #24
 8002a14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002a18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002a1c:	3518      	adds	r5, #24
 8002a1e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8002a22:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002a26:	e7ed      	b.n	8002a04 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x8c>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002a28:	4614      	mov	r4, r2
 8002a2a:	e7c5      	b.n	80029b8 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002a2c:	4626      	mov	r6, r4
 8002a2e:	e7c8      	b.n	80029c2 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4a>
 8002a30:	46d6      	mov	lr, sl
 8002a32:	f1ab 0c18 	sub.w	ip, fp, #24
 8002a36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002a3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002a3e:	f10a 0a18 	add.w	sl, sl, #24
 8002a42:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8002a46:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002a4a:	e7c7      	b.n	80029dc <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x64>
 8002a4c:	eba5 050b 	sub.w	r5, r5, fp
 8002a50:	08ed      	lsrs	r5, r5, #3
 8002a52:	fb0a fa05 	mul.w	sl, sl, r5
 8002a56:	2518      	movs	r5, #24
 8002a58:	9b00      	ldr	r3, [sp, #0]
 8002a5a:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
 8002a5e:	fb05 350a 	mla	r5, r5, sl, r3
	if (__p)
 8002a62:	f1b8 0f00 	cmp.w	r8, #0
 8002a66:	d005      	beq.n	8002a74 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xfc>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8002a68:	68b9      	ldr	r1, [r7, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	eba1 0108 	sub.w	r1, r1, r8
 8002a70:	f002 fc96 	bl	80053a0 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002a74:	2018      	movs	r0, #24
 8002a76:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
 8002a7a:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002a7e:	60bc      	str	r4, [r7, #8]
    }
 8002a80:	b003      	add	sp, #12
 8002a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a86:	bf00      	nop
 8002a88:	aaaaaaab 	.word	0xaaaaaaab
 8002a8c:	05555555 	.word	0x05555555
 8002a90:	080066fc 	.word	0x080066fc
 8002a94:	0aaaaaab 	.word	0x0aaaaaab

08002a98 <_ZN11stepping_md13CanController6updateEv>:

		can_manager.pillarbox.post(params.get_BID() + offset_from_bid, tx_frame);
	}
	*/

	void CanController::update(void){
 8002a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if(!can_manager.letterbox0.empty()){
 8002a9c:	6803      	ldr	r3, [r0, #0]
	void CanController::update(void){
 8002a9e:	4605      	mov	r5, r0
			};
		}

		bool empty() const noexcept
		{
			return HAL_CAN_GetRxFifoFillLevel(hcan, to_underlying(fifo_index)) == 0;
 8002aa0:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8002aa4:	b090      	sub	sp, #64	; 0x40
 8002aa6:	f001 fcff 	bl	80044a8 <HAL_CAN_GetRxFifoFillLevel>
 8002aaa:	4e3a      	ldr	r6, [pc, #232]	; (8002b94 <_ZN11stepping_md13CanController6updateEv+0xfc>)
		if(!can_manager.letterbox0.empty()){
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d034      	beq.n	8002b1a <_ZN11stepping_md13CanController6updateEv+0x82>
			RxFrame rx_frame;
 8002ab0:	2218      	movs	r2, #24
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	a802      	add	r0, sp, #8
 8002ab6:	f003 fbb7 	bl	8006228 <memset>
			can_manager.letterbox0.receive(rx_frame);
 8002aba:	682c      	ldr	r4, [r5, #0]
			CAN_RxHeaderTypeDef rx_header{};
 8002abc:	221c      	movs	r2, #28
 8002abe:	2100      	movs	r1, #0
 8002ac0:	a808      	add	r0, sp, #32
 8002ac2:	f003 fbb1 	bl	8006228 <memset>
			HAL_CAN_GetRxMessage(hcan, to_underlying(fifo_index), &rx_header, frame.data.data());
 8002ac6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8002aca:	ab06      	add	r3, sp, #24
 8002acc:	aa08      	add	r2, sp, #32
 8002ace:	f001 fc74 	bl	80043ba <HAL_CAN_GetRxMessage>
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 8002ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			frame.header =
 8002ad4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 8002ad8:	1e9a      	subs	r2, r3, #2
 8002ada:	4253      	negs	r3, r2
 8002adc:	4153      	adcs	r3, r2
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
 8002ade:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
 8002ae2:	ea42 22c0 	orr.w	r2, r2, r0, lsl #11
			frame.header =
 8002ae6:	9202      	str	r2, [sp, #8]
 8002ae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002aea:	f88d 3015 	strb.w	r3, [sp, #21]
 8002aee:	9203      	str	r2, [sp, #12]
 8002af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002af2:	e9d6 c301 	ldrd	ip, r3, [r6, #4]
 8002af6:	459c      	cmp	ip, r3
 8002af8:	9204      	str	r2, [sp, #16]
 8002afa:	f88d 1014 	strb.w	r1, [sp, #20]
 8002afe:	d025      	beq.n	8002b4c <_ZN11stepping_md13CanController6updateEv+0xb4>
 8002b00:	4664      	mov	r4, ip
 8002b02:	af02      	add	r7, sp, #8
 8002b04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b08:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002b0c:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
 8002b10:	f10c 0318 	add.w	r3, ip, #24
 8002b14:	6073      	str	r3, [r6, #4]
			rx_frames.push_back(rx_frame);
			led_mgr::blink_can_led();
 8002b16:	f000 fa91 	bl	800303c <_ZN11stepping_md7led_mgr13blink_can_ledEv>
      : _M_current(__i) { }
 8002b1a:	6834      	ldr	r4, [r6, #0]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002b1c:	1d2f      	adds	r7, r5, #4
		}

		auto ite = rx_frames.begin();
		while(ite != rx_frames.end()){
 8002b1e:	6873      	ldr	r3, [r6, #4]
 8002b20:	429c      	cmp	r4, r3
 8002b22:	d034      	beq.n	8002b8e <_ZN11stepping_md13CanController6updateEv+0xf6>
			if(ite->header.get_id() == (params.get_BID() + offset_from_bid)){
 8002b24:	6968      	ldr	r0, [r5, #20]
			return id;
 8002b26:	f8d4 8000 	ldr.w	r8, [r4]
 8002b2a:	f000 f9bb 	bl	8002ea4 <_ZN11stepping_md10Parameters7get_BIDEv>
 8002b2e:	69ab      	ldr	r3, [r5, #24]
 8002b30:	4418      	add	r0, r3
 8002b32:	4540      	cmp	r0, r8
 8002b34:	d129      	bne.n	8002b8a <_ZN11stepping_md13CanController6updateEv+0xf2>
 8002b36:	aa08      	add	r2, sp, #32
 8002b38:	4611      	mov	r1, r2
				alignas(8) unsigned char tmp[CRSLib::Can::can_mtu];
				for(unsigned i = 0; i < ite->header.dlc; i++){
 8002b3a:	7b23      	ldrb	r3, [r4, #12]
 8002b3c:	4423      	add	r3, r4
 8002b3e:	42a3      	cmp	r3, r4
 8002b40:	d00a      	beq.n	8002b58 <_ZN11stepping_md13CanController6updateEv+0xc0>
					tmp[i] = ite->data[ite->header.dlc - (i + 1)];
 8002b42:	7bd8      	ldrb	r0, [r3, #15]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	f802 0b01 	strb.w	r0, [r2], #1
				for(unsigned i = 0; i < ite->header.dlc; i++){
 8002b4a:	e7f8      	b.n	8002b3e <_ZN11stepping_md13CanController6updateEv+0xa6>
	  _M_realloc_insert(end(), __x);
 8002b4c:	4661      	mov	r1, ip
 8002b4e:	4630      	mov	r0, r6
 8002b50:	aa02      	add	r2, sp, #8
 8002b52:	f7ff ff11 	bl	8002978 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
 8002b56:	e7de      	b.n	8002b16 <_ZN11stepping_md13CanController6updateEv+0x7e>
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e9cd 1301 	strd	r1, r3, [sp, #4]
      if (_M_empty())
 8002b5e:	68eb      	ldr	r3, [r5, #12]
 8002b60:	b90b      	cbnz	r3, 8002b66 <_ZN11stepping_md13CanController6updateEv+0xce>
	__throw_bad_function_call();
 8002b62:	f003 fa63 	bl	800602c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002b66:	aa02      	add	r2, sp, #8
 8002b68:	a901      	add	r1, sp, #4
 8002b6a:	4638      	mov	r0, r7
 8002b6c:	692b      	ldr	r3, [r5, #16]
 8002b6e:	4798      	blx	r3
 8002b70:	6872      	ldr	r2, [r6, #4]
      { return __normal_iterator(_M_current + __n); }
 8002b72:	f104 0118 	add.w	r1, r4, #24
      if (__position + 1 != end())
 8002b76:	4291      	cmp	r1, r2
 8002b78:	d003      	beq.n	8002b82 <_ZN11stepping_md13CanController6updateEv+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	1a52      	subs	r2, r2, r1
 8002b7e:	f003 fb39 	bl	80061f4 <memmove>
      --this->_M_impl._M_finish;
 8002b82:	6873      	ldr	r3, [r6, #4]
 8002b84:	3b18      	subs	r3, #24
 8002b86:	6073      	str	r3, [r6, #4]
				}
				callback(tmp, ite->header.get_id());
				ite = rx_frames.erase(ite);
				continue;
 8002b88:	e7c9      	b.n	8002b1e <_ZN11stepping_md13CanController6updateEv+0x86>
      { return __normal_iterator(_M_current++); }
 8002b8a:	3418      	adds	r4, #24
 8002b8c:	e7c7      	b.n	8002b1e <_ZN11stepping_md13CanController6updateEv+0x86>
			}
			ite++;
		}
	}
 8002b8e:	b010      	add	sp, #64	; 0x40
 8002b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b94:	20000330 	.word	0x20000330

08002b98 <_ZN11stepping_md13CanController14trigger_updateEv>:
			ite++;
		}
	}
	*/

	void CanController::trigger_update(void){
 8002b98:	b538      	push	{r3, r4, r5, lr}
      { return iterator(this->_M_impl._M_node._M_next); }
 8002b9a:	4d05      	ldr	r5, [pc, #20]	; (8002bb0 <_ZN11stepping_md13CanController14trigger_updateEv+0x18>)
 8002b9c:	682c      	ldr	r4, [r5, #0]
		for(CanController* pController : pInstances){
 8002b9e:	42ac      	cmp	r4, r5
 8002ba0:	d004      	beq.n	8002bac <_ZN11stepping_md13CanController14trigger_updateEv+0x14>
			pController->update();
 8002ba2:	68a0      	ldr	r0, [r4, #8]
 8002ba4:	f7ff ff78 	bl	8002a98 <_ZN11stepping_md13CanController6updateEv>
	_M_node = _M_node->_M_next;
 8002ba8:	6824      	ldr	r4, [r4, #0]
	return *this;
 8002baa:	e7f8      	b.n	8002b9e <_ZN11stepping_md13CanController14trigger_updateEv+0x6>
		}
	}
 8002bac:	bd38      	pop	{r3, r4, r5, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000324 	.word	0x20000324

08002bb4 <_GLOBAL__sub_I__ZN11stepping_md13CanController9rx_framesE>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <_GLOBAL__sub_I__ZN11stepping_md13CanController9rx_framesE+0x14>)
 8002bb8:	e9c3 2200 	strd	r2, r2, [r3]
 8002bbc:	609a      	str	r2, [r3, #8]
	this->_M_next = this->_M_prev = this;
 8002bbe:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <_GLOBAL__sub_I__ZN11stepping_md13CanController9rx_framesE+0x18>)
 8002bc0:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8002bc4:	609a      	str	r2, [r3, #8]
}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000330 	.word	0x20000330
 8002bcc:	20000324 	.word	0x20000324

08002bd0 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002bd2:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x2c>)
 8002bd4:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 8002bd6:	42a0      	cmp	r0, r4
 8002bd8:	d005      	beq.n	8002be6 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x16>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8002bda:	6805      	ldr	r5, [r0, #0]
 8002bdc:	210c      	movs	r1, #12
 8002bde:	f002 fbdf 	bl	80053a0 <_ZdlPvj>
 8002be2:	4628      	mov	r0, r5
 8002be4:	e7f7      	b.n	8002bd6 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x6>
	_M_deallocate(_M_impl._M_start,
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x30>)
 8002be8:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8002bea:	b128      	cbz	r0, 8002bf8 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bf2:	1a09      	subs	r1, r1, r0
 8002bf4:	f002 bbd4 	b.w	80053a0 <_ZdlPvj>
 8002bf8:	bd38      	pop	{r3, r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000324 	.word	0x20000324
 8002c00:	20000330 	.word	0x20000330

08002c04 <_ZN11stepping_md15MotorController15update_positionEv>:

namespace stepping_md
{
	std::list<MotorController*> MotorController::pInstances;

    void MotorController::update_position(){
 8002c04:	b538      	push	{r3, r4, r5, lr}
 8002c06:	4604      	mov	r4, r0
        //現在の位置を更新する
        //開始時間から計算する
        int time_diff = HAL_GetTick() - start_time;//ms
 8002c08:	f001 fac6 	bl	8004198 <HAL_GetTick>
 8002c0c:	6a25      	ldr	r5, [r4, #32]
 8002c0e:	1b45      	subs	r5, r0, r5
        start_time = HAL_GetTick();
 8002c10:	f001 fac2 	bl	8004198 <HAL_GetTick>
 8002c14:	6220      	str	r0, [r4, #32]
        constexpr float rpm_to_rad_per_ms = 2.0f * std::numbers::pi / 60000.0f;
        positon +=direction * time_diff * current_speed * rpm_to_rad_per_ms;
 8002c16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c18:	4368      	muls	r0, r5
 8002c1a:	f7fd fb5b 	bl	80002d4 <__aeabi_i2f>
 8002c1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c20:	f7fd fbac 	bl	800037c <__aeabi_fmul>
 8002c24:	4904      	ldr	r1, [pc, #16]	; (8002c38 <_ZN11stepping_md15MotorController15update_positionEv+0x34>)
 8002c26:	f7fd fba9 	bl	800037c <__aeabi_fmul>
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c2e:	f7fd fa9d 	bl	800016c <__addsf3>
 8002c32:	6320      	str	r0, [r4, #48]	; 0x30
    }
 8002c34:	bd38      	pop	{r3, r4, r5, pc}
 8002c36:	bf00      	nop
 8002c38:	38db9cfe 	.word	0x38db9cfe

08002c3c <_ZN11stepping_md15MotorController13set_directionEi>:

    //方向を設定する。引数が正のとき正転、負のとき逆転
    void MotorController::set_direction(int _direction){
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	460d      	mov	r5, r1
 8002c40:	4604      	mov	r4, r0
        //変更前に現在の位置を更新する
        update_position();
 8002c42:	f7ff ffdf 	bl	8002c04 <_ZN11stepping_md15MotorController15update_positionEv>
        //設定の取得
        if(_direction > 0){
 8002c46:	2d00      	cmp	r5, #0
            direction = 1;
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_SET);
        }else{
            direction = -1;
 8002c48:	bfd4      	ite	le
 8002c4a:	f04f 33ff 	movle.w	r3, #4294967295
            direction = 1;
 8002c4e:	2201      	movgt	r2, #1
 8002c50:	8921      	ldrh	r1, [r4, #8]
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8002c52:	68e0      	ldr	r0, [r4, #12]
            direction = 1;
 8002c54:	bfce      	itee	gt
 8002c56:	6262      	strgt	r2, [r4, #36]	; 0x24
            direction = -1;
 8002c58:	6263      	strle	r3, [r4, #36]	; 0x24
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8002c5a:	2200      	movle	r2, #0
        }
    }
 8002c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8002c60:	f001 bd74 	b.w	800474c <HAL_GPIO_WritePin>

08002c64 <_ZN11stepping_md15MotorController5startEv>:
    void MotorController::disable(){
        update_position();
        stop();
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
    }
    void MotorController::start(){
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4604      	mov	r4, r0
        update_position();
 8002c68:	f7ff ffcc 	bl	8002c04 <_ZN11stepping_md15MotorController15update_positionEv>
        HAL_TIM_PWM_Start(pwm_tim, TIM_CHANNEL_1);
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6960      	ldr	r0, [r4, #20]
 8002c70:	f002 fa92 	bl	8005198 <HAL_TIM_PWM_Start>
        current_speed = speed;
 8002c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c76:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
 8002c78:	bd10      	pop	{r4, pc}

08002c7a <_ZN11stepping_md15MotorController4stopEv>:
    void MotorController::stop(){
 8002c7a:	b510      	push	{r4, lr}
 8002c7c:	4604      	mov	r4, r0
        update_position();
 8002c7e:	f7ff ffc1 	bl	8002c04 <_ZN11stepping_md15MotorController15update_positionEv>
        HAL_TIM_PWM_Stop(pwm_tim, TIM_CHANNEL_1);
 8002c82:	2100      	movs	r1, #0
 8002c84:	6960      	ldr	r0, [r4, #20]
 8002c86:	f002 fac5 	bl	8005214 <HAL_TIM_PWM_Stop>
        current_speed = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
 8002c8e:	bd10      	pop	{r4, pc}

08002c90 <_ZN11stepping_md15MotorController6enableEv>:
    void MotorController::enable(){
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4604      	mov	r4, r0
        update_position();
 8002c94:	f7ff ffb6 	bl	8002c04 <_ZN11stepping_md15MotorController15update_positionEv>
        stop();
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7ff ffee 	bl	8002c7a <_ZN11stepping_md15MotorController4stopEv>
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_SET);
 8002c9e:	8821      	ldrh	r1, [r4, #0]
 8002ca0:	6860      	ldr	r0, [r4, #4]
 8002ca2:	2201      	movs	r2, #1
    }
 8002ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_SET);
 8002ca8:	f001 bd50 	b.w	800474c <HAL_GPIO_WritePin>

08002cac <_ZN11stepping_md15MotorController7disableEv>:
    void MotorController::disable(){
 8002cac:	b510      	push	{r4, lr}
 8002cae:	4604      	mov	r4, r0
        update_position();
 8002cb0:	f7ff ffa8 	bl	8002c04 <_ZN11stepping_md15MotorController15update_positionEv>
        stop();
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff ffe0 	bl	8002c7a <_ZN11stepping_md15MotorController4stopEv>
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
 8002cba:	8821      	ldrh	r1, [r4, #0]
 8002cbc:	6860      	ldr	r0, [r4, #4]
 8002cbe:	2200      	movs	r2, #0
    }
 8002cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
 8002cc4:	f001 bd42 	b.w	800474c <HAL_GPIO_WritePin>

08002cc8 <_ZN11stepping_md15MotorController14move_to_targetEf>:
    void MotorController::move_to_target(float target){
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4608      	mov	r0, r1
        //方向を決める
        set_direction(target - positon);
 8002cce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002cd0:	f7fd fa4a 	bl	8000168 <__aeabi_fsub>
 8002cd4:	f7fd fd18 	bl	8000708 <__aeabi_f2iz>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff ffae 	bl	8002c3c <_ZN11stepping_md15MotorController13set_directionEi>
        start();
 8002ce0:	4620      	mov	r0, r4
    }
 8002ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        start();
 8002ce6:	f7ff bfbd 	b.w	8002c64 <_ZN11stepping_md15MotorController5startEv>
	...

08002cec <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm>:


    MotorController::MotorController(
 8002cec:	b538      	push	{r3, r4, r5, lr}
        const GPIO_Port dir_port,
        const float error_threshold,
        TIM_HandleTypeDef* pwm_tim,
        Parameters& params,
		unsigned long source_clock
    ) : ena_pin(ena_pin), ena_port(ena_port), dir_pin(dir_pin), dir_port(dir_port),error_threshold(error_threshold), pwm_tim(pwm_tim), params(params), source_clock(source_clock){
 8002cee:	8103      	strh	r3, [r0, #8]
 8002cf0:	9b04      	ldr	r3, [sp, #16]
 8002cf2:	6042      	str	r2, [r0, #4]
 8002cf4:	60c3      	str	r3, [r0, #12]
 8002cf6:	9b05      	ldr	r3, [sp, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6103      	str	r3, [r0, #16]
 8002cfc:	9b07      	ldr	r3, [sp, #28]
    MotorController::MotorController(
 8002cfe:	9d06      	ldr	r5, [sp, #24]
    ) : ena_pin(ena_pin), ena_port(ena_port), dir_pin(dir_pin), dir_port(dir_port),error_threshold(error_threshold), pwm_tim(pwm_tim), params(params), source_clock(source_clock){
 8002d00:	6183      	str	r3, [r0, #24]
 8002d02:	9b08      	ldr	r3, [sp, #32]
 8002d04:	8001      	strh	r1, [r0, #0]
 8002d06:	61c3      	str	r3, [r0, #28]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6145      	str	r5, [r0, #20]
 8002d12:	6283      	str	r3, [r0, #40]	; 0x28
 8002d14:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002d16:	6303      	str	r3, [r0, #48]	; 0x30
    MotorController::MotorController(
 8002d18:	4604      	mov	r4, r0
        //安全のために初期化時にはモーターを停止させる。ただし、ENAはHighにしておく
        
        enable();
 8002d1a:	f7ff ffb9 	bl	8002c90 <_ZN11stepping_md15MotorController6enableEv>

        //適当な値を設定しておく
        pwm_tim->Instance->CCR1 =100;
 8002d1e:	2264      	movs	r2, #100	; 0x64
 8002d20:	682b      	ldr	r3, [r5, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d22:	200c      	movs	r0, #12
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
 8002d26:	f002 fe96 	bl	8005a56 <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 8002d2a:	4d05      	ldr	r5, [pc, #20]	; (8002d40 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm+0x54>)
 8002d2c:	6084      	str	r4, [r0, #8]
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f003 f972 	bl	8006018 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002d34:	68ab      	ldr	r3, [r5, #8]

        //インスタンス登録(trigger_update, trigger_emergency, trigger_recovery用)
        pInstances.push_back(this);
    }
 8002d36:	4620      	mov	r0, r4
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60ab      	str	r3, [r5, #8]
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000033c 	.word	0x2000033c

08002d44 <_ZN11stepping_md15MotorController9set_speedEf>:

    void MotorController::set_speed(float _speed){
 8002d44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	460d      	mov	r5, r1
        //変更前に現在の位置を更新する
        update_position();
 8002d4a:	f7ff ff5b 	bl	8002c04 <_ZN11stepping_md15MotorController15update_positionEv>
        //設定の取得
        speed = _speed;
        stepping_md::MotorParam motor_param = params.get_motor_param();
 8002d4e:	69a1      	ldr	r1, [r4, #24]
        speed = _speed;
 8002d50:	62a5      	str	r5, [r4, #40]	; 0x28
        stepping_md::MotorParam motor_param = params.get_motor_param();
 8002d52:	a801      	add	r0, sp, #4
 8002d54:	f000 f89a 	bl	8002e8c <_ZN11stepping_md10Parameters15get_motor_paramEv>

        //pwmの周期を設定する
        const float rotate_per_second = _speed / 60.0f;
        const uint32_t arr_val = (uint32_t)(source_clock/(pwm_tim->Instance->PSC + 1)/rotate_per_second/motor_param.ppr) - 1;
 8002d58:	6963      	ldr	r3, [r4, #20]
 8002d5a:	69e0      	ldr	r0, [r4, #28]
 8002d5c:	681e      	ldr	r6, [r3, #0]
 8002d5e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002d60:	3301      	adds	r3, #1
 8002d62:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d66:	f7fd fab1 	bl	80002cc <__aeabi_ui2f>
        const float rotate_per_second = _speed / 60.0f;
 8002d6a:	490e      	ldr	r1, [pc, #56]	; (8002da4 <_ZN11stepping_md15MotorController9set_speedEf+0x60>)
        const uint32_t arr_val = (uint32_t)(source_clock/(pwm_tim->Instance->PSC + 1)/rotate_per_second/motor_param.ppr) - 1;
 8002d6c:	4604      	mov	r4, r0
        const float rotate_per_second = _speed / 60.0f;
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f7fd fbb8 	bl	80004e4 <__aeabi_fdiv>
 8002d74:	4601      	mov	r1, r0
        const uint32_t arr_val = (uint32_t)(source_clock/(pwm_tim->Instance->PSC + 1)/rotate_per_second/motor_param.ppr) - 1;
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7fd fbb4 	bl	80004e4 <__aeabi_fdiv>
 8002d7c:	9902      	ldr	r1, [sp, #8]
 8002d7e:	f7fd fbb1 	bl	80004e4 <__aeabi_fdiv>
 8002d82:	f7fd fce7 	bl	8000754 <__aeabi_f2uiz>
 8002d86:	3801      	subs	r0, #1
        pwm_tim->Instance->ARR = arr_val;
 8002d88:	62f0      	str	r0, [r6, #44]	; 0x2c
        pwm_tim->Instance->CCR1 = (uint32_t)(arr_val / 2.0f) - 1;
 8002d8a:	f7fd fa9f 	bl	80002cc <__aeabi_ui2f>
 8002d8e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d92:	f7fd faf3 	bl	800037c <__aeabi_fmul>
 8002d96:	f7fd fcdd 	bl	8000754 <__aeabi_f2uiz>
 8002d9a:	3801      	subs	r0, #1
 8002d9c:	6370      	str	r0, [r6, #52]	; 0x34
    }
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	bf00      	nop
 8002da4:	42700000 	.word	0x42700000

08002da8 <_ZN11stepping_md15MotorController6updateEv>:

    void MotorController::update(){
 8002da8:	b530      	push	{r4, r5, lr}
 8002daa:	4604      	mov	r4, r0
 8002dac:	b085      	sub	sp, #20
        //現在の位置を更新する
        update_position();
 8002dae:	f7ff ff29 	bl	8002c04 <_ZN11stepping_md15MotorController15update_positionEv>

        stepping_md::MotorParam motor_param = params.get_motor_param();
 8002db2:	69a1      	ldr	r1, [r4, #24]
 8002db4:	a801      	add	r0, sp, #4
 8002db6:	f000 f869 	bl	8002e8c <_ZN11stepping_md10Parameters15get_motor_paramEv>
 8002dba:	9d03      	ldr	r5, [sp, #12]
        //目標位置に到達しているか確認する
        if(abs(motor_param.target - positon) < error_threshold){
 8002dbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f7fd f9d2 	bl	8000168 <__aeabi_fsub>
 8002dc4:	f7fd fca0 	bl	8000708 <__aeabi_f2iz>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	bfb8      	it	lt
 8002dcc:	4240      	neglt	r0, r0
 8002dce:	f7fd fa81 	bl	80002d4 <__aeabi_i2f>
 8002dd2:	6921      	ldr	r1, [r4, #16]
 8002dd4:	f7fd fc70 	bl	80006b8 <__aeabi_fcmplt>
 8002dd8:	b128      	cbz	r0, 8002de6 <_ZN11stepping_md15MotorController6updateEv+0x3e>
            //目標位置に到達している場合は停止する
            stop();
 8002dda:	4620      	mov	r0, r4
        }
        else{
            //目標位置に到達していない場合は、目標位置に向かって動かす
            move_to_target(motor_param.target);
        }
    }      
 8002ddc:	b005      	add	sp, #20
 8002dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            stop();
 8002de2:	f7ff bf4a 	b.w	8002c7a <_ZN11stepping_md15MotorController4stopEv>
            move_to_target(motor_param.target);
 8002de6:	4629      	mov	r1, r5
 8002de8:	4620      	mov	r0, r4
    }      
 8002dea:	b005      	add	sp, #20
 8002dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            move_to_target(motor_param.target);
 8002df0:	f7ff bf6a 	b.w	8002cc8 <_ZN11stepping_md15MotorController14move_to_targetEf>

08002df4 <_ZN11stepping_md15MotorController14reset_positionEv>:
    void MotorController::set_register(const Parameters& params){
        this->params = params;
    }

    void MotorController::reset_position(void){
    	positon = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	6303      	str	r3, [r0, #48]	; 0x30
    }
 8002df8:	4770      	bx	lr
	...

08002dfc <_ZN11stepping_md15MotorController26trigger_emergency_callbackEv>:

    void MotorController::trigger_emergency_callback(void){
 8002dfc:	b570      	push	{r4, r5, r6, lr}
      { return iterator(this->_M_impl._M_node._M_next); }
 8002dfe:	4e07      	ldr	r6, [pc, #28]	; (8002e1c <_ZN11stepping_md15MotorController26trigger_emergency_callbackEv+0x20>)
 8002e00:	6834      	ldr	r4, [r6, #0]
    	for(MotorController* pController : pInstances){
 8002e02:	42b4      	cmp	r4, r6
 8002e04:	d008      	beq.n	8002e18 <_ZN11stepping_md15MotorController26trigger_emergency_callbackEv+0x1c>
 8002e06:	68a5      	ldr	r5, [r4, #8]
			//定期的に呼ばれる
			void update(void);

			//Emergencyスイッチが扱われたとき呼ばれるコールバック関数
		    void emergency_callback(){
		        stop();
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f7ff ff36 	bl	8002c7a <_ZN11stepping_md15MotorController4stopEv>
		        disable();
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f7ff ff4c 	bl	8002cac <_ZN11stepping_md15MotorController7disableEv>
	_M_node = _M_node->_M_next;
 8002e14:	6824      	ldr	r4, [r4, #0]
	return *this;
 8002e16:	e7f4      	b.n	8002e02 <_ZN11stepping_md15MotorController26trigger_emergency_callbackEv+0x6>
    		pController->emergency_callback();
    	}
    }
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000033c 	.word	0x2000033c

08002e20 <_ZN11stepping_md15MotorController14trigger_updateEv>:

    void MotorController::trigger_update(void){
 8002e20:	b538      	push	{r3, r4, r5, lr}
      { return iterator(this->_M_impl._M_node._M_next); }
 8002e22:	4d05      	ldr	r5, [pc, #20]	; (8002e38 <_ZN11stepping_md15MotorController14trigger_updateEv+0x18>)
 8002e24:	682c      	ldr	r4, [r5, #0]
    	for(MotorController* pController : pInstances){
 8002e26:	42ac      	cmp	r4, r5
 8002e28:	d004      	beq.n	8002e34 <_ZN11stepping_md15MotorController14trigger_updateEv+0x14>
    		pController->update();
 8002e2a:	68a0      	ldr	r0, [r4, #8]
 8002e2c:	f7ff ffbc 	bl	8002da8 <_ZN11stepping_md15MotorController6updateEv>
	_M_node = _M_node->_M_next;
 8002e30:	6824      	ldr	r4, [r4, #0]
	return *this;
 8002e32:	e7f8      	b.n	8002e26 <_ZN11stepping_md15MotorController14trigger_updateEv+0x6>
    	}
    }
 8002e34:	bd38      	pop	{r3, r4, r5, pc}
 8002e36:	bf00      	nop
 8002e38:	2000033c 	.word	0x2000033c

08002e3c <_ZN11stepping_md15MotorController25trigger_recovery_callbackEv>:

    void MotorController::trigger_recovery_callback(void){
 8002e3c:	b570      	push	{r4, r5, r6, lr}
      { return iterator(this->_M_impl._M_node._M_next); }
 8002e3e:	4e07      	ldr	r6, [pc, #28]	; (8002e5c <_ZN11stepping_md15MotorController25trigger_recovery_callbackEv+0x20>)
 8002e40:	6834      	ldr	r4, [r6, #0]
    	for(MotorController* pController : pInstances){
 8002e42:	42b4      	cmp	r4, r6
 8002e44:	d008      	beq.n	8002e58 <_ZN11stepping_md15MotorController25trigger_recovery_callbackEv+0x1c>
 8002e46:	68a5      	ldr	r5, [r4, #8]
		    }

		    //Emergencyスイッチが復帰したとき呼ばれるコールバック関数
		    void recovery_callback(){
		    	start();
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f7ff ff0b 	bl	8002c64 <_ZN11stepping_md15MotorController5startEv>
		    	enable();
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f7ff ff1e 	bl	8002c90 <_ZN11stepping_md15MotorController6enableEv>
	_M_node = _M_node->_M_next;
 8002e54:	6824      	ldr	r4, [r4, #0]
	return *this;
 8002e56:	e7f4      	b.n	8002e42 <_ZN11stepping_md15MotorController25trigger_recovery_callbackEv+0x6>
    		pController->recovery_callback();
    	}
    }
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000033c 	.word	0x2000033c

08002e60 <_GLOBAL__sub_I__ZN11stepping_md15MotorController10pInstancesB5cxx11E>:
	this->_M_size = 0;
 8002e60:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8002e62:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <_GLOBAL__sub_I__ZN11stepping_md15MotorController10pInstancesB5cxx11E+0xc>)
 8002e64:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8002e68:	609a      	str	r2, [r3, #8]

} // namespace stapping_md
 8002e6a:	4770      	bx	lr
 8002e6c:	2000033c 	.word	0x2000033c

08002e70 <_GLOBAL__sub_D__ZN11stepping_md15MotorController10pInstancesB5cxx11E>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002e72:	4c05      	ldr	r4, [pc, #20]	; (8002e88 <_GLOBAL__sub_D__ZN11stepping_md15MotorController10pInstancesB5cxx11E+0x18>)
 8002e74:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 8002e76:	42a0      	cmp	r0, r4
 8002e78:	d005      	beq.n	8002e86 <_GLOBAL__sub_D__ZN11stepping_md15MotorController10pInstancesB5cxx11E+0x16>
	  __cur = __tmp->_M_next;
 8002e7a:	6805      	ldr	r5, [r0, #0]
	::operator delete(__p
 8002e7c:	210c      	movs	r1, #12
 8002e7e:	f002 fa8f 	bl	80053a0 <_ZdlPvj>
 8002e82:	4628      	mov	r0, r5
 8002e84:	e7f7      	b.n	8002e76 <_GLOBAL__sub_D__ZN11stepping_md15MotorController10pInstancesB5cxx11E+0x6>
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
 8002e88:	2000033c 	.word	0x2000033c

08002e8c <_ZN11stepping_md10Parameters15get_motor_paramEv>:
	std::list<Parameters*> Parameters::pInstances;

    //パラメータを取得する関数
	//第1引数は結果を格納する構造体オブジェクトへのポインタ
	MotorParam Parameters::get_motor_param()
    {
 8002e8c:	4603      	mov	r3, r0
        return SMParam;
 8002e8e:	3104      	adds	r1, #4
 8002e90:	c907      	ldmia	r1, {r0, r1, r2}
 8002e92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	4770      	bx	lr

08002e9a <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>:

	//パラメータを設定する関数
	//第1引数は設定内容が書かれた構造体オブジェクト
	void Parameters::set_motor_param(const MotorParam& param)
    {
        SMParam = param;
 8002e9a:	1d03      	adds	r3, r0, #4
 8002e9c:	c907      	ldmia	r1, {r0, r1, r2}
 8002e9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8002ea2:	4770      	bx	lr

08002ea4 <_ZN11stepping_md10Parameters7get_BIDEv>:

	//BIDを取得する関数
	uint16_t Parameters::get_BID()
    {
        return BID;
    }
 8002ea4:	8800      	ldrh	r0, [r0, #0]
 8002ea6:	4770      	bx	lr

08002ea8 <_ZN11stepping_md10Parameters7set_BIDEt>:

	//BIDを設定する関数
	void Parameters::set_BID(const uint16_t bid)
    {
        BID = bid;
 8002ea8:	8001      	strh	r1, [r0, #0]
    }
 8002eaa:	4770      	bx	lr

08002eac <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv>:

	void Parameters::trigger_emergency_callback(void){
 8002eac:	b510      	push	{r4, lr}
			//Emergencyボタンが押されたときに呼ばれるコールバック関数
			//emergency_callbackはパラメーターのうちmodeをMD_MODE::DEFAULTにする関数
			void emergency_callback(void)
			{
				SMParam.mode = MD_MODE::DEFAULT;
				SMParam.target = 0;
 8002eae:	2000      	movs	r0, #0
				SMParam.mode = MD_MODE::DEFAULT;
 8002eb0:	2400      	movs	r4, #0
      { return iterator(this->_M_impl._M_node._M_next); }
 8002eb2:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv+0x1c>)
 8002eb4:	680b      	ldr	r3, [r1, #0]
		for(Parameters* pParameters : pInstances){
 8002eb6:	428b      	cmp	r3, r1
 8002eb8:	d004      	beq.n	8002ec4 <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv+0x18>
 8002eba:	689a      	ldr	r2, [r3, #8]
	_M_node = _M_node->_M_next;
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6054      	str	r4, [r2, #4]
				SMParam.target = 0;
 8002ec0:	60d0      	str	r0, [r2, #12]
	return *this;
 8002ec2:	e7f8      	b.n	8002eb6 <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv+0xa>
			pParameters->emergency_callback();
		}
	}
 8002ec4:	bd10      	pop	{r4, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000348 	.word	0x20000348

08002ecc <_GLOBAL__sub_I__ZN11stepping_md10Parameters10pInstancesB5cxx11E>:
	this->_M_size = 0;
 8002ecc:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8002ece:	4b02      	ldr	r3, [pc, #8]	; (8002ed8 <_GLOBAL__sub_I__ZN11stepping_md10Parameters10pInstancesB5cxx11E+0xc>)
 8002ed0:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8002ed4:	609a      	str	r2, [r3, #8]
}
 8002ed6:	4770      	bx	lr
 8002ed8:	20000348 	.word	0x20000348

08002edc <_GLOBAL__sub_D__ZN11stepping_md10Parameters10pInstancesB5cxx11E>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002ede:	4c05      	ldr	r4, [pc, #20]	; (8002ef4 <_GLOBAL__sub_D__ZN11stepping_md10Parameters10pInstancesB5cxx11E+0x18>)
 8002ee0:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 8002ee2:	42a0      	cmp	r0, r4
 8002ee4:	d005      	beq.n	8002ef2 <_GLOBAL__sub_D__ZN11stepping_md10Parameters10pInstancesB5cxx11E+0x16>
	  __cur = __tmp->_M_next;
 8002ee6:	6805      	ldr	r5, [r0, #0]
 8002ee8:	210c      	movs	r1, #12
 8002eea:	f002 fa59 	bl	80053a0 <_ZdlPvj>
 8002eee:	4628      	mov	r0, r5
 8002ef0:	e7f7      	b.n	8002ee2 <_GLOBAL__sub_D__ZN11stepping_md10Parameters10pInstancesB5cxx11E+0x6>
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	20000348 	.word	0x20000348

08002ef8 <_ZN11stepping_md7led_mgr11led_processEv>:
static bool is_yellow_led_on = false;
static uint8_t blink_num;
static uint8_t enabled_motor_num = 0;

namespace stepping_md::led_mgr{
	void led_process(void){
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		constexpr unsigned int green_led_on_time = 1900; //ms
		constexpr unsigned int green_led_off_time = 100; //ms
		constexpr unsigned int yellow_led_period = 2000; //ms
		constexpr unsigned int yellow_led_margin = 500; //ms
		constexpr unsigned int yellow_led_blink_period = yellow_led_period - yellow_led_margin;
		if(is_can_led_on && ((HAL_GetTick() - can_led_last_on) > can_led_on_time)){
 8002efc:	4c45      	ldr	r4, [pc, #276]	; (8003014 <_ZN11stepping_md7led_mgr11led_processEv+0x11c>)
 8002efe:	7823      	ldrb	r3, [r4, #0]
 8002f00:	b173      	cbz	r3, 8002f20 <_ZN11stepping_md7led_mgr11led_processEv+0x28>
 8002f02:	f001 f949 	bl	8004198 <HAL_GetTick>
 8002f06:	4b44      	ldr	r3, [pc, #272]	; (8003018 <_ZN11stepping_md7led_mgr11led_processEv+0x120>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1ac0      	subs	r0, r0, r3
 8002f0c:	283c      	cmp	r0, #60	; 0x3c
 8002f0e:	d907      	bls.n	8002f20 <_ZN11stepping_md7led_mgr11led_processEv+0x28>
			HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f16:	4841      	ldr	r0, [pc, #260]	; (800301c <_ZN11stepping_md7led_mgr11led_processEv+0x124>)
 8002f18:	f001 fc18 	bl	800474c <HAL_GPIO_WritePin>
			is_can_led_on = true;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	7023      	strb	r3, [r4, #0]
		}

		if(is_green_led_on && ((HAL_GetTick() - green_led_last_toggle) > green_led_on_time)){
 8002f20:	4d3f      	ldr	r5, [pc, #252]	; (8003020 <_ZN11stepping_md7led_mgr11led_processEv+0x128>)
 8002f22:	4c40      	ldr	r4, [pc, #256]	; (8003024 <_ZN11stepping_md7led_mgr11led_processEv+0x12c>)
 8002f24:	782b      	ldrb	r3, [r5, #0]
 8002f26:	b14b      	cbz	r3, 8002f3c <_ZN11stepping_md7led_mgr11led_processEv+0x44>
 8002f28:	f001 f936 	bl	8004198 <HAL_GetTick>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	1ac0      	subs	r0, r0, r3
 8002f30:	f240 736c 	movw	r3, #1900	; 0x76c
 8002f34:	4298      	cmp	r0, r3
 8002f36:	d80e      	bhi.n	8002f56 <_ZN11stepping_md7led_mgr11led_processEv+0x5e>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
			is_green_led_on = false;
			green_led_last_toggle = HAL_GetTick();
		}else if((!is_green_led_on) && ((HAL_GetTick() - green_led_last_toggle) > green_led_off_time)){
 8002f38:	782b      	ldrb	r3, [r5, #0]
 8002f3a:	b9b3      	cbnz	r3, 8002f6a <_ZN11stepping_md7led_mgr11led_processEv+0x72>
 8002f3c:	f001 f92c 	bl	8004198 <HAL_GetTick>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	1ac0      	subs	r0, r0, r3
 8002f44:	2864      	cmp	r0, #100	; 0x64
 8002f46:	d910      	bls.n	8002f6a <_ZN11stepping_md7led_mgr11led_processEv+0x72>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4837      	ldr	r0, [pc, #220]	; (8003028 <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	f001 fbfd 	bl	800474c <HAL_GPIO_WritePin>
			is_green_led_on = true;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e005      	b.n	8002f62 <_ZN11stepping_md7led_mgr11led_processEv+0x6a>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4833      	ldr	r0, [pc, #204]	; (8003028 <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8002f5c:	f001 fbf6 	bl	800474c <HAL_GPIO_WritePin>
			is_green_led_on = false;
 8002f60:	2300      	movs	r3, #0
			is_green_led_on = true;
 8002f62:	702b      	strb	r3, [r5, #0]
			green_led_last_toggle = HAL_GetTick();
 8002f64:	f001 f918 	bl	8004198 <HAL_GetTick>
 8002f68:	6020      	str	r0, [r4, #0]
		}

		if(enabled_motor_num != 0){
 8002f6a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800302c <_ZN11stepping_md7led_mgr11led_processEv+0x134>
 8002f6e:	4c30      	ldr	r4, [pc, #192]	; (8003030 <_ZN11stepping_md7led_mgr11led_processEv+0x138>)
 8002f70:	f898 2000 	ldrb.w	r2, [r8]
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	d047      	beq.n	8003008 <_ZN11stepping_md7led_mgr11led_processEv+0x110>
			int yellow_led_on_time, yellow_led_off_time;
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
			if(blink_num < enabled_motor_num){
 8002f78:	4e2e      	ldr	r6, [pc, #184]	; (8003034 <_ZN11stepping_md7led_mgr11led_processEv+0x13c>)
 8002f7a:	7833      	ldrb	r3, [r6, #0]
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d231      	bcs.n	8002fe4 <_ZN11stepping_md7led_mgr11led_processEv+0xec>
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
 8002f80:	f240 25ee 	movw	r5, #750	; 0x2ee
				if(is_yellow_led_on && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_on_time){
 8002f84:	4f2c      	ldr	r7, [pc, #176]	; (8003038 <_ZN11stepping_md7led_mgr11led_processEv+0x140>)
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
 8002f86:	fbb5 f5f2 	udiv	r5, r5, r2
				if(is_yellow_led_on && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_on_time){
 8002f8a:	783b      	ldrb	r3, [r7, #0]
 8002f8c:	b13b      	cbz	r3, 8002f9e <_ZN11stepping_md7led_mgr11led_processEv+0xa6>
 8002f8e:	f001 f903 	bl	8004198 <HAL_GetTick>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	1ac0      	subs	r0, r0, r3
 8002f96:	4285      	cmp	r5, r0
 8002f98:	d318      	bcc.n	8002fcc <_ZN11stepping_md7led_mgr11led_processEv+0xd4>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
					is_yellow_led_on = false;
					yellow_led_last_toggle = HAL_GetTick();
				}else if((!is_yellow_led_on) && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_off_time){
 8002f9a:	783b      	ldrb	r3, [r7, #0]
 8002f9c:	bb03      	cbnz	r3, 8002fe0 <_ZN11stepping_md7led_mgr11led_processEv+0xe8>
 8002f9e:	f001 f8fb 	bl	8004198 <HAL_GetTick>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	1ac0      	subs	r0, r0, r3
 8002fa6:	4285      	cmp	r5, r0
 8002fa8:	d21a      	bcs.n	8002fe0 <_ZN11stepping_md7led_mgr11led_processEv+0xe8>
					if(blink_num < enabled_motor_num - 1){
 8002faa:	f898 3000 	ldrb.w	r3, [r8]
 8002fae:	7832      	ldrb	r2, [r6, #0]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	da06      	bge.n	8002fc4 <_ZN11stepping_md7led_mgr11led_processEv+0xcc>
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2102      	movs	r1, #2
 8002fba:	481b      	ldr	r0, [pc, #108]	; (8003028 <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8002fbc:	f001 fbc6 	bl	800474c <HAL_GPIO_WritePin>
						is_yellow_led_on = true;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	703b      	strb	r3, [r7, #0]
					}
					blink_num++;
 8002fc4:	7833      	ldrb	r3, [r6, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	7033      	strb	r3, [r6, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8002fca:	e006      	b.n	8002fda <_ZN11stepping_md7led_mgr11led_processEv+0xe2>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4815      	ldr	r0, [pc, #84]	; (8003028 <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8002fd2:	f001 fbbb 	bl	800474c <HAL_GPIO_WritePin>
					is_yellow_led_on = false;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	703b      	strb	r3, [r7, #0]
					yellow_led_last_toggle = HAL_GetTick();
				}
			}
		}else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			yellow_led_last_toggle = HAL_GetTick();
 8002fda:	f001 f8dd 	bl	8004198 <HAL_GetTick>
 8002fde:	6020      	str	r0, [r4, #0]
		}
	}
 8002fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if((HAL_GetTick() - yellow_led_last_toggle) > yellow_led_margin){
 8002fe4:	f001 f8d8 	bl	8004198 <HAL_GetTick>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	1ac0      	subs	r0, r0, r3
 8002fec:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002ff0:	d9f6      	bls.n	8002fe0 <_ZN11stepping_md7led_mgr11led_processEv+0xe8>
					blink_num = 0;
 8002ff2:	2300      	movs	r3, #0
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	480b      	ldr	r0, [pc, #44]	; (8003028 <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
					blink_num = 0;
 8002ffa:	7033      	strb	r3, [r6, #0]
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002ffc:	f001 fba6 	bl	800474c <HAL_GPIO_WritePin>
					is_yellow_led_on = true;
 8003000:	2201      	movs	r2, #1
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <_ZN11stepping_md7led_mgr11led_processEv+0x140>)
 8003004:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8003006:	e7e8      	b.n	8002fda <_ZN11stepping_md7led_mgr11led_processEv+0xe2>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003008:	2102      	movs	r1, #2
 800300a:	4807      	ldr	r0, [pc, #28]	; (8003028 <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 800300c:	f001 fb9e 	bl	800474c <HAL_GPIO_WritePin>
 8003010:	e7e3      	b.n	8002fda <_ZN11stepping_md7led_mgr11led_processEv+0xe2>
 8003012:	bf00      	nop
 8003014:	20000354 	.word	0x20000354
 8003018:	20000358 	.word	0x20000358
 800301c:	40011000 	.word	0x40011000
 8003020:	20000000 	.word	0x20000000
 8003024:	20000360 	.word	0x20000360
 8003028:	40010c00 	.word	0x40010c00
 800302c:	2000035d 	.word	0x2000035d
 8003030:	20000364 	.word	0x20000364
 8003034:	20000368 	.word	0x20000368
 8003038:	2000035c 	.word	0x2000035c

0800303c <_ZN11stepping_md7led_mgr13blink_can_ledEv>:

	void blink_can_led(void){
 800303c:	b510      	push	{r4, lr}
		is_can_led_on = true;
 800303e:	2401      	movs	r4, #1
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <_ZN11stepping_md7led_mgr13blink_can_ledEv+0x20>)
 8003042:	701c      	strb	r4, [r3, #0]
		can_led_last_on = HAL_GetTick();
 8003044:	f001 f8a8 	bl	8004198 <HAL_GetTick>
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <_ZN11stepping_md7led_mgr13blink_can_ledEv+0x24>)
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_SET);
 800304a:	4622      	mov	r2, r4
	}
 800304c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		can_led_last_on = HAL_GetTick();
 8003050:	6018      	str	r0, [r3, #0]
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_SET);
 8003052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003056:	4803      	ldr	r0, [pc, #12]	; (8003064 <_ZN11stepping_md7led_mgr13blink_can_ledEv+0x28>)
 8003058:	f001 bb78 	b.w	800474c <HAL_GPIO_WritePin>
 800305c:	20000354 	.word	0x20000354
 8003060:	20000358 	.word	0x20000358
 8003064:	40011000 	.word	0x40011000

08003068 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv>:

	void increase_enabled_motor(){
 8003068:	b510      	push	{r4, lr}
		if(enabled_motor_num == 0){
 800306a:	4c07      	ldr	r4, [pc, #28]	; (8003088 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x20>)
 800306c:	7823      	ldrb	r3, [r4, #0]
 800306e:	b93b      	cbnz	r3, 8003080 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x18>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003070:	2201      	movs	r2, #1
 8003072:	2102      	movs	r1, #2
 8003074:	4805      	ldr	r0, [pc, #20]	; (800308c <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x24>)
 8003076:	f001 fb69 	bl	800474c <HAL_GPIO_WritePin>
			is_yellow_led_on = true;
 800307a:	2201      	movs	r2, #1
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x28>)
 800307e:	701a      	strb	r2, [r3, #0]
		}
		enabled_motor_num++;
 8003080:	7823      	ldrb	r3, [r4, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	7023      	strb	r3, [r4, #0]
	}
 8003086:	bd10      	pop	{r4, pc}
 8003088:	2000035d 	.word	0x2000035d
 800308c:	40010c00 	.word	0x40010c00
 8003090:	2000035c 	.word	0x2000035c

08003094 <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv>:

	void decrease_enabled_motor(){
		enabled_motor_num = enabled_motor_num > 0? enabled_motor_num - 1 : 0;
 8003094:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv+0x10>)
 8003096:	7813      	ldrb	r3, [r2, #0]
 8003098:	b10b      	cbz	r3, 800309e <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv+0xa>
 800309a:	3b01      	subs	r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	7013      	strb	r3, [r2, #0]
	}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	2000035d 	.word	0x2000035d

080030a8 <_ZN11stepping_md7led_mgr17disable_all_motorEv>:

	void disable_all_motor(){
		enabled_motor_num = 0;
 80030a8:	2200      	movs	r2, #0
 80030aa:	4b01      	ldr	r3, [pc, #4]	; (80030b0 <_ZN11stepping_md7led_mgr17disable_all_motorEv+0x8>)
 80030ac:	701a      	strb	r2, [r3, #0]
	}
 80030ae:	4770      	bx	lr
 80030b0:	2000035d 	.word	0x2000035d

080030b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b4:	b510      	push	{r4, lr}
 80030b6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b8:	2214      	movs	r2, #20
 80030ba:	2100      	movs	r1, #0
 80030bc:	a808      	add	r0, sp, #32
 80030be:	f003 f8b3 	bl	8006228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c2:	2214      	movs	r2, #20
 80030c4:	2100      	movs	r1, #0
 80030c6:	a801      	add	r0, sp, #4
 80030c8:	f003 f8ae 	bl	8006228 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030cc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d2:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030d4:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030e2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030e4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e6:	f001 fb43 	bl	8004770 <HAL_RCC_OscConfig>
 80030ea:	b108      	cbz	r0, 80030f0 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ee:	e7fe      	b.n	80030ee <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030fa:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030fc:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003100:	4621      	mov	r1, r4
 8003102:	a801      	add	r0, sp, #4
 8003104:	f001 fd0a 	bl	8004b1c <HAL_RCC_ClockConfig>
 8003108:	b108      	cbz	r0, 800310e <SystemClock_Config+0x5a>
 800310a:	b672      	cpsid	i
  while (1)
 800310c:	e7fe      	b.n	800310c <SystemClock_Config+0x58>
}
 800310e:	b010      	add	sp, #64	; 0x40
 8003110:	bd10      	pop	{r4, pc}
	...

08003114 <main>:
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8003118:	f001 f820 	bl	800415c <HAL_Init>
  SystemClock_Config();
 800311c:	f7ff ffca 	bl	80030b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	2210      	movs	r2, #16
 8003122:	2100      	movs	r1, #0
 8003124:	a812      	add	r0, sp, #72	; 0x48
 8003126:	f003 f87f 	bl	8006228 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800312a:	4b99      	ldr	r3, [pc, #612]	; (8003390 <main+0x27c>)
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 800312c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003130:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003132:	4898      	ldr	r0, [pc, #608]	; (8003394 <main+0x280>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003134:	f042 0210 	orr.w	r2, r2, #16
 8003138:	619a      	str	r2, [r3, #24]
 800313a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800313c:	2402      	movs	r4, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800313e:	f002 0210 	and.w	r2, r2, #16
 8003142:	9201      	str	r2, [sp, #4]
 8003144:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003146:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800314a:	f042 0220 	orr.w	r2, r2, #32
 800314e:	619a      	str	r2, [r3, #24]
 8003150:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003154:	f002 0220 	and.w	r2, r2, #32
 8003158:	9202      	str	r2, [sp, #8]
 800315a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	f042 0204 	orr.w	r2, r2, #4
 8003162:	619a      	str	r2, [r3, #24]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	f002 0204 	and.w	r2, r2, #4
 800316a:	9203      	str	r2, [sp, #12]
 800316c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	f042 0208 	orr.w	r2, r2, #8
 8003174:	619a      	str	r2, [r3, #24]
 8003176:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003178:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	9304      	str	r3, [sp, #16]
 8003180:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003182:	f001 fae3 	bl	800474c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 8003186:	2200      	movs	r2, #0
 8003188:	f246 0103 	movw	r1, #24579	; 0x6003
 800318c:	4882      	ldr	r0, [pc, #520]	; (8003398 <main+0x284>)
 800318e:	f001 fadd 	bl	800474c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ENAA_Pin|DIRA_Pin, GPIO_PIN_RESET);
 8003192:	2200      	movs	r2, #0
 8003194:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003198:	4880      	ldr	r0, [pc, #512]	; (800339c <main+0x288>)
 800319a:	f001 fad7 	bl	800474c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 80031a2:	487c      	ldr	r0, [pc, #496]	; (8003394 <main+0x280>)
 80031a4:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a6:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 80031ae:	f001 f9f1 	bl	8004594 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin|ENAC_Pin|DIRC_Pin;
 80031b2:	f246 0301 	movw	r3, #24577	; 0x6001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	4878      	ldr	r0, [pc, #480]	; (8003398 <main+0x284>)
 80031b8:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c2:	f001 f9e7 	bl	8004594 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80031c6:	4874      	ldr	r0, [pc, #464]	; (8003398 <main+0x284>)
 80031c8:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ce:	e9cd 4612 	strd	r4, r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80031d2:	f001 f9df 	bl	8004594 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80031d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031da:	4b71      	ldr	r3, [pc, #452]	; (80033a0 <main+0x28c>)
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 80031dc:	486e      	ldr	r0, [pc, #440]	; (8003398 <main+0x284>)
 80031de:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80031e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031e4:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 80031e6:	f001 f9d5 	bl	8004594 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAA_Pin|DIRA_Pin;
 80031ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ee:	486b      	ldr	r0, [pc, #428]	; (800339c <main+0x288>)
 80031f0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f2:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f001 f9cb 	bl	8004594 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031fe:	462a      	mov	r2, r5
 8003200:	4629      	mov	r1, r5
 8003202:	2028      	movs	r0, #40	; 0x28
 8003204:	f001 f972 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003208:	2028      	movs	r0, #40	; 0x28
 800320a:	f001 f9a1 	bl	8004550 <HAL_NVIC_EnableIRQ>
  hcan.Instance = CAN1;
 800320e:	4865      	ldr	r0, [pc, #404]	; (80033a4 <main+0x290>)
 8003210:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <main+0x294>)
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003212:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
  hcan.Init.Prescaler = 2;
 8003216:	e9c0 3400 	strd	r3, r4, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800321a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800321e:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003222:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003226:	8385      	strh	r5, [r0, #28]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003228:	6183      	str	r3, [r0, #24]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800322a:	e9c0 5502 	strd	r5, r5, [r0, #8]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800322e:	f000 ffb9 	bl	80041a4 <HAL_CAN_Init>
 8003232:	4605      	mov	r5, r0
 8003234:	b108      	cbz	r0, 800323a <main+0x126>
 8003236:	b672      	cpsid	i
  while (1)
 8003238:	e7fe      	b.n	8003238 <main+0x124>
  htim1.Init.Prescaler = 71;
 800323a:	2747      	movs	r7, #71	; 0x47
  htim1.Init.Period = 65535;
 800323c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003240:	f04f 0880 	mov.w	r8, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003244:	4601      	mov	r1, r0
 8003246:	2210      	movs	r2, #16
 8003248:	a807      	add	r0, sp, #28
 800324a:	f002 ffed 	bl	8006228 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800324e:	221c      	movs	r2, #28
 8003250:	4629      	mov	r1, r5
 8003252:	a80b      	add	r0, sp, #44	; 0x2c
  htim1.Instance = TIM1;
 8003254:	4c55      	ldr	r4, [pc, #340]	; (80033ac <main+0x298>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003256:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800325a:	f002 ffe5 	bl	8006228 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800325e:	2220      	movs	r2, #32
 8003260:	4629      	mov	r1, r5
 8003262:	a812      	add	r0, sp, #72	; 0x48
 8003264:	f002 ffe0 	bl	8006228 <memset>
  htim1.Init.Prescaler = 71;
 8003268:	4b51      	ldr	r3, [pc, #324]	; (80033b0 <main+0x29c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800326a:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 71;
 800326c:	e9c4 3700 	strd	r3, r7, [r4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003270:	e9c4 6503 	strd	r6, r5, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003274:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8003276:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003278:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800327c:	f001 fdb2 	bl	8004de4 <HAL_TIM_Base_Init>
 8003280:	b108      	cbz	r0, 8003286 <main+0x172>
 8003282:	b672      	cpsid	i
  while (1)
 8003284:	e7fe      	b.n	8003284 <main+0x170>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003286:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800328a:	4620      	mov	r0, r4
 800328c:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328e:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003290:	f001 fe91 	bl	8004fb6 <HAL_TIM_ConfigClockSource>
 8003294:	b108      	cbz	r0, 800329a <main+0x186>
 8003296:	b672      	cpsid	i
  while (1)
 8003298:	e7fe      	b.n	8003298 <main+0x184>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800329a:	4620      	mov	r0, r4
 800329c:	f001 fdce 	bl	8004e3c <HAL_TIM_PWM_Init>
 80032a0:	b108      	cbz	r0, 80032a6 <main+0x192>
 80032a2:	b672      	cpsid	i
  while (1)
 80032a4:	e7fe      	b.n	80032a4 <main+0x190>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a6:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032aa:	a905      	add	r1, sp, #20
 80032ac:	4620      	mov	r0, r4
 80032ae:	f001 ffb3 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 80032b2:	4602      	mov	r2, r0
 80032b4:	b108      	cbz	r0, 80032ba <main+0x1a6>
 80032b6:	b672      	cpsid	i
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <main+0x1a4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ba:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032bc:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80032c0:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032c4:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032c8:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032ca:	a90b      	add	r1, sp, #44	; 0x2c
 80032cc:	4620      	mov	r0, r4
 80032ce:	f001 fe0d 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 80032d2:	b108      	cbz	r0, 80032d8 <main+0x1c4>
 80032d4:	b672      	cpsid	i
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <main+0x1c2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032dc:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80032e0:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032e4:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032e6:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032e8:	a912      	add	r1, sp, #72	; 0x48
 80032ea:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032ec:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032ee:	f001 ffbd 	bl	800526c <HAL_TIMEx_ConfigBreakDeadTime>
 80032f2:	4681      	mov	r9, r0
 80032f4:	b108      	cbz	r0, 80032fa <main+0x1e6>
 80032f6:	b672      	cpsid	i
  while (1)
 80032f8:	e7fe      	b.n	80032f8 <main+0x1e4>
  HAL_TIM_MspPostInit(&htim1);
 80032fa:	4620      	mov	r0, r4
 80032fc:	f000 f8e6 	bl	80034cc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003300:	2210      	movs	r2, #16
 8003302:	4649      	mov	r1, r9
 8003304:	a80b      	add	r0, sp, #44	; 0x2c
 8003306:	f002 ff8f 	bl	8006228 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800330a:	221c      	movs	r2, #28
 800330c:	4649      	mov	r1, r9
 800330e:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003310:	e9cd 9907 	strd	r9, r9, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003314:	f002 ff88 	bl	8006228 <memset>
  htim2.Instance = TIM2;
 8003318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800331c:	4c25      	ldr	r4, [pc, #148]	; (80033b4 <main+0x2a0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800331e:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 71;
 8003320:	e9c4 3700 	strd	r3, r7, [r4]
  htim2.Init.Period = 65535;
 8003324:	e9c4 9602 	strd	r9, r6, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003328:	f8c4 9010 	str.w	r9, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800332c:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003330:	f001 fd58 	bl	8004de4 <HAL_TIM_Base_Init>
 8003334:	b108      	cbz	r0, 800333a <main+0x226>
 8003336:	b672      	cpsid	i
  while (1)
 8003338:	e7fe      	b.n	8003338 <main+0x224>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800333a:	4620      	mov	r0, r4
 800333c:	a90b      	add	r1, sp, #44	; 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800333e:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003340:	f001 fe39 	bl	8004fb6 <HAL_TIM_ConfigClockSource>
 8003344:	b108      	cbz	r0, 800334a <main+0x236>
 8003346:	b672      	cpsid	i
  while (1)
 8003348:	e7fe      	b.n	8003348 <main+0x234>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800334a:	4620      	mov	r0, r4
 800334c:	f001 fd76 	bl	8004e3c <HAL_TIM_PWM_Init>
 8003350:	b108      	cbz	r0, 8003356 <main+0x242>
 8003352:	b672      	cpsid	i
  while (1)
 8003354:	e7fe      	b.n	8003354 <main+0x240>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003356:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003358:	4816      	ldr	r0, [pc, #88]	; (80033b4 <main+0x2a0>)
 800335a:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003360:	f001 ff5a 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8003364:	4602      	mov	r2, r0
 8003366:	b108      	cbz	r0, 800336c <main+0x258>
 8003368:	b672      	cpsid	i
  while (1)
 800336a:	e7fe      	b.n	800336a <main+0x256>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800336c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800336e:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 8003370:	e9cd 3012 	strd	r3, r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003374:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003376:	a912      	add	r1, sp, #72	; 0x48
 8003378:	480e      	ldr	r0, [pc, #56]	; (80033b4 <main+0x2a0>)
 800337a:	f001 fdb7 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 800337e:	b108      	cbz	r0, 8003384 <main+0x270>
 8003380:	b672      	cpsid	i
  while (1)
 8003382:	e7fe      	b.n	8003382 <main+0x26e>
  HAL_TIM_MspPostInit(&htim2);
 8003384:	480b      	ldr	r0, [pc, #44]	; (80033b4 <main+0x2a0>)
 8003386:	f000 f8a1 	bl	80034cc <HAL_TIM_MspPostInit>
  wrapper_cpp();
 800338a:	f000 fd33 	bl	8003df4 <wrapper_cpp>
  while (1)
 800338e:	e7fe      	b.n	800338e <main+0x27a>
 8003390:	40021000 	.word	0x40021000
 8003394:	40011000 	.word	0x40011000
 8003398:	40010c00 	.word	0x40010c00
 800339c:	40010800 	.word	0x40010800
 80033a0:	10310000 	.word	0x10310000
 80033a4:	2000036c 	.word	0x2000036c
 80033a8:	40006400 	.word	0x40006400
 80033ac:	20000394 	.word	0x20000394
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	200003dc 	.word	0x200003dc

080033b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_MspInit+0x3c>)
{
 80033ba:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	619a      	str	r2, [r3, #24]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	f002 0201 	and.w	r2, r2, #1
 80033ca:	9200      	str	r2, [sp, #0]
 80033cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033d4:	61da      	str	r2, [r3, #28]
 80033d6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033d8:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033e2:	6853      	ldr	r3, [r2, #4]
 80033e4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ee:	b002      	add	sp, #8
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40010000 	.word	0x40010000

080033fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80033fc:	b510      	push	{r4, lr}
 80033fe:	4604      	mov	r4, r0
 8003400:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003402:	2210      	movs	r2, #16
 8003404:	2100      	movs	r1, #0
 8003406:	a802      	add	r0, sp, #8
 8003408:	f002 ff0e 	bl	8006228 <memset>
  if(hcan->Instance==CAN1)
 800340c:	6822      	ldr	r2, [r4, #0]
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_CAN_MspInit+0x7c>)
 8003410:	429a      	cmp	r2, r3
 8003412:	d12e      	bne.n	8003472 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003414:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003418:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	4818      	ldr	r0, [pc, #96]	; (800347c <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800341c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003420:	61da      	str	r2, [r3, #28]
 8003422:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003426:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800342a:	9200      	str	r2, [sp, #0]
 800342c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	f042 0208 	orr.w	r2, r2, #8
 8003434:	619a      	str	r2, [r3, #24]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003444:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	f001 f8a5 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344e:	2302      	movs	r3, #2
 8003450:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003454:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003456:	4809      	ldr	r0, [pc, #36]	; (800347c <HAL_CAN_MspInit+0x80>)
 8003458:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f001 f89a 	bl	8004594 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003460:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_CAN_MspInit+0x84>)
 8003462:	6853      	ldr	r3, [r2, #4]
 8003464:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003468:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800346c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003470:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003472:	b006      	add	sp, #24
 8003474:	bd10      	pop	{r4, pc}
 8003476:	bf00      	nop
 8003478:	40006400 	.word	0x40006400
 800347c:	40010c00 	.word	0x40010c00
 8003480:	40010000 	.word	0x40010000

08003484 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003484:	6803      	ldr	r3, [r0, #0]
 8003486:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <HAL_TIM_Base_MspInit+0x40>)
{
 8003488:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10b      	bne.n	80034a6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_TIM_Base_MspInit+0x44>)
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003496:	619a      	str	r2, [r3, #24]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80034a2:	b002      	add	sp, #8
 80034a4:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d1fa      	bne.n	80034a2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	61da      	str	r2, [r3, #28]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	9b01      	ldr	r3, [sp, #4]
}
 80034c2:	e7ee      	b.n	80034a2 <HAL_TIM_Base_MspInit+0x1e>
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40021000 	.word	0x40021000

080034cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034cc:	b510      	push	{r4, lr}
 80034ce:	4604      	mov	r4, r0
 80034d0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d2:	2210      	movs	r2, #16
 80034d4:	2100      	movs	r1, #0
 80034d6:	a802      	add	r0, sp, #8
 80034d8:	f002 fea6 	bl	8006228 <memset>
  if(htim->Instance==TIM1)
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_TIM_MspPostInit+0x64>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d115      	bne.n	8003510 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_TIM_MspPostInit+0x68>)
 80034e6:	699a      	ldr	r2, [r3, #24]
 80034e8:	f042 0204 	orr.w	r2, r2, #4
 80034ec:	619a      	str	r2, [r3, #24]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034f8:	f44f 7380 	mov.w	r3, #256	; 0x100

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <HAL_TIM_MspPostInit+0x6c>)
 8003502:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003508:	f001 f844 	bl	8004594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800350c:	b006      	add	sp, #24
 800350e:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d1fa      	bne.n	800350c <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	f042 0204 	orr.w	r2, r2, #4
 8003520:	619a      	str	r2, [r3, #24]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800352c:	2301      	movs	r3, #1
 800352e:	e7e5      	b.n	80034fc <HAL_TIM_MspPostInit+0x30>
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40010800 	.word	0x40010800

0800353c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800353c:	e7fe      	b.n	800353c <NMI_Handler>

0800353e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800353e:	e7fe      	b.n	800353e <HardFault_Handler>

08003540 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003540:	e7fe      	b.n	8003540 <MemManage_Handler>

08003542 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <BusFault_Handler>

08003544 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003544:	e7fe      	b.n	8003544 <UsageFault_Handler>

08003546 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003546:	4770      	bx	lr

08003548 <DebugMon_Handler>:
 8003548:	4770      	bx	lr

0800354a <PendSV_Handler>:
 800354a:	4770      	bx	lr

0800354c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800354c:	f000 be18 	b.w	8004180 <HAL_IncTick>

08003550 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8003550:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003554:	f001 b900 	b.w	8004758 <HAL_GPIO_EXTI_IRQHandler>

08003558 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003558:	2001      	movs	r0, #1
 800355a:	4770      	bx	lr

0800355c <_kill>:

int _kill(int pid, int sig)
{
 800355c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800355e:	f002 fe01 	bl	8006164 <__errno>
 8003562:	2316      	movs	r3, #22
 8003564:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003566:	f04f 30ff 	mov.w	r0, #4294967295
 800356a:	bd08      	pop	{r3, pc}

0800356c <_exit>:

void _exit (int status)
{
 800356c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800356e:	f002 fdf9 	bl	8006164 <__errno>
 8003572:	2316      	movs	r3, #22
 8003574:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003576:	e7fe      	b.n	8003576 <_exit+0xa>

08003578 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003578:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <_sbrk+0x30>)
{
 800357a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800357c:	6811      	ldr	r1, [r2, #0]
{
 800357e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003580:	b909      	cbnz	r1, 8003586 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <_sbrk+0x34>)
 8003584:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003586:	6810      	ldr	r0, [r2, #0]
 8003588:	4909      	ldr	r1, [pc, #36]	; (80035b0 <_sbrk+0x38>)
 800358a:	4c0a      	ldr	r4, [pc, #40]	; (80035b4 <_sbrk+0x3c>)
 800358c:	4403      	add	r3, r0
 800358e:	1b09      	subs	r1, r1, r4
 8003590:	428b      	cmp	r3, r1
 8003592:	d906      	bls.n	80035a2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003594:	f002 fde6 	bl	8006164 <__errno>
 8003598:	230c      	movs	r3, #12
 800359a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800359c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80035a0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80035a2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80035a4:	e7fc      	b.n	80035a0 <_sbrk+0x28>
 80035a6:	bf00      	nop
 80035a8:	20000424 	.word	0x20000424
 80035ac:	20000450 	.word	0x20000450
 80035b0:	20002800 	.word	0x20002800
 80035b4:	00000400 	.word	0x00000400

080035b8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b8:	4770      	bx	lr
	...

080035bc <_ZL22common_target_callbackfRN11stepping_md10ParametersE>:

		if(current_param.mode == MD_MODE::POS || is_disabled_to_be_set) motor.reset_position();
	}
}

void common_target_callback(float value, Parameters& param){
 80035bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80035be:	4605      	mov	r5, r0
	MotorParam current_param = param.get_motor_param();
 80035c0:	a801      	add	r0, sp, #4
void common_target_callback(float value, Parameters& param){
 80035c2:	460c      	mov	r4, r1
	MotorParam current_param = param.get_motor_param();
 80035c4:	f7ff fc62 	bl	8002e8c <_ZN11stepping_md10Parameters15get_motor_paramEv>
	const bool is_disabled = current_param.mode == MD_MODE::DEFAULT || current_param.mode == MD_MODE::DISABLE;
	if((!IS_EMERGENCY()) && (!is_disabled)){
 80035c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <_ZL22common_target_callbackfRN11stepping_md10ParametersE+0x2c>)
	const bool is_disabled = current_param.mode == MD_MODE::DEFAULT || current_param.mode == MD_MODE::DISABLE;
 80035ce:	9e01      	ldr	r6, [sp, #4]
	if((!IS_EMERGENCY()) && (!is_disabled)){
 80035d0:	f001 f8b6 	bl	8004740 <HAL_GPIO_ReadPin>
 80035d4:	b130      	cbz	r0, 80035e4 <_ZL22common_target_callbackfRN11stepping_md10ParametersE+0x28>
 80035d6:	2e01      	cmp	r6, #1
 80035d8:	d904      	bls.n	80035e4 <_ZL22common_target_callbackfRN11stepping_md10ParametersE+0x28>
		current_param.target = value;
		param.set_motor_param(current_param);
 80035da:	4620      	mov	r0, r4
 80035dc:	a901      	add	r1, sp, #4
		current_param.target = value;
 80035de:	9503      	str	r5, [sp, #12]
		param.set_motor_param(current_param);
 80035e0:	f7ff fc5b 	bl	8002e9a <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	}
}
 80035e4:	b004      	add	sp, #16
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	40010c00 	.word	0x40010c00

080035ec <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E9_M_invokeERKSt9_Any_dataOfOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80035ec:	b508      	push	{r3, lr}
 80035ee:	460b      	mov	r3, r1
				common_target_callback(value, parameters[A]);
 80035f0:	6801      	ldr	r1, [r0, #0]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f7ff ffe2 	bl	80035bc <_ZL22common_target_callbackfRN11stepping_md10ParametersE>
      }
 80035f8:	2000      	movs	r0, #0
 80035fa:	bd08      	pop	{r3, pc}

080035fc <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E9_M_invokeERKSt9_Any_dataOfOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80035fc:	b508      	push	{r3, lr}
 80035fe:	460b      	mov	r3, r1
				common_target_callback(value, parameters[C]);
 8003600:	6801      	ldr	r1, [r0, #0]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	3110      	adds	r1, #16
 8003606:	f7ff ffd9 	bl	80035bc <_ZL22common_target_callbackfRN11stepping_md10ParametersE>
      }
 800360a:	2000      	movs	r0, #0
 800360c:	bd08      	pop	{r3, pc}
	...

08003610 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE>:
	const bool is_appropriate_val = value == 0 || value == 1 || value == 4;
 8003610:	2801      	cmp	r0, #1
void common_cmd_callback(uint8_t value, Parameters& param, MotorController& motor){
 8003612:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003616:	4604      	mov	r4, r0
 8003618:	460d      	mov	r5, r1
 800361a:	4616      	mov	r6, r2
	const bool is_appropriate_val = value == 0 || value == 1 || value == 4;
 800361c:	d92e      	bls.n	800367c <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x6c>
 800361e:	1f03      	subs	r3, r0, #4
 8003620:	425f      	negs	r7, r3
 8003622:	415f      	adcs	r7, r3
	const bool is_same_mode = static_cast<MD_MODE>(value) == param.get_motor_param().mode;
 8003624:	4629      	mov	r1, r5
 8003626:	a801      	add	r0, sp, #4
 8003628:	f7ff fc30 	bl	8002e8c <_ZN11stepping_md10Parameters15get_motor_paramEv>
	if(!IS_EMERGENCY() && is_appropriate_val && (!is_same_mode)){
 800362c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003630:	4816      	ldr	r0, [pc, #88]	; (800368c <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x7c>)
	const bool is_same_mode = static_cast<MD_MODE>(value) == param.get_motor_param().mode;
 8003632:	f8dd 8004 	ldr.w	r8, [sp, #4]
	if(!IS_EMERGENCY() && is_appropriate_val && (!is_same_mode)){
 8003636:	f001 f883 	bl	8004740 <HAL_GPIO_ReadPin>
 800363a:	b1e0      	cbz	r0, 8003676 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x66>
 800363c:	b1df      	cbz	r7, 8003676 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x66>
 800363e:	4544      	cmp	r4, r8
 8003640:	d019      	beq.n	8003676 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x66>
		MotorParam current_param = param.get_motor_param();
 8003642:	4629      	mov	r1, r5
 8003644:	a801      	add	r0, sp, #4
 8003646:	f7ff fc21 	bl	8002e8c <_ZN11stepping_md10Parameters15get_motor_paramEv>
		if(is_disabled_now && (!is_disabled_to_be_set)) led_mgr::increase_enabled_motor();
 800364a:	9b01      	ldr	r3, [sp, #4]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d817      	bhi.n	8003680 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x70>
 8003650:	2c01      	cmp	r4, #1
 8003652:	d901      	bls.n	8003658 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x48>
 8003654:	f7ff fd08 	bl	8003068 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv>
		current_param.target = 0;
 8003658:	2300      	movs	r3, #0
		param.set_motor_param(current_param);
 800365a:	4628      	mov	r0, r5
 800365c:	a901      	add	r1, sp, #4
		current_param.target = 0;
 800365e:	9303      	str	r3, [sp, #12]
		current_param.mode = static_cast<MD_MODE>(value);
 8003660:	9401      	str	r4, [sp, #4]
		param.set_motor_param(current_param);
 8003662:	f7ff fc1a 	bl	8002e9a <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
		if(current_param.mode == MD_MODE::POS || is_disabled_to_be_set) motor.reset_position();
 8003666:	9b01      	ldr	r3, [sp, #4]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d001      	beq.n	8003670 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x60>
 800366c:	2c01      	cmp	r4, #1
 800366e:	d802      	bhi.n	8003676 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x66>
 8003670:	4630      	mov	r0, r6
 8003672:	f7ff fbbf 	bl	8002df4 <_ZN11stepping_md15MotorController14reset_positionEv>
}
 8003676:	b004      	add	sp, #16
 8003678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const bool is_appropriate_val = value == 0 || value == 1 || value == 4;
 800367c:	2701      	movs	r7, #1
 800367e:	e7d1      	b.n	8003624 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x14>
		else if((!is_disabled_now) && is_disabled_to_be_set) led_mgr::decrease_enabled_motor();
 8003680:	2c01      	cmp	r4, #1
 8003682:	d8e9      	bhi.n	8003658 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x48>
 8003684:	f7ff fd06 	bl	8003094 <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv>
 8003688:	e7e6      	b.n	8003658 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE+0x48>
 800368a:	bf00      	nop
 800368c:	40010c00 	.word	0x40010c00

08003690 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E9_M_invokeERKSt9_Any_dataOhOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003690:	b508      	push	{r3, lr}
 8003692:	460b      	mov	r3, r1
				common_cmd_callback(value, parameters[A], motors[A]);
 8003694:	e9d0 1200 	ldrd	r1, r2, [r0]
 8003698:	7818      	ldrb	r0, [r3, #0]
 800369a:	f7ff ffb9 	bl	8003610 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE>
      }
 800369e:	2000      	movs	r0, #0
 80036a0:	bd08      	pop	{r3, pc}

080036a2 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E9_M_invokeERKSt9_Any_dataOhOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80036a2:	b508      	push	{r3, lr}
 80036a4:	460b      	mov	r3, r1
				common_cmd_callback(value, parameters[C], motors[C]);
 80036a6:	e9d0 1200 	ldrd	r1, r2, [r0]
 80036aa:	7818      	ldrb	r0, [r3, #0]
 80036ac:	3234      	adds	r2, #52	; 0x34
 80036ae:	3110      	adds	r1, #16
 80036b0:	f7ff ffae 	bl	8003610 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE>
      }
 80036b4:	2000      	movs	r0, #0
 80036b6:	bd08      	pop	{r3, pc}

080036b8 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80036b8:	4613      	mov	r3, r2
	  if (_Num)
 80036ba:	1a0a      	subs	r2, r1, r0
 80036bc:	d003      	beq.n	80036c6 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0+0xe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80036be:	4601      	mov	r1, r0
 80036c0:	1a98      	subs	r0, r3, r2
 80036c2:	f002 bd97 	b.w	80061f4 <memmove>
    }
 80036c6:	4770      	bx	lr

080036c8 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80036c8:	b507      	push	{r0, r1, r2, lr}
 80036ca:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 80036cc:	6800      	ldr	r0, [r0, #0]

			//Canからの受信があったときに呼ばれる関数を登録する関数
			template<typename T>
			void set_callback(const std::function<int(T, uint32_t)> callback){
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
					return callback(*reinterpret_cast<T*>(pValue), id);
 80036ce:	680a      	ldr	r2, [r1, #0]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 80036d4:	6883      	ldr	r3, [r0, #8]
 80036d6:	9200      	str	r2, [sp, #0]
 80036d8:	b90b      	cbnz	r3, 80036de <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om+0x16>
	__throw_bad_function_call();
 80036da:	f002 fca7 	bl	800602c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80036de:	4669      	mov	r1, sp
 80036e0:	68c3      	ldr	r3, [r0, #12]
 80036e2:	aa01      	add	r2, sp, #4
 80036e4:	4798      	blx	r3
      }
 80036e6:	b003      	add	sp, #12
 80036e8:	f85d fb04 	ldr.w	pc, [sp], #4

080036ec <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 80036ec:	b12a      	cbz	r2, 80036fa <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 80036ee:	2a01      	cmp	r2, #1
 80036f0:	d006      	beq.n	8003700 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 80036f2:	2a02      	cmp	r2, #2
 80036f4:	d105      	bne.n	8003702 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 80036f6:	680b      	ldr	r3, [r1, #0]
 80036f8:	e000      	b.n	80036fc <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80036fa:	4b03      	ldr	r3, [pc, #12]	; (8003708 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 80036fc:	6003      	str	r3, [r0, #0]
	      break;
 80036fe:	e000      	b.n	8003702 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003700:	6001      	str	r1, [r0, #0]
      }
 8003702:	2000      	movs	r0, #0
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	08006820 	.word	0x08006820

0800370c <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 800370c:	b12a      	cbz	r2, 800371a <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 800370e:	2a01      	cmp	r2, #1
 8003710:	d006      	beq.n	8003720 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 8003712:	2a02      	cmp	r2, #2
 8003714:	d105      	bne.n	8003722 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 8003716:	680b      	ldr	r3, [r1, #0]
 8003718:	e000      	b.n	800371c <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800371a:	4b03      	ldr	r3, [pc, #12]	; (8003728 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 800371c:	6003      	str	r3, [r0, #0]
	      break;
 800371e:	e000      	b.n	8003722 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003720:	6001      	str	r1, [r0, #0]
      }
 8003722:	2000      	movs	r0, #0
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	08006818 	.word	0x08006818

0800372c <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800372c:	4603      	mov	r3, r0
	switch (__op)
 800372e:	b142      	cbz	r2, 8003742 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 8003730:	2a01      	cmp	r2, #1
 8003732:	d00a      	beq.n	800374a <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1e>
	  switch (__op)
 8003734:	2a02      	cmp	r2, #2
 8003736:	bf04      	itt	eq
 8003738:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 800373c:	e9c3 0100 	strdeq	r0, r1, [r3]
	      break;
 8003740:	e001      	b.n	8003746 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8003742:	4a03      	ldr	r2, [pc, #12]	; (8003750 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x24>)
 8003744:	6002      	str	r2, [r0, #0]
      }
 8003746:	2000      	movs	r0, #0
 8003748:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800374a:	6001      	str	r1, [r0, #0]
	    break;
 800374c:	e7fb      	b.n	8003746 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
 800374e:	bf00      	nop
 8003750:	08006828 	.word	0x08006828

08003754 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003754:	4603      	mov	r3, r0
	switch (__op)
 8003756:	b142      	cbz	r2, 800376a <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 8003758:	2a01      	cmp	r2, #1
 800375a:	d00a      	beq.n	8003772 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1e>
	  switch (__op)
 800375c:	2a02      	cmp	r2, #2
 800375e:	bf04      	itt	eq
 8003760:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 8003764:	e9c3 0100 	strdeq	r0, r1, [r3]
	      break;
 8003768:	e001      	b.n	800376e <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800376a:	4a03      	ldr	r2, [pc, #12]	; (8003778 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x24>)
 800376c:	6002      	str	r2, [r0, #0]
      }
 800376e:	2000      	movs	r0, #0
 8003770:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003772:	6001      	str	r1, [r0, #0]
	    break;
 8003774:	e7fb      	b.n	800376e <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
 8003776:	bf00      	nop
 8003778:	08006830 	.word	0x08006830

0800377c <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800377c:	b507      	push	{r0, r1, r2, lr}
 800377e:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 8003780:	6800      	ldr	r0, [r0, #0]
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003782:	680a      	ldr	r2, [r1, #0]
 8003784:	7812      	ldrb	r2, [r2, #0]
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
 8003786:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 8003788:	6883      	ldr	r3, [r0, #8]
 800378a:	f88d 2003 	strb.w	r2, [sp, #3]
 800378e:	b90b      	cbnz	r3, 8003794 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om+0x18>
	__throw_bad_function_call();
 8003790:	f002 fc4c 	bl	800602c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003794:	68c3      	ldr	r3, [r0, #12]
 8003796:	aa01      	add	r2, sp, #4
 8003798:	f10d 0103 	add.w	r1, sp, #3
 800379c:	4798      	blx	r3
      }
 800379e:	b003      	add	sp, #12
 80037a0:	f85d fb04 	ldr.w	pc, [sp], #4

080037a4 <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
 80037a4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80037a6:	b510      	push	{r4, lr}
 80037a8:	4604      	mov	r4, r0
      if (_M_manager)
 80037aa:	b113      	cbz	r3, 80037b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80037ac:	2203      	movs	r2, #3
 80037ae:	4601      	mov	r1, r0
 80037b0:	4798      	blx	r3
    }
 80037b2:	4620      	mov	r0, r4
 80037b4:	bd10      	pop	{r4, pc}
	...

080037b8 <HAL_GPIO_EXTI_Callback>:
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
	return result;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == EMS_Pin){
 80037b8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80037bc:	4601      	mov	r1, r0
 80037be:	b508      	push	{r3, lr}
	if(GPIO_Pin == EMS_Pin){
 80037c0:	d106      	bne.n	80037d0 <HAL_GPIO_EXTI_Callback+0x18>
		if(IS_EMERGENCY()) error_request_flag = true;
 80037c2:	4805      	ldr	r0, [pc, #20]	; (80037d8 <HAL_GPIO_EXTI_Callback+0x20>)
 80037c4:	f000 ffbc 	bl	8004740 <HAL_GPIO_ReadPin>
 80037c8:	2301      	movs	r3, #1
 80037ca:	b910      	cbnz	r0, 80037d2 <HAL_GPIO_EXTI_Callback+0x1a>
 80037cc:	4a03      	ldr	r2, [pc, #12]	; (80037dc <HAL_GPIO_EXTI_Callback+0x24>)
		else recovery_request_flag = true;
 80037ce:	7013      	strb	r3, [r2, #0]
	}
}
 80037d0:	bd08      	pop	{r3, pc}
		else recovery_request_flag = true;
 80037d2:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <HAL_GPIO_EXTI_Callback+0x28>)
 80037d4:	e7fb      	b.n	80037ce <HAL_GPIO_EXTI_Callback+0x16>
 80037d6:	bf00      	nop
 80037d8:	40010c00 	.word	0x40010c00
 80037dc:	20000428 	.word	0x20000428
 80037e0:	20000429 	.word	0x20000429

080037e4 <_ZNSt8functionIFihmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 80037e4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80037e6:	2300      	movs	r3, #0
 80037e8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80037ea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80037ec:	4604      	mov	r4, r0
 80037ee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80037f0:	b12b      	cbz	r3, 80037fe <_ZNSt8functionIFihmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80037f2:	2202      	movs	r2, #2
 80037f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80037f6:	68eb      	ldr	r3, [r5, #12]
 80037f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80037fa:	68ab      	ldr	r3, [r5, #8]
 80037fc:	60a3      	str	r3, [r4, #8]
    }
 80037fe:	4620      	mov	r0, r4
 8003800:	bd38      	pop	{r3, r4, r5, pc}
    : _Function_base()
 8003802:	4620      	mov	r0, r4
 8003804:	f7ff ffce 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 8003808:	f001 fdcc 	bl	80053a4 <__cxa_end_cleanup>

0800380c <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	4604      	mov	r4, r0
	switch (__op)
 8003810:	b17a      	cbz	r2, 8003832 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x26>
 8003812:	2a01      	cmp	r2, #1
 8003814:	d011      	beq.n	800383a <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
	  switch (__op)
 8003816:	2a02      	cmp	r2, #2
 8003818:	d011      	beq.n	800383e <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
 800381a:	2a03      	cmp	r2, #3
 800381c:	d10b      	bne.n	8003836 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 800381e:	6804      	ldr	r4, [r0, #0]
 8003820:	b14c      	cbz	r4, 8003836 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff ffbe 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8003828:	2110      	movs	r1, #16
 800382a:	4620      	mov	r0, r4
 800382c:	f001 fdb8 	bl	80053a0 <_ZdlPvj>
 8003830:	e001      	b.n	8003836 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003834:	6023      	str	r3, [r4, #0]
      }
 8003836:	2000      	movs	r0, #0
 8003838:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 800383a:	680b      	ldr	r3, [r1, #0]
 800383c:	e7fa      	b.n	8003834 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	    new _Functor(*__source._M_access<const _Functor*>());
 800383e:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8003840:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8003842:	f002 f908 	bl	8005a56 <_Znwj>
 8003846:	4631      	mov	r1, r6
 8003848:	4605      	mov	r5, r0
 800384a:	f7ff ffcb 	bl	80037e4 <_ZNSt8functionIFihmEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 800384e:	6025      	str	r5, [r4, #0]
	}
 8003850:	e7f1      	b.n	8003836 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    new _Functor(*__source._M_access<const _Functor*>());
 8003852:	2110      	movs	r1, #16
 8003854:	4628      	mov	r0, r5
 8003856:	f001 fda3 	bl	80053a0 <_ZdlPvj>
 800385a:	f001 fda3 	bl	80053a4 <__cxa_end_cleanup>
 800385e:	bf00      	nop
 8003860:	080067b8 	.word	0x080067b8

08003864 <_ZNSt8functionIFifmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8003864:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8003866:	2300      	movs	r3, #0
 8003868:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 800386a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 800386c:	4604      	mov	r4, r0
 800386e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8003870:	b12b      	cbz	r3, 800387e <_ZNSt8functionIFifmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8003872:	2202      	movs	r2, #2
 8003874:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8003876:	68eb      	ldr	r3, [r5, #12]
 8003878:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 800387a:	68ab      	ldr	r3, [r5, #8]
 800387c:	60a3      	str	r3, [r4, #8]
    }
 800387e:	4620      	mov	r0, r4
 8003880:	bd38      	pop	{r3, r4, r5, pc}
    : _Function_base()
 8003882:	4620      	mov	r0, r4
 8003884:	f7ff ff8e 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 8003888:	f001 fd8c 	bl	80053a4 <__cxa_end_cleanup>

0800388c <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4604      	mov	r4, r0
	switch (__op)
 8003890:	b17a      	cbz	r2, 80038b2 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x26>
 8003892:	2a01      	cmp	r2, #1
 8003894:	d011      	beq.n	80038ba <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
	  switch (__op)
 8003896:	2a02      	cmp	r2, #2
 8003898:	d011      	beq.n	80038be <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
 800389a:	2a03      	cmp	r2, #3
 800389c:	d10b      	bne.n	80038b6 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 800389e:	6804      	ldr	r4, [r0, #0]
 80038a0:	b14c      	cbz	r4, 80038b6 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ff7e 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80038a8:	2110      	movs	r1, #16
 80038aa:	4620      	mov	r0, r4
 80038ac:	f001 fd78 	bl	80053a0 <_ZdlPvj>
 80038b0:	e001      	b.n	80038b6 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80038b4:	6023      	str	r3, [r4, #0]
      }
 80038b6:	2000      	movs	r0, #0
 80038b8:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 80038ba:	680b      	ldr	r3, [r1, #0]
 80038bc:	e7fa      	b.n	80038b4 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	    new _Functor(*__source._M_access<const _Functor*>());
 80038be:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 80038c0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80038c2:	f002 f8c8 	bl	8005a56 <_Znwj>
 80038c6:	4631      	mov	r1, r6
 80038c8:	4605      	mov	r5, r0
 80038ca:	f7ff ffcb 	bl	8003864 <_ZNSt8functionIFifmEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 80038ce:	6025      	str	r5, [r4, #0]
	}
 80038d0:	e7f1      	b.n	80038b6 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    new _Functor(*__source._M_access<const _Functor*>());
 80038d2:	2110      	movs	r1, #16
 80038d4:	4628      	mov	r0, r5
 80038d6:	f001 fd63 	bl	80053a0 <_ZdlPvj>
 80038da:	f001 fd63 	bl	80053a4 <__cxa_end_cleanup>
 80038de:	bf00      	nop
 80038e0:	08006810 	.word	0x08006810

080038e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80038e4:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80038e6:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80038e8:	460b      	mov	r3, r1
 80038ea:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80038ec:	c803      	ldmia	r0, {r0, r1}
 80038ee:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80038f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038f6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80038fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8003902:	b002      	add	sp, #8
 8003904:	bd10      	pop	{r4, pc}
	...

08003908 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE>:
			void set_callback(const std::function<int(T, uint32_t)> callback){
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4604      	mov	r4, r0
 800390c:	b08c      	sub	sp, #48	; 0x30
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
 800390e:	4668      	mov	r0, sp
 8003910:	f7ff ff68 	bl	80037e4 <_ZNSt8functionIFihmEEC1ERKS1_>
 8003914:	4669      	mov	r1, sp
 8003916:	a808      	add	r0, sp, #32
 8003918:	1d26      	adds	r6, r4, #4
 800391a:	f7ff ff63 	bl	80037e4 <_ZNSt8functionIFihmEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
 800391e:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8003920:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 8003922:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8003924:	f002 f897 	bl	8005a56 <_Znwj>
 8003928:	a908      	add	r1, sp, #32
 800392a:	4605      	mov	r5, r0
 800392c:	f7ff ff5a 	bl	80037e4 <_ZNSt8functionIFihmEEC1ERKS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x84>)
	std::swap(_M_functor, __x._M_functor);
 8003932:	4631      	mov	r1, r6
	    _M_invoker = &_My_handler::_M_invoke;
 8003934:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x88>)
	std::swap(_M_functor, __x._M_functor);
 8003938:	a804      	add	r0, sp, #16
	    _M_manager = &_My_handler::_M_manager;
 800393a:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800393c:	9504      	str	r5, [sp, #16]
	std::swap(_M_functor, __x._M_functor);
 800393e:	f7ff ffd1 	bl	80038e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003942:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8003944:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8003946:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003948:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 800394a:	9206      	str	r2, [sp, #24]
 800394c:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 800394e:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8003950:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8003952:	9207      	str	r2, [sp, #28]
 8003954:	f7ff ff26 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 8003958:	a808      	add	r0, sp, #32
 800395a:	f7ff ff23 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 800395e:	4668      	mov	r0, sp
 8003960:	f7ff ff20 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
				};
			}
 8003964:	b00c      	add	sp, #48	; 0x30
 8003966:	bd70      	pop	{r4, r5, r6, pc}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8003968:	2110      	movs	r1, #16
 800396a:	4628      	mov	r0, r5
 800396c:	f001 fd18 	bl	80053a0 <_ZdlPvj>
      : _Function_base()
 8003970:	a804      	add	r0, sp, #16
 8003972:	f7ff ff17 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
    class function<_Res(_ArgTypes...)>
 8003976:	a808      	add	r0, sp, #32
 8003978:	f7ff ff14 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 800397c:	4668      	mov	r0, sp
 800397e:	f7ff ff11 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 8003982:	f001 fd0f 	bl	80053a4 <__cxa_end_cleanup>
 8003986:	e7f3      	b.n	8003970 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x68>
 8003988:	e7f8      	b.n	800397c <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x74>
 800398a:	bf00      	nop
 800398c:	0800377d 	.word	0x0800377d
 8003990:	0800380d 	.word	0x0800380d

08003994 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE>:
			void set_callback(const std::function<int(T, uint32_t)> callback){
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	4604      	mov	r4, r0
 8003998:	b08c      	sub	sp, #48	; 0x30
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
 800399a:	4668      	mov	r0, sp
 800399c:	f7ff ff62 	bl	8003864 <_ZNSt8functionIFifmEEC1ERKS1_>
 80039a0:	4669      	mov	r1, sp
 80039a2:	a808      	add	r0, sp, #32
 80039a4:	1d26      	adds	r6, r4, #4
 80039a6:	f7ff ff5d 	bl	8003864 <_ZNSt8functionIFifmEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
 80039aa:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80039ac:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 80039ae:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80039b0:	f002 f851 	bl	8005a56 <_Znwj>
 80039b4:	a908      	add	r1, sp, #32
 80039b6:	4605      	mov	r5, r0
 80039b8:	f7ff ff54 	bl	8003864 <_ZNSt8functionIFifmEEC1ERKS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 80039bc:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x84>)
	std::swap(_M_functor, __x._M_functor);
 80039be:	4631      	mov	r1, r6
	    _M_invoker = &_My_handler::_M_invoke;
 80039c0:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x88>)
	std::swap(_M_functor, __x._M_functor);
 80039c4:	a804      	add	r0, sp, #16
	    _M_manager = &_My_handler::_M_manager;
 80039c6:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80039c8:	9504      	str	r5, [sp, #16]
	std::swap(_M_functor, __x._M_functor);
 80039ca:	f7ff ff8b 	bl	80038e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80039ce:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80039d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80039d2:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80039d4:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80039d6:	9206      	str	r2, [sp, #24]
 80039d8:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 80039da:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80039dc:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80039de:	9207      	str	r2, [sp, #28]
 80039e0:	f7ff fee0 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 80039e4:	a808      	add	r0, sp, #32
 80039e6:	f7ff fedd 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 80039ea:	4668      	mov	r0, sp
 80039ec:	f7ff feda 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
			}
 80039f0:	b00c      	add	sp, #48	; 0x30
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80039f4:	2110      	movs	r1, #16
 80039f6:	4628      	mov	r0, r5
 80039f8:	f001 fcd2 	bl	80053a0 <_ZdlPvj>
      : _Function_base()
 80039fc:	a804      	add	r0, sp, #16
 80039fe:	f7ff fed1 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
    class function<_Res(_ArgTypes...)>
 8003a02:	a808      	add	r0, sp, #32
 8003a04:	f7ff fece 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 8003a08:	4668      	mov	r0, sp
 8003a0a:	f7ff fecb 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 8003a0e:	f001 fcc9 	bl	80053a4 <__cxa_end_cleanup>
 8003a12:	e7f3      	b.n	80039fc <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x68>
 8003a14:	e7f8      	b.n	8003a08 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x74>
 8003a16:	bf00      	nop
 8003a18:	080036c9 	.word	0x080036c9
 8003a1c:	0800388d 	.word	0x0800388d

08003a20 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 8003a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a22:	460e      	mov	r6, r1
 8003a24:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 8003a26:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8003a28:	4604      	mov	r4, r0
 8003a2a:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 8003a2e:	d01e      	beq.n	8003a6e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8003a30:	1c41      	adds	r1, r0, #1
 8003a32:	42b1      	cmp	r1, r6
 8003a34:	d01b      	beq.n	8003a6e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003a36:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 8003a38:	7823      	ldrb	r3, [r4, #0]
 8003a3a:	f815 7b01 	ldrb.w	r7, [r5], #1
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	f007 0203 	and.w	r2, r7, #3
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d206      	bcs.n	8003a58 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f7ff fe33 	bl	80036b8 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8003a52:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8003a54:	4629      	mov	r1, r5
 8003a56:	e7ec      	b.n	8003a32 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 8003a58:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 8003a5c:	f003 0003 	and.w	r0, r3, #3
 8003a60:	4282      	cmp	r2, r0
 8003a62:	d202      	bcs.n	8003a6a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 8003a64:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8003a68:	e7f6      	b.n	8003a58 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 8003a6a:	700f      	strb	r7, [r1, #0]
    }
 8003a6c:	e7f2      	b.n	8003a54 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 8003a6e:	b003      	add	sp, #12
 8003a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a72 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8003a72:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8003a74:	1e54      	subs	r4, r2, #1
 8003a76:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8003a7a:	1065      	asrs	r5, r4, #1
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	42a5      	cmp	r5, r4
 8003a80:	dd13      	ble.n	8003aaa <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 8003a82:	1c67      	adds	r7, r4, #1
 8003a84:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8003a88:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8003a8a:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 8003a8e:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8003a92:	f00c 0c03 	and.w	ip, ip, #3
 8003a96:	f007 0703 	and.w	r7, r7, #3
 8003a9a:	45bc      	cmp	ip, r7
	    __secondChild--;
 8003a9c:	bf88      	it	hi
 8003a9e:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003aa2:	5d87      	ldrb	r7, [r0, r6]
 8003aa4:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 8003aa6:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 8003aa8:	e7e9      	b.n	8003a7e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003aaa:	07d5      	lsls	r5, r2, #31
 8003aac:	d40d      	bmi.n	8003aca <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 8003aae:	3a02      	subs	r2, #2
 8003ab0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8003ab4:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8003ab8:	d107      	bne.n	8003aca <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 8003aba:	1c62      	adds	r2, r4, #1
 8003abc:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8003abe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003ac2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8003ac6:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 8003ac8:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8003aca:	1e62      	subs	r2, r4, #1
 8003acc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8003ad0:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003ad2:	f003 0603 	and.w	r6, r3, #3
 8003ad6:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003ad8:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003adc:	da0b      	bge.n	8003af6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 8003ade:	5c84      	ldrb	r4, [r0, r2]
 8003ae0:	f004 0703 	and.w	r7, r4, #3
 8003ae4:	42b7      	cmp	r7, r6
 8003ae6:	d206      	bcs.n	8003af6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003ae8:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 8003aea:	1e54      	subs	r4, r2, #1
 8003aec:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8003af0:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8003af2:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003af4:	e7ef      	b.n	8003ad6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8003af6:	702b      	strb	r3, [r5, #0]
    }
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003afa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8003afa:	b082      	sub	sp, #8
 8003afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b00:	4604      	mov	r4, r0
 8003b02:	460d      	mov	r5, r1
 8003b04:	4617      	mov	r7, r2
 8003b06:	b087      	sub	sp, #28
 8003b08:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8003b0a:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 8003b0e:	1b2e      	subs	r6, r5, r4
 8003b10:	2e10      	cmp	r6, #16
 8003b12:	dd29      	ble.n	8003b68 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 8003b14:	bb6f      	cbnz	r7, 8003b72 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 8003b16:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8003b1a:	f10d 0808 	add.w	r8, sp, #8
 8003b1e:	f10d 0910 	add.w	r9, sp, #16
 8003b22:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8003b26:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8003b2a:	1eb7      	subs	r7, r6, #2
 8003b2c:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8003b2e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8003b32:	4632      	mov	r2, r6
 8003b34:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003b38:	5de3      	ldrb	r3, [r4, r7]
 8003b3a:	4639      	mov	r1, r7
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff ff98 	bl	8003a72 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8003b42:	b10f      	cbz	r7, 8003b48 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 8003b44:	3f01      	subs	r7, #1
      while (true)
 8003b46:	e7f2      	b.n	8003b2e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8003b48:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8003b4c:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8003b4e:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8003b50:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8003b54:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8003b56:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003b5a:	4632      	mov	r2, r6
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff ff87 	bl	8003a72 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 8003b64:	2e01      	cmp	r6, #1
 8003b66:	dcef      	bgt.n	8003b48 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 8003b68:	b007      	add	sp, #28
 8003b6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b6e:	b002      	add	sp, #8
 8003b70:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8003b72:	1076      	asrs	r6, r6, #1
 8003b74:	f894 e001 	ldrb.w	lr, [r4, #1]
 8003b78:	5da1      	ldrb	r1, [r4, r6]
 8003b7a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8003b7e:	f00e 0903 	and.w	r9, lr, #3
 8003b82:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 8003b86:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003b88:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 8003b8a:	f107 37ff 	add.w	r7, r7, #4294967295
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003b8e:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 8003b92:	d229      	bcs.n	8003be8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 8003b94:	4594      	cmp	ip, r2
 8003b96:	d221      	bcs.n	8003bdc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 8003b98:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003b9a:	55a3      	strb	r3, [r4, r6]
 8003b9c:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8003b9e:	462b      	mov	r3, r5
 8003ba0:	4616      	mov	r6, r2
 8003ba2:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003ba4:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003ba8:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 8003bac:	f00c 0003 	and.w	r0, ip, #3
 8003bb0:	4288      	cmp	r0, r1
 8003bb2:	d3f5      	bcc.n	8003ba0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 8003bb4:	1e58      	subs	r0, r3, #1
 8003bb6:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003bb8:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 8003bbc:	f00e 0903 	and.w	r9, lr, #3
 8003bc0:	4549      	cmp	r1, r9
 8003bc2:	d3f8      	bcc.n	8003bb6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 8003bc4:	429e      	cmp	r6, r3
 8003bc6:	d318      	bcc.n	8003bfa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8003bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bca:	4629      	mov	r1, r5
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	463a      	mov	r2, r7
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bd4:	f7ff ff91 	bl	8003afa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 8003bd8:	4635      	mov	r5, r6
 8003bda:	e798      	b.n	8003b0e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 8003bdc:	4591      	cmp	r9, r2
 8003bde:	d205      	bcs.n	8003bec <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 8003be0:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003be2:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 8003be6:	e7d9      	b.n	8003b9c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 8003be8:	4591      	cmp	r9, r2
 8003bea:	d203      	bcs.n	8003bf4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8003bec:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8003bf0:	7063      	strb	r3, [r4, #1]
 8003bf2:	e7d3      	b.n	8003b9c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 8003bf4:	4594      	cmp	ip, r2
 8003bf6:	d2cf      	bcs.n	8003b98 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 8003bf8:	e7f2      	b.n	8003be0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 8003bfa:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 8003bfe:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 8003c02:	e7cd      	b.n	8003ba0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

08003c04 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8003c04:	688b      	ldr	r3, [r1, #8]
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003c06:	b5f0      	push	{r4, r5, r6, r7, lr}
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003c08:	2800      	cmp	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003c0a:	4614      	mov	r4, r2
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2220      	moveq	r2, #32
 8003c10:	2200      	movne	r2, #0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	bf0c      	ite	eq
 8003c16:	2310      	moveq	r3, #16
 8003c18:	2300      	movne	r3, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003c1a:	460d      	mov	r5, r1
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003c1c:	68a1      	ldr	r1, [r4, #8]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003c1e:	2802      	cmp	r0, #2
 8003c20:	ea42 0203 	orr.w	r2, r2, r3
 8003c24:	bf34      	ite	cc
 8003c26:	2320      	movcc	r3, #32
 8003c28:	2300      	movcs	r3, #0
 8003c2a:	2901      	cmp	r1, #1
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2110      	moveq	r1, #16
 8003c30:	2100      	movne	r1, #0
 8003c32:	430b      	orrs	r3, r1
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003c34:	b08d      	sub	sp, #52	; 0x34
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003c36:	f043 0305 	orr.w	r3, r3, #5
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8003c3a:	f88d 3015 	strb.w	r3, [sp, #21]
 8003c3e:	f04f 0300 	mov.w	r3, #0
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003c42:	f042 0204 	orr.w	r2, r2, #4
 8003c46:	ae0a      	add	r6, sp, #40	; 0x28
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8003c48:	f88d 2014 	strb.w	r2, [sp, #20]
 8003c4c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003c50:	f88d 3020 	strb.w	r3, [sp, #32]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8003c54:	a805      	add	r0, sp, #20
 8003c56:	ab08      	add	r3, sp, #32
 8003c58:	4632      	mov	r2, r6
 8003c5a:	f10d 0116 	add.w	r1, sp, #22
 8003c5e:	9307      	str	r3, [sp, #28]
 8003c60:	9606      	str	r6, [sp, #24]
 8003c62:	f7fd fe37 	bl	80018d4 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8003c66:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8003c6a:	f89d 3015 	ldrb.w	r3, [sp, #21]
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8003c6e:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 8003c72:	d003      	beq.n	8003c7c <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x78>
 8003c74:	2810      	cmp	r0, #16
					priority |= (i << 6);
 8003c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8003c7a:	d003      	beq.n	8003c84 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x80>
 8003c7c:	2820      	cmp	r0, #32
					priority |= (i << 6);
 8003c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8003c82:	d003      	beq.n	8003c8c <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x88>
 8003c84:	2830      	cmp	r0, #48	; 0x30
					priority |= (i << 6);
 8003c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8003c8a:	d001      	beq.n	8003c90 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x8c>
					priority |= (i << 6);
 8003c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8003c90:	f88d 3015 	strb.w	r3, [sp, #21]
 8003c94:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 8003c98:	af03      	add	r7, sp, #12
 8003c9a:	f88d 3010 	strb.w	r3, [sp, #16]
 8003c9e:	f88d 300c 	strb.w	r3, [sp, #12]
 8003ca2:	f10d 0116 	add.w	r1, sp, #22
 8003ca6:	ab04      	add	r3, sp, #16
 8003ca8:	a805      	add	r0, sp, #20
 8003caa:	2202      	movs	r2, #2
 8003cac:	9700      	str	r7, [sp, #0]
 8003cae:	9308      	str	r3, [sp, #32]
 8003cb0:	9709      	str	r7, [sp, #36]	; 0x24
 8003cb2:	f7ff ff22 	bl	8003afa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
 8003cb6:	ab04      	add	r3, sp, #16
 8003cb8:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
	std::__insertion_sort(__first, __last, __comp);
 8003cbc:	f10d 0116 	add.w	r1, sp, #22
 8003cc0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003cc4:	a805      	add	r0, sp, #20
 8003cc6:	f7ff feab 	bl	8003a20 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8003cca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	60eb      	str	r3, [r5, #12]
 8003cd2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	60e3      	str	r3, [r4, #12]
		}
 8003cda:	b00d      	add	sp, #52	; 0x34
 8003cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003ce0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8003ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	460d      	mov	r5, r1
 8003ce6:	4614      	mov	r4, r2
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8003ce8:	f7ff ff8c 	bl	8003c04 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		bit = bit | reg;
 8003cec:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x10c>)
 8003cee:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit & ~reg;
 8003cfa:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8003cfe:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003d02:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit | reg;
 8003d06:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8003d0a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8003d0e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003d12:	466a      	mov	r2, sp
 8003d14:	6869      	ldr	r1, [r5, #4]
 8003d16:	6828      	ldr	r0, [r5, #0]
 8003d18:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003d1a:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x110>)
 8003d1c:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003d20:	9901      	ldr	r1, [sp, #4]
 8003d22:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 8003d26:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
		bit = bit & ~reg;
 8003d32:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003d3e:	68aa      	ldr	r2, [r5, #8]
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	d13f      	bne.n	8003dc4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xe4>
 8003d44:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8003d48:	f022 0201 	bic.w	r2, r2, #1
		bit = bit | reg;
 8003d4c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8003d50:	7c2a      	ldrb	r2, [r5, #16]
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d03b      	beq.n	8003dce <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xee>
 8003d56:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
		bit = bit & ~reg;
 8003d5e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003d62:	466b      	mov	r3, sp
 8003d64:	6820      	ldr	r0, [r4, #0]
 8003d66:	6861      	ldr	r1, [r4, #4]
 8003d68:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003d6a:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x110>)
 8003d6c:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003d70:	9a01      	ldr	r2, [sp, #4]
		bit = bit | reg;
 8003d72:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003d76:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
 8003d7a:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8003d7e:	f042 0202 	orr.w	r2, r2, #2
 8003d82:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
		bit = bit & ~reg;
 8003d86:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8003d8a:	f022 0202 	bic.w	r2, r2, #2
 8003d8e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003d92:	68a2      	ldr	r2, [r4, #8]
 8003d94:	bb02      	cbnz	r2, 8003dd8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xf8>
 8003d96:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8003d9a:	f022 0202 	bic.w	r2, r2, #2
		bit = bit | reg;
 8003d9e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8003da2:	7c22      	ldrb	r2, [r4, #16]
 8003da4:	b1ea      	cbz	r2, 8003de2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x102>
 8003da6:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8003daa:	f042 0202 	orr.w	r2, r2, #2
		bit = bit & ~reg;
 8003dae:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8003db2:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x10c>)
 8003db4:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
	}
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
		bit = bit | reg;
 8003dc4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	e7be      	b.n	8003d4c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c>
		bit = bit & ~reg;
 8003dce:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	e7c2      	b.n	8003d5e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x7e>
		bit = bit | reg;
 8003dd8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8003ddc:	f042 0202 	orr.w	r2, r2, #2
 8003de0:	e7dd      	b.n	8003d9e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xbe>
		bit = bit & ~reg;
 8003de2:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8003de6:	f022 0202 	bic.w	r2, r2, #2
 8003dea:	e7e0      	b.n	8003dae <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xce>
 8003dec:	40006000 	.word	0x40006000
 8003df0:	40006400 	.word	0x40006400

08003df4 <wrapper_cpp>:
			fifo_index{fifo_index}
 8003df4:	2200      	movs	r2, #0
void wrapper_cpp(void){
 8003df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			hcan{hcan}
 8003dfa:	4b9d      	ldr	r3, [pc, #628]	; (8004070 <wrapper_cpp+0x27c>)
 8003dfc:	b0df      	sub	sp, #380	; 0x17c
 8003dfe:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
 8003e02:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8003e06:	2301      	movs	r3, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003e08:	200c      	movs	r0, #12
 8003e0a:	9315      	str	r3, [sp, #84]	; 0x54
 8003e0c:	f001 fe23 	bl	8005a56 <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 8003e10:	4c98      	ldr	r4, [pc, #608]	; (8004074 <wrapper_cpp+0x280>)
 8003e12:	ad20      	add	r5, sp, #128	; 0x80
 8003e14:	4621      	mov	r1, r4
 8003e16:	6085      	str	r5, [r0, #8]
 8003e18:	f002 f8fe 	bl	8006018 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8003e1c:	68a3      	ldr	r3, [r4, #8]
 8003e1e:	200c      	movs	r0, #12
 8003e20:	3301      	adds	r3, #1
 8003e22:	60a3      	str	r3, [r4, #8]
 8003e24:	f001 fe17 	bl	8005a56 <_Znwj>
 8003e28:	ab24      	add	r3, sp, #144	; 0x90
	 __tmp->_M_hook(__position._M_node);
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	6083      	str	r3, [r0, #8]
 8003e2e:	f002 f8f3 	bl	8006018 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8003e32:	68a3      	ldr	r3, [r4, #8]
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 8003e34:	4e90      	ldr	r6, [pc, #576]	; (8004078 <wrapper_cpp+0x284>)
 8003e36:	3301      	adds	r3, #1
 8003e38:	60a3      	str	r3, [r4, #8]
	result = HAL_RCC_GetPCLK2Freq();
 8003e3a:	f000 ff1b 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 8003e3e:	6873      	ldr	r3, [r6, #4]
	};
 8003e40:	4c8e      	ldr	r4, [pc, #568]	; (800407c <wrapper_cpp+0x288>)
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 8003e42:	049a      	lsls	r2, r3, #18
	};
 8003e44:	4a8e      	ldr	r2, [pc, #568]	; (8004080 <wrapper_cpp+0x28c>)
 8003e46:	4b8f      	ldr	r3, [pc, #572]	; (8004084 <wrapper_cpp+0x290>)
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 8003e48:	bf48      	it	mi
 8003e4a:	0040      	lslmi	r0, r0, #1
	};
 8003e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e50:	9200      	str	r2, [sp, #0]
 8003e52:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8003e56:	9302      	str	r3, [sp, #8]
 8003e58:	9401      	str	r4, [sp, #4]
 8003e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e5e:	a828      	add	r0, sp, #160	; 0xa0
 8003e60:	f7fe ff44 	bl	8002cec <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm>
	result = HAL_RCC_GetPCLK1Freq();
 8003e64:	f000 fef6 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 8003e68:	6873      	ldr	r3, [r6, #4]
	};
 8003e6a:	4a87      	ldr	r2, [pc, #540]	; (8004088 <wrapper_cpp+0x294>)
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 8003e6c:	055b      	lsls	r3, r3, #21
	};
 8003e6e:	ab24      	add	r3, sp, #144	; 0x90
 8003e70:	9303      	str	r3, [sp, #12]
 8003e72:	4b86      	ldr	r3, [pc, #536]	; (800408c <wrapper_cpp+0x298>)
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 8003e74:	bf48      	it	mi
 8003e76:	0040      	lslmi	r0, r0, #1
	};
 8003e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e7c:	9004      	str	r0, [sp, #16]
 8003e7e:	9302      	str	r3, [sp, #8]
 8003e80:	9200      	str	r2, [sp, #0]
 8003e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e86:	9401      	str	r4, [sp, #4]
 8003e88:	a835      	add	r0, sp, #212	; 0xd4
	};
 8003e8a:	f50d 7884 	add.w	r8, sp, #264	; 0x108
	};
 8003e8e:	f7fe ff2d 	bl	8002cec <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm>
	};
 8003e92:	2300      	movs	r3, #0
 8003e94:	462a      	mov	r2, r5
 8003e96:	4640      	mov	r0, r8
 8003e98:	a911      	add	r1, sp, #68	; 0x44
 8003e9a:	f7fe fd47 	bl	800292c <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8003e9e:	e00d      	b.n	8003ebc <wrapper_cpp+0xc8>
 8003ea0:	2401      	movs	r4, #1
 8003ea2:	2338      	movs	r3, #56	; 0x38
 8003ea4:	f1c4 0401 	rsb	r4, r4, #1
 8003ea8:	fb03 8404 	mla	r4, r3, r4, r8
 8003eac:	4544      	cmp	r4, r8
 8003eae:	f000 80d8 	beq.w	8004062 <wrapper_cpp+0x26e>
 8003eb2:	3c1c      	subs	r4, #28
 8003eb4:	1d20      	adds	r0, r4, #4
 8003eb6:	f7ff fc75 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
	class CanController{
 8003eba:	e7f7      	b.n	8003eac <wrapper_cpp+0xb8>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	462a      	mov	r2, r5
 8003ec0:	a911      	add	r1, sp, #68	; 0x44
 8003ec2:	a849      	add	r0, sp, #292	; 0x124
 8003ec4:	f7fe fd32 	bl	800292c <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8003ec8:	e000      	b.n	8003ecc <wrapper_cpp+0xd8>
 8003eca:	e7e9      	b.n	8003ea0 <wrapper_cpp+0xac>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	aa24      	add	r2, sp, #144	; 0x90
 8003ed0:	a911      	add	r1, sp, #68	; 0x44
 8003ed2:	a850      	add	r0, sp, #320	; 0x140
 8003ed4:	f7fe fd2a 	bl	800292c <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	aa24      	add	r2, sp, #144	; 0x90
 8003edc:	a911      	add	r1, sp, #68	; 0x44
 8003ede:	a857      	add	r0, sp, #348	; 0x15c
 8003ee0:	f7fe fd24 	bl	800292c <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8003ee4:	e001      	b.n	8003eea <wrapper_cpp+0xf6>
 8003ee6:	2400      	movs	r4, #0
 8003ee8:	e7db      	b.n	8003ea2 <wrapper_cpp+0xae>
	parameters[A].set_BID(bida);
 8003eea:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f7fe ffda 	bl	8002ea8 <_ZN11stepping_md10Parameters7set_BIDEt>
	parameters[C].set_BID(bida + 4);
 8003ef4:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003ef8:	a824      	add	r0, sp, #144	; 0x90
 8003efa:	f7fe ffd5 	bl	8002ea8 <_ZN11stepping_md10Parameters7set_BIDEt>
			MotorParam{
 8003efe:	f04f 0900 	mov.w	r9, #0
 8003f02:	2600      	movs	r6, #0
 8003f04:	4f62      	ldr	r7, [pc, #392]	; (8004090 <wrapper_cpp+0x29c>)
 8003f06:	ac1b      	add	r4, sp, #108	; 0x6c
	parameters[A].set_motor_param(
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4628      	mov	r0, r5
			MotorParam{
 8003f0c:	f8c4 9000 	str.w	r9, [r4]
 8003f10:	6067      	str	r7, [r4, #4]
 8003f12:	60a6      	str	r6, [r4, #8]
	parameters[A].set_motor_param(
 8003f14:	f7fe ffc1 	bl	8002e9a <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	parameters[C].set_motor_param(
 8003f18:	4621      	mov	r1, r4
			MotorParam{
 8003f1a:	f8c4 9000 	str.w	r9, [r4]
 8003f1e:	6067      	str	r7, [r4, #4]
 8003f20:	60a6      	str	r6, [r4, #8]
	parameters[C].set_motor_param(
 8003f22:	a824      	add	r0, sp, #144	; 0x90
 8003f24:	f7fe ffb9 	bl	8002e9a <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	motors[A].set_speed(rpm);
 8003f28:	495a      	ldr	r1, [pc, #360]	; (8004094 <wrapper_cpp+0x2a0>)
 8003f2a:	a828      	add	r0, sp, #160	; 0xa0
 8003f2c:	f7fe ff0a 	bl	8002d44 <_ZN11stepping_md15MotorController9set_speedEf>
	motors[C].set_speed(rpm);
 8003f30:	4958      	ldr	r1, [pc, #352]	; (8004094 <wrapper_cpp+0x2a0>)
 8003f32:	a835      	add	r0, sp, #212	; 0xd4
 8003f34:	f7fe ff06 	bl	8002d44 <_ZN11stepping_md15MotorController9set_speedEf>
	inline void dynamic_initialize() noexcept
	{
		[]<u8 ... indices>(std::integer_sequence<u8, indices ...>)
		{
			constexpr FrameFeature<FilterWidth::bit32> null_feature{.std_id = max_std_id, .ext_id = max_ext_id};
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8003f38:	4626      	mov	r6, r4
 8003f3a:	4f57      	ldr	r7, [pc, #348]	; (8004098 <wrapper_cpp+0x2a4>)
 8003f3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f40:	683b      	ldr	r3, [r7, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8003f42:	4622      	mov	r2, r4
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8003f44:	6033      	str	r3, [r6, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8003f46:	4621      	mov	r1, r4
 8003f48:	4623      	mov	r3, r4
 8003f4a:	200e      	movs	r0, #14
 8003f4c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003f50:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003f54:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003f58:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f5c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f60:	9400      	str	r4, [sp, #0]
 8003f62:	f7fd fec7 	bl	8001cf4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterA{
 8003f66:	2214      	movs	r2, #20
 8003f68:	4649      	mov	r1, r9
 8003f6a:	a816      	add	r0, sp, #88	; 0x58
 8003f6c:	f002 f95c 	bl	8006228 <memset>
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <wrapper_cpp+0x2a8>)
	};
 8003f72:	4628      	mov	r0, r5
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterA{
 8003f74:	9317      	str	r3, [sp, #92]	; 0x5c
 8003f76:	2301      	movs	r3, #1
 8003f78:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
	};
 8003f7c:	f7fe ff92 	bl	8002ea4 <_ZN11stepping_md10Parameters7get_BIDEv>
			bool rtr;
		};

		constexpr FrameFeature(const u16 std_id = max_std_id, const u32 ext_id = max_ext_id, const bool ide = false, const bool rtr = false) noexcept:
			//value{(u16)(std_id << (u16)21 | ext_id << (u32)3 | (u8)ide << 2 | (u8)rtr << 1)}
			value{(u32)(std_id << (u16)21 | ext_id << (u32)3 | (u8)ide << 2 | (u8)rtr << 1)}
 8003f80:	0540      	lsls	r0, r0, #21
 8003f82:	9016      	str	r0, [sp, #88]	; 0x58
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterC{
 8003f84:	2214      	movs	r2, #20
 8003f86:	4649      	mov	r1, r9
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f002 f94d 	bl	8006228 <memset>
 8003f8e:	4b43      	ldr	r3, [pc, #268]	; (800409c <wrapper_cpp+0x2a8>)
	};
 8003f90:	a824      	add	r0, sp, #144	; 0x90
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterC{
 8003f92:	931c      	str	r3, [sp, #112]	; 0x70
 8003f94:	2301      	movs	r3, #1
 8003f96:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	};
 8003f9a:	f7fe ff83 	bl	8002ea4 <_ZN11stepping_md10Parameters7get_BIDEv>
 8003f9e:	0540      	lsls	r0, r0, #21
 8003fa0:	901b      	str	r0, [sp, #108]	; 0x6c
		config_filter_bank(28, filter_args ...);
 8003fa2:	a916      	add	r1, sp, #88	; 0x58
 8003fa4:	201c      	movs	r0, #28
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	f7ff fe9a 	bl	8003ce0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8003fac:	ab28      	add	r3, sp, #160	; 0xa0
 8003fae:	930e      	str	r3, [sp, #56]	; 0x38
	    _M_invoker = &_My_handler::_M_invoke;
 8003fb0:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <wrapper_cpp+0x2ac>)
	cancontrollers[A][cmd].set_callback<uint8_t>(
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8003fb6:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <wrapper_cpp+0x2b0>)
 8003fb8:	a90d      	add	r1, sp, #52	; 0x34
 8003fba:	950d      	str	r5, [sp, #52]	; 0x34
 8003fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fbe:	f7ff fca3 	bl	8003908 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 8003fc2:	a80d      	add	r0, sp, #52	; 0x34
 8003fc4:	f7ff fbee 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 8003fc8:	ab28      	add	r3, sp, #160	; 0xa0
 8003fca:	930e      	str	r3, [sp, #56]	; 0x38
	    _M_invoker = &_My_handler::_M_invoke;
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <wrapper_cpp+0x2b4>)
	cancontrollers[C][cmd].set_callback<uint8_t>(
 8003fce:	a90d      	add	r1, sp, #52	; 0x34
 8003fd0:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <wrapper_cpp+0x2b8>)
 8003fd4:	a850      	add	r0, sp, #320	; 0x140
 8003fd6:	950d      	str	r5, [sp, #52]	; 0x34
 8003fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fda:	f7ff fc95 	bl	8003908 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 8003fde:	a80d      	add	r0, sp, #52	; 0x34
 8003fe0:	f7ff fbe0 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 8003fe4:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <wrapper_cpp+0x2bc>)
	cancontrollers[A][target].set_callback<float>(
 8003fe6:	a90d      	add	r1, sp, #52	; 0x34
 8003fe8:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8003fea:	4b32      	ldr	r3, [pc, #200]	; (80040b4 <wrapper_cpp+0x2c0>)
 8003fec:	a849      	add	r0, sp, #292	; 0x124
 8003fee:	950d      	str	r5, [sp, #52]	; 0x34
 8003ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ff2:	f7ff fccf 	bl	8003994 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 8003ff6:	a80d      	add	r0, sp, #52	; 0x34
 8003ff8:	f7ff fbd4 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <wrapper_cpp+0x2c4>)
	cancontrollers[C][target].set_callback<float>(
 8003ffe:	a90d      	add	r1, sp, #52	; 0x34
 8004000:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <wrapper_cpp+0x2c8>)
 8004004:	a857      	add	r0, sp, #348	; 0x15c
 8004006:	950d      	str	r5, [sp, #52]	; 0x34
 8004008:	930f      	str	r3, [sp, #60]	; 0x3c
 800400a:	f7ff fcc3 	bl	8003994 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 800400e:	a80d      	add	r0, sp, #52	; 0x34
 8004010:	f7ff fbc8 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
	HAL_CAN_Start(&hcan);
 8004014:	4816      	ldr	r0, [pc, #88]	; (8004070 <wrapper_cpp+0x27c>)
 8004016:	f000 f940 	bl	800429a <HAL_CAN_Start>
		if(error_request_flag){
 800401a:	4c29      	ldr	r4, [pc, #164]	; (80040c0 <wrapper_cpp+0x2cc>)
		if(recovery_request_flag){
 800401c:	4d29      	ldr	r5, [pc, #164]	; (80040c4 <wrapper_cpp+0x2d0>)
		if(error_request_flag){
 800401e:	7823      	ldrb	r3, [r4, #0]
 8004020:	b13b      	cbz	r3, 8004032 <wrapper_cpp+0x23e>
			MotorController::trigger_emergency_callback();
 8004022:	f7fe feeb 	bl	8002dfc <_ZN11stepping_md15MotorController26trigger_emergency_callbackEv>
			Parameters::trigger_emergency_callback();
 8004026:	f7fe ff41 	bl	8002eac <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv>
			led_mgr::disable_all_motor();
 800402a:	f7ff f83d 	bl	80030a8 <_ZN11stepping_md7led_mgr17disable_all_motorEv>
			error_request_flag = false;
 800402e:	2300      	movs	r3, #0
 8004030:	7023      	strb	r3, [r4, #0]
		if(recovery_request_flag){
 8004032:	782b      	ldrb	r3, [r5, #0]
 8004034:	b11b      	cbz	r3, 800403e <wrapper_cpp+0x24a>
			MotorController::trigger_recovery_callback();
 8004036:	f7fe ff01 	bl	8002e3c <_ZN11stepping_md15MotorController25trigger_recovery_callbackEv>
			recovery_request_flag = false;
 800403a:	2300      	movs	r3, #0
 800403c:	702b      	strb	r3, [r5, #0]
		CanController::trigger_update();
 800403e:	f7fe fdab 	bl	8002b98 <_ZN11stepping_md13CanController14trigger_updateEv>
		MotorController::trigger_update();
 8004042:	f7fe feed 	bl	8002e20 <_ZN11stepping_md15MotorController14trigger_updateEv>
		led_mgr::led_process();
 8004046:	f7fe ff57 	bl	8002ef8 <_ZN11stepping_md7led_mgr11led_processEv>
 800404a:	e7e8      	b.n	800401e <wrapper_cpp+0x22a>
 800404c:	e74b      	b.n	8003ee6 <wrapper_cpp+0xf2>
 800404e:	a80d      	add	r0, sp, #52	; 0x34
 8004050:	f7ff fba8 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
	};
 8004054:	ac5e      	add	r4, sp, #376	; 0x178
 8004056:	3c1c      	subs	r4, #28
 8004058:	1d20      	adds	r0, r4, #4
 800405a:	f7ff fba3 	bl	80037a4 <_ZNSt14_Function_baseD1Ev>
 800405e:	4544      	cmp	r4, r8
 8004060:	d1f9      	bne.n	8004056 <wrapper_cpp+0x262>
 8004062:	f001 f99f 	bl	80053a4 <__cxa_end_cleanup>
 8004066:	e7f2      	b.n	800404e <wrapper_cpp+0x25a>
 8004068:	e7f1      	b.n	800404e <wrapper_cpp+0x25a>
 800406a:	e7f0      	b.n	800404e <wrapper_cpp+0x25a>
 800406c:	e7f2      	b.n	8004054 <wrapper_cpp+0x260>
 800406e:	bf00      	nop
 8004070:	2000036c 	.word	0x2000036c
 8004074:	20000348 	.word	0x20000348
 8004078:	40021000 	.word	0x40021000
 800407c:	3db2b8c2 	.word	0x3db2b8c2
 8004080:	40010800 	.word	0x40010800
 8004084:	20000394 	.word	0x20000394
 8004088:	40010c00 	.word	0x40010c00
 800408c:	200003dc 	.word	0x200003dc
 8004090:	43480000 	.word	0x43480000
 8004094:	42700000 	.word	0x42700000
 8004098:	080064d8 	.word	0x080064d8
 800409c:	ff9ffffe 	.word	0xff9ffffe
 80040a0:	08003691 	.word	0x08003691
 80040a4:	08003755 	.word	0x08003755
 80040a8:	080036a3 	.word	0x080036a3
 80040ac:	0800372d 	.word	0x0800372d
 80040b0:	080035ed 	.word	0x080035ed
 80040b4:	0800370d 	.word	0x0800370d
 80040b8:	080035fd 	.word	0x080035fd
 80040bc:	080036ed 	.word	0x080036ed
 80040c0:	20000428 	.word	0x20000428
 80040c4:	20000429 	.word	0x20000429

080040c8 <Reset_Handler>:
 80040c8:	480c      	ldr	r0, [pc, #48]	; (80040fc <LoopFillZerobss+0x12>)
 80040ca:	490d      	ldr	r1, [pc, #52]	; (8004100 <LoopFillZerobss+0x16>)
 80040cc:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <LoopFillZerobss+0x1a>)
 80040ce:	2300      	movs	r3, #0
 80040d0:	e002      	b.n	80040d8 <LoopCopyDataInit>

080040d2 <CopyDataInit>:
 80040d2:	58d4      	ldr	r4, [r2, r3]
 80040d4:	50c4      	str	r4, [r0, r3]
 80040d6:	3304      	adds	r3, #4

080040d8 <LoopCopyDataInit>:
 80040d8:	18c4      	adds	r4, r0, r3
 80040da:	428c      	cmp	r4, r1
 80040dc:	d3f9      	bcc.n	80040d2 <CopyDataInit>
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <LoopFillZerobss+0x1e>)
 80040e0:	4c0a      	ldr	r4, [pc, #40]	; (800410c <LoopFillZerobss+0x22>)
 80040e2:	2300      	movs	r3, #0
 80040e4:	e001      	b.n	80040ea <LoopFillZerobss>

080040e6 <FillZerobss>:
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	3204      	adds	r2, #4

080040ea <LoopFillZerobss>:
 80040ea:	42a2      	cmp	r2, r4
 80040ec:	d3fb      	bcc.n	80040e6 <FillZerobss>
 80040ee:	f7ff fa63 	bl	80035b8 <SystemInit>
 80040f2:	f002 f83d 	bl	8006170 <__libc_init_array>
 80040f6:	f7ff f80d 	bl	8003114 <main>
 80040fa:	4770      	bx	lr
 80040fc:	20000000 	.word	0x20000000
 8004100:	2000007c 	.word	0x2000007c
 8004104:	08006de0 	.word	0x08006de0
 8004108:	2000007c 	.word	0x2000007c
 800410c:	20000450 	.word	0x20000450

08004110 <ADC1_2_IRQHandler>:
 8004110:	e7fe      	b.n	8004110 <ADC1_2_IRQHandler>
	...

08004114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004114:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <HAL_InitTick+0x3c>)
{
 8004118:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800411a:	7818      	ldrb	r0, [r3, #0]
 800411c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004120:	fbb3 f3f0 	udiv	r3, r3, r0
 8004124:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <HAL_InitTick+0x40>)
 8004126:	6810      	ldr	r0, [r2, #0]
 8004128:	fbb0 f0f3 	udiv	r0, r0, r3
 800412c:	f000 fa1e 	bl	800456c <HAL_SYSTICK_Config>
 8004130:	4604      	mov	r4, r0
 8004132:	b958      	cbnz	r0, 800414c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004134:	2d0f      	cmp	r5, #15
 8004136:	d809      	bhi.n	800414c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004138:	4602      	mov	r2, r0
 800413a:	4629      	mov	r1, r5
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	f000 f9d4 	bl	80044ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004144:	4620      	mov	r0, r4
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <HAL_InitTick+0x44>)
 8004148:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800414a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800414c:	2001      	movs	r0, #1
 800414e:	e7fc      	b.n	800414a <HAL_InitTick+0x36>
 8004150:	20000008 	.word	0x20000008
 8004154:	20000004 	.word	0x20000004
 8004158:	2000000c 	.word	0x2000000c

0800415c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <HAL_Init+0x20>)
{
 800415e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004160:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004162:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004164:	f043 0310 	orr.w	r3, r3, #16
 8004168:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800416a:	f000 f9ad 	bl	80044c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800416e:	200f      	movs	r0, #15
 8004170:	f7ff ffd0 	bl	8004114 <HAL_InitTick>
  HAL_MspInit();
 8004174:	f7ff f920 	bl	80033b8 <HAL_MspInit>
}
 8004178:	2000      	movs	r0, #0
 800417a:	bd08      	pop	{r3, pc}
 800417c:	40022000 	.word	0x40022000

08004180 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <HAL_IncTick+0x10>)
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_IncTick+0x14>)
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	440b      	add	r3, r1
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	2000042c 	.word	0x2000042c
 8004194:	20000008 	.word	0x20000008

08004198 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004198:	4b01      	ldr	r3, [pc, #4]	; (80041a0 <HAL_GetTick+0x8>)
 800419a:	6818      	ldr	r0, [r3, #0]
}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	2000042c 	.word	0x2000042c

080041a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80041a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80041a6:	4604      	mov	r4, r0
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d06e      	beq.n	800428a <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80041ac:	f890 3020 	ldrb.w	r3, [r0, #32]
 80041b0:	b90b      	cbnz	r3, 80041b6 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80041b2:	f7ff f923 	bl	80033fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	6813      	ldr	r3, [r2, #0]
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c0:	f7ff ffea 	bl	8004198 <HAL_GetTick>
 80041c4:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	07d1      	lsls	r1, r2, #31
 80041cc:	d551      	bpl.n	8004272 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	f022 0202 	bic.w	r2, r2, #2
 80041d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d6:	f7ff ffdf 	bl	8004198 <HAL_GetTick>
 80041da:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	0792      	lsls	r2, r2, #30
 80041e2:	d454      	bmi.n	800428e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80041e4:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041e6:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80041e8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	bf0c      	ite	eq
 80041ee:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041f2:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80041f6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80041f8:	7e62      	ldrb	r2, [r4, #25]
 80041fa:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	bf0c      	ite	eq
 8004200:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004204:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8004208:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800420a:	7ea2      	ldrb	r2, [r4, #26]
 800420c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	bf0c      	ite	eq
 8004212:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004216:	f022 0220 	bicne.w	r2, r2, #32
 800421a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800421c:	7ee2      	ldrb	r2, [r4, #27]
 800421e:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	bf0c      	ite	eq
 8004224:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004228:	f042 0210 	orrne.w	r2, r2, #16
 800422c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800422e:	7f22      	ldrb	r2, [r4, #28]
 8004230:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	bf0c      	ite	eq
 8004236:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800423a:	f022 0208 	bicne.w	r2, r2, #8
 800423e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004240:	7f62      	ldrb	r2, [r4, #29]
 8004242:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	bf0c      	ite	eq
 8004248:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800424c:	f022 0204 	bicne.w	r2, r2, #4
 8004250:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004252:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004256:	430a      	orrs	r2, r1
 8004258:	6921      	ldr	r1, [r4, #16]
 800425a:	430a      	orrs	r2, r1
 800425c:	6961      	ldr	r1, [r4, #20]
 800425e:	430a      	orrs	r2, r1
 8004260:	6861      	ldr	r1, [r4, #4]
 8004262:	3901      	subs	r1, #1
 8004264:	430a      	orrs	r2, r1
 8004266:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004268:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800426a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800426c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8004270:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004272:	f7ff ff91 	bl	8004198 <HAL_GetTick>
 8004276:	1b40      	subs	r0, r0, r5
 8004278:	280a      	cmp	r0, #10
 800427a:	d9a4      	bls.n	80041c6 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800427c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800427e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004282:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004284:	2305      	movs	r3, #5
 8004286:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800428a:	2001      	movs	r0, #1
 800428c:	e7f0      	b.n	8004270 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800428e:	f7ff ff83 	bl	8004198 <HAL_GetTick>
 8004292:	1b40      	subs	r0, r0, r5
 8004294:	280a      	cmp	r0, #10
 8004296:	d9a1      	bls.n	80041dc <HAL_CAN_Init+0x38>
 8004298:	e7f0      	b.n	800427c <HAL_CAN_Init+0xd8>

0800429a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800429a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800429c:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80042a0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	b2dd      	uxtb	r5, r3
 80042a6:	d120      	bne.n	80042ea <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80042a8:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042aa:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80042ac:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042b8:	f7ff ff6e 	bl	8004198 <HAL_GetTick>
 80042bc:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f013 0301 	ands.w	r3, r3, #1
 80042c6:	d102      	bne.n	80042ce <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 80042c8:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042ca:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80042cc:	e00b      	b.n	80042e6 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042ce:	f7ff ff63 	bl	8004198 <HAL_GetTick>
 80042d2:	1b80      	subs	r0, r0, r6
 80042d4:	280a      	cmp	r0, #10
 80042d6:	d9f2      	bls.n	80042be <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042de:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80042e0:	2305      	movs	r3, #5
 80042e2:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80042e6:	4628      	mov	r0, r5
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80042ec:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042f2:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80042f4:	e7f7      	b.n	80042e6 <HAL_CAN_Start+0x4c>

080042f6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80042f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80042f8:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80042fc:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80042fe:	3d01      	subs	r5, #1
 8004300:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004302:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8004304:	d841      	bhi.n	800438a <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004306:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 800430a:	d03a      	beq.n	8004382 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800430c:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004310:	2c03      	cmp	r4, #3
 8004312:	f04f 0501 	mov.w	r5, #1
 8004316:	d105      	bne.n	8004324 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004318:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800431a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800431e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004320:	2001      	movs	r0, #1
 8004322:	e028      	b.n	8004376 <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004324:	40a5      	lsls	r5, r4
 8004326:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8004328:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 800432c:	f104 0318 	add.w	r3, r4, #24
 8004330:	bb10      	cbnz	r0, 8004378 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004332:	6808      	ldr	r0, [r1, #0]
 8004334:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800433c:	0120      	lsls	r0, r4, #4
 800433e:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004342:	4406      	add	r6, r0
      return HAL_OK;
 8004344:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004346:	690d      	ldr	r5, [r1, #16]
 8004348:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800434c:	7d09      	ldrb	r1, [r1, #20]
 800434e:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004350:	bf02      	ittt	eq
 8004352:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8004356:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800435a:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800435e:	6851      	ldr	r1, [r2, #4]
 8004360:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800436a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004378:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 800437a:	4338      	orrs	r0, r7
 800437c:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8004380:	e7da      	b.n	8004338 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004382:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004388:	e7c9      	b.n	800431e <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800438a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	e7c5      	b.n	800431e <HAL_CAN_AddTxMessage+0x28>

08004392 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004392:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8004396:	3b01      	subs	r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d80c      	bhi.n	80043b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800439c:	6803      	ldr	r3, [r0, #0]
 800439e:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80043a0:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80043a2:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80043a4:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80043a6:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 80043aa:	bf48      	it	mi
 80043ac:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	d502      	bpl.n	80043b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 80043b2:	3001      	adds	r0, #1
 80043b4:	4770      	bx	lr
  uint32_t freelevel = 0U;
 80043b6:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 80043b8:	4770      	bx	lr

080043ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80043ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80043bc:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80043c0:	3c01      	subs	r4, #1
 80043c2:	2c01      	cmp	r4, #1
 80043c4:	d86c      	bhi.n	80044a0 <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043c6:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043c8:	b941      	cbnz	r1, 80043dc <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043ca:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043cc:	07a4      	lsls	r4, r4, #30
 80043ce:	d107      	bne.n	80043e0 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043d6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80043d8:	2001      	movs	r0, #1
 80043da:	e056      	b.n	800448a <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043dc:	6934      	ldr	r4, [r6, #16]
 80043de:	e7f5      	b.n	80043cc <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043e0:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80043e4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80043e8:	010c      	lsls	r4, r1, #4
 80043ea:	f007 0704 	and.w	r7, r7, #4
 80043ee:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80043f0:	2f00      	cmp	r7, #0
 80043f2:	d14b      	bne.n	800448c <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80043f4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80043f8:	0d7f      	lsrs	r7, r7, #21
 80043fa:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80043fc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004400:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004402:	f007 0702 	and.w	r7, r7, #2
 8004406:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004408:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 800440c:	f007 070f 	and.w	r7, r7, #15
 8004410:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004412:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004416:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800441a:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800441e:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004420:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004422:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004424:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8004428:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800442a:	6802      	ldr	r2, [r0, #0]
 800442c:	4422      	add	r2, r4
 800442e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004432:	0a12      	lsrs	r2, r2, #8
 8004434:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004436:	6802      	ldr	r2, [r0, #0]
 8004438:	4422      	add	r2, r4
 800443a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800443e:	0c12      	lsrs	r2, r2, #16
 8004440:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004442:	6802      	ldr	r2, [r0, #0]
 8004444:	4422      	add	r2, r4
 8004446:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800444a:	0e12      	lsrs	r2, r2, #24
 800444c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800444e:	6802      	ldr	r2, [r0, #0]
 8004450:	4422      	add	r2, r4
 8004452:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004456:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004458:	6802      	ldr	r2, [r0, #0]
 800445a:	4422      	add	r2, r4
 800445c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004460:	0a12      	lsrs	r2, r2, #8
 8004462:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004464:	6802      	ldr	r2, [r0, #0]
 8004466:	4422      	add	r2, r4
 8004468:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800446c:	0c12      	lsrs	r2, r2, #16
 800446e:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004470:	6802      	ldr	r2, [r0, #0]
 8004472:	4422      	add	r2, r4
 8004474:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004478:	0e12      	lsrs	r2, r2, #24
 800447a:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800447c:	6803      	ldr	r3, [r0, #0]
 800447e:	b951      	cbnz	r1, 8004496 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	f042 0220 	orr.w	r2, r2, #32
 8004486:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8004488:	2000      	movs	r0, #0
  }
}
 800448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800448c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004490:	08ff      	lsrs	r7, r7, #3
 8004492:	6057      	str	r7, [r2, #4]
 8004494:	e7b2      	b.n	80043fc <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	f042 0220 	orr.w	r2, r2, #32
 800449c:	611a      	str	r2, [r3, #16]
 800449e:	e7f3      	b.n	8004488 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80044a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a6:	e796      	b.n	80043d6 <HAL_CAN_GetRxMessage+0x1c>

080044a8 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044a8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80044ac:	3b01      	subs	r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d807      	bhi.n	80044c2 <HAL_CAN_GetRxFifoFillLevel+0x1a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80044b2:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0)
 80044b4:	b919      	cbnz	r1, 80044be <HAL_CAN_GetRxFifoFillLevel+0x16>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80044b6:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80044b8:	f000 0003 	and.w	r0, r0, #3
 80044bc:	4770      	bx	lr
 80044be:	6918      	ldr	r0, [r3, #16]
 80044c0:	e7fa      	b.n	80044b8 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 80044c2:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c8:	4907      	ldr	r1, [pc, #28]	; (80044e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044ca:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044cc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d6:	0412      	lsls	r2, r2, #16
 80044d8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80044e4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ee:	b530      	push	{r4, r5, lr}
 80044f0:	68dc      	ldr	r4, [r3, #12]
 80044f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	bf28      	it	cs
 8004500:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004502:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004508:	bf98      	it	ls
 800450a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004510:	bf88      	it	hi
 8004512:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	ea21 0303 	bic.w	r3, r1, r3
 8004518:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800451a:	fa05 f404 	lsl.w	r4, r5, r4
 800451e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004522:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	bfac      	ite	ge
 800452a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452e:	4a07      	ldrlt	r2, [pc, #28]	; (800454c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004530:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004534:	b2db      	uxtb	r3, r3
 8004536:	bfab      	itete	ge
 8004538:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004544:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004546:	bd30      	pop	{r4, r5, pc}
 8004548:	e000ed00 	.word	0xe000ed00
 800454c:	e000ed14 	.word	0xe000ed14

08004550 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004550:	2800      	cmp	r0, #0
 8004552:	db08      	blt.n	8004566 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004554:	2301      	movs	r3, #1
 8004556:	0942      	lsrs	r2, r0, #5
 8004558:	f000 001f 	and.w	r0, r0, #31
 800455c:	fa03 f000 	lsl.w	r0, r3, r0
 8004560:	4b01      	ldr	r3, [pc, #4]	; (8004568 <HAL_NVIC_EnableIRQ+0x18>)
 8004562:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004566:	4770      	bx	lr
 8004568:	e000e100 	.word	0xe000e100

0800456c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800456c:	3801      	subs	r0, #1
 800456e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004572:	d20b      	bcs.n	800458c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004574:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004578:	21f0      	movs	r1, #240	; 0xf0
 800457a:	4a05      	ldr	r2, [pc, #20]	; (8004590 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800457c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004582:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004584:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004586:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004588:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800458c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800458e:	4770      	bx	lr
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004598:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800459a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800459c:	4f61      	ldr	r7, [pc, #388]	; (8004724 <HAL_GPIO_Init+0x190>)
 800459e:	4b62      	ldr	r3, [pc, #392]	; (8004728 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 80045a0:	f8df c188 	ldr.w	ip, [pc, #392]	; 800472c <HAL_GPIO_Init+0x198>
 80045a4:	f8df e188 	ldr.w	lr, [pc, #392]	; 8004730 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a8:	680d      	ldr	r5, [r1, #0]
 80045aa:	fa35 f406 	lsrs.w	r4, r5, r6
 80045ae:	d102      	bne.n	80045b6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80045b0:	b003      	add	sp, #12
 80045b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80045b6:	f04f 0801 	mov.w	r8, #1
 80045ba:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045be:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80045c2:	ea38 0505 	bics.w	r5, r8, r5
 80045c6:	d177      	bne.n	80046b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80045c8:	684d      	ldr	r5, [r1, #4]
 80045ca:	2d03      	cmp	r5, #3
 80045cc:	d807      	bhi.n	80045de <HAL_GPIO_Init+0x4a>
 80045ce:	3d01      	subs	r5, #1
 80045d0:	2d02      	cmp	r5, #2
 80045d2:	f200 8082 	bhi.w	80046da <HAL_GPIO_Init+0x146>
 80045d6:	e8df f005 	tbb	[pc, r5]
 80045da:	9792      	.short	0x9792
 80045dc:	9d          	.byte	0x9d
 80045dd:	00          	.byte	0x00
 80045de:	2d12      	cmp	r5, #18
 80045e0:	f000 8095 	beq.w	800470e <HAL_GPIO_Init+0x17a>
 80045e4:	d86a      	bhi.n	80046bc <HAL_GPIO_Init+0x128>
 80045e6:	2d11      	cmp	r5, #17
 80045e8:	f000 808b 	beq.w	8004702 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045ec:	2cff      	cmp	r4, #255	; 0xff
 80045ee:	bf98      	it	ls
 80045f0:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045f2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045f6:	bf88      	it	hi
 80045f8:	f100 0a04 	addhi.w	sl, r0, #4
 80045fc:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004600:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004604:	bf88      	it	hi
 8004606:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004608:	fa09 fb05 	lsl.w	fp, r9, r5
 800460c:	ea28 080b 	bic.w	r8, r8, fp
 8004610:	fa02 f505 	lsl.w	r5, r2, r5
 8004614:	ea48 0505 	orr.w	r5, r8, r5
 8004618:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800461c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004620:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8004624:	d048      	beq.n	80046b8 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004626:	69bd      	ldr	r5, [r7, #24]
 8004628:	f026 0803 	bic.w	r8, r6, #3
 800462c:	f045 0501 	orr.w	r5, r5, #1
 8004630:	61bd      	str	r5, [r7, #24]
 8004632:	69bd      	ldr	r5, [r7, #24]
 8004634:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004638:	f005 0501 	and.w	r5, r5, #1
 800463c:	9501      	str	r5, [sp, #4]
 800463e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004642:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004646:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004648:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800464c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004650:	fa09 f90b 	lsl.w	r9, r9, fp
 8004654:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004658:	4d36      	ldr	r5, [pc, #216]	; (8004734 <HAL_GPIO_Init+0x1a0>)
 800465a:	42a8      	cmp	r0, r5
 800465c:	d05e      	beq.n	800471c <HAL_GPIO_Init+0x188>
 800465e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004662:	42a8      	cmp	r0, r5
 8004664:	d05c      	beq.n	8004720 <HAL_GPIO_Init+0x18c>
 8004666:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800466a:	42a8      	cmp	r0, r5
 800466c:	bf0c      	ite	eq
 800466e:	2502      	moveq	r5, #2
 8004670:	2503      	movne	r5, #3
 8004672:	fa05 f50b 	lsl.w	r5, r5, fp
 8004676:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800467a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800467e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004680:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004684:	bf14      	ite	ne
 8004686:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004688:	43a5      	biceq	r5, r4
 800468a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800468c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800468e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004692:	bf14      	ite	ne
 8004694:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004696:	43a5      	biceq	r5, r4
 8004698:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800469a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800469c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80046a0:	bf14      	ite	ne
 80046a2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046a4:	43a5      	biceq	r5, r4
 80046a6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80046a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80046ae:	bf14      	ite	ne
 80046b0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046b2:	ea25 0404 	biceq.w	r4, r5, r4
 80046b6:	60dc      	str	r4, [r3, #12]
	position++;
 80046b8:	3601      	adds	r6, #1
 80046ba:	e775      	b.n	80045a8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80046bc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004738 <HAL_GPIO_Init+0x1a4>
 80046c0:	454d      	cmp	r5, r9
 80046c2:	d00a      	beq.n	80046da <HAL_GPIO_Init+0x146>
 80046c4:	d815      	bhi.n	80046f2 <HAL_GPIO_Init+0x15e>
 80046c6:	4575      	cmp	r5, lr
 80046c8:	d007      	beq.n	80046da <HAL_GPIO_Init+0x146>
 80046ca:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 80046ce:	454d      	cmp	r5, r9
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_Init+0x146>
 80046d2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80046d6:	454d      	cmp	r5, r9
 80046d8:	d188      	bne.n	80045ec <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046da:	688a      	ldr	r2, [r1, #8]
 80046dc:	b1e2      	cbz	r2, 8004718 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046de:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80046e0:	bf08      	it	eq
 80046e2:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046e6:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80046ea:	bf18      	it	ne
 80046ec:	f8c0 8014 	strne.w	r8, [r0, #20]
 80046f0:	e77c      	b.n	80045ec <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80046f2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800473c <HAL_GPIO_Init+0x1a8>
 80046f6:	454d      	cmp	r5, r9
 80046f8:	d0ef      	beq.n	80046da <HAL_GPIO_Init+0x146>
 80046fa:	4565      	cmp	r5, ip
 80046fc:	e7ec      	b.n	80046d8 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046fe:	68ca      	ldr	r2, [r1, #12]
          break;
 8004700:	e774      	b.n	80045ec <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004702:	68ca      	ldr	r2, [r1, #12]
 8004704:	3204      	adds	r2, #4
          break;
 8004706:	e771      	b.n	80045ec <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004708:	68ca      	ldr	r2, [r1, #12]
 800470a:	3208      	adds	r2, #8
          break;
 800470c:	e76e      	b.n	80045ec <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800470e:	68ca      	ldr	r2, [r1, #12]
 8004710:	320c      	adds	r2, #12
          break;
 8004712:	e76b      	b.n	80045ec <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8004714:	2200      	movs	r2, #0
 8004716:	e769      	b.n	80045ec <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004718:	2204      	movs	r2, #4
 800471a:	e767      	b.n	80045ec <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800471c:	2500      	movs	r5, #0
 800471e:	e7a8      	b.n	8004672 <HAL_GPIO_Init+0xde>
 8004720:	2501      	movs	r5, #1
 8004722:	e7a6      	b.n	8004672 <HAL_GPIO_Init+0xde>
 8004724:	40021000 	.word	0x40021000
 8004728:	40010400 	.word	0x40010400
 800472c:	10320000 	.word	0x10320000
 8004730:	10120000 	.word	0x10120000
 8004734:	40010800 	.word	0x40010800
 8004738:	10220000 	.word	0x10220000
 800473c:	10310000 	.word	0x10310000

08004740 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004740:	6883      	ldr	r3, [r0, #8]
 8004742:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004744:	bf14      	ite	ne
 8004746:	2001      	movne	r0, #1
 8004748:	2000      	moveq	r0, #0
 800474a:	4770      	bx	lr

0800474c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800474c:	b10a      	cbz	r2, 8004752 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800474e:	6101      	str	r1, [r0, #16]
  }
}
 8004750:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004752:	0409      	lsls	r1, r1, #16
 8004754:	e7fb      	b.n	800474e <HAL_GPIO_WritePin+0x2>
	...

08004758 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800475a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800475c:	6951      	ldr	r1, [r2, #20]
 800475e:	4201      	tst	r1, r0
 8004760:	d002      	beq.n	8004768 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004762:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004764:	f7ff f828 	bl	80037b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004768:	bd08      	pop	{r3, pc}
 800476a:	bf00      	nop
 800476c:	40010400 	.word	0x40010400

08004770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004774:	4605      	mov	r5, r0
 8004776:	b338      	cbz	r0, 80047c8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004778:	6803      	ldr	r3, [r0, #0]
 800477a:	07db      	lsls	r3, r3, #31
 800477c:	d410      	bmi.n	80047a0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	079f      	lsls	r7, r3, #30
 8004782:	d45e      	bmi.n	8004842 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	0719      	lsls	r1, r3, #28
 8004788:	f100 8095 	bmi.w	80048b6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	075a      	lsls	r2, r3, #29
 8004790:	f100 80c1 	bmi.w	8004916 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004794:	69e8      	ldr	r0, [r5, #28]
 8004796:	2800      	cmp	r0, #0
 8004798:	f040 812c 	bne.w	80049f4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800479c:	2000      	movs	r0, #0
 800479e:	e029      	b.n	80047f4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047a0:	4c90      	ldr	r4, [pc, #576]	; (80049e4 <HAL_RCC_OscConfig+0x274>)
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d007      	beq.n	80047bc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d10a      	bne.n	80047cc <HAL_RCC_OscConfig+0x5c>
 80047b6:	6863      	ldr	r3, [r4, #4]
 80047b8:	03de      	lsls	r6, r3, #15
 80047ba:	d507      	bpl.n	80047cc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	039c      	lsls	r4, r3, #14
 80047c0:	d5dd      	bpl.n	800477e <HAL_RCC_OscConfig+0xe>
 80047c2:	686b      	ldr	r3, [r5, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1da      	bne.n	800477e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
 80047ca:	e013      	b.n	80047f4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047cc:	686b      	ldr	r3, [r5, #4]
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d2:	d112      	bne.n	80047fa <HAL_RCC_OscConfig+0x8a>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80047dc:	f7ff fcdc 	bl	8004198 <HAL_GetTick>
 80047e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	0398      	lsls	r0, r3, #14
 80047e6:	d4ca      	bmi.n	800477e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7ff fcd6 	bl	8004198 <HAL_GetTick>
 80047ec:	1b80      	subs	r0, r0, r6
 80047ee:	2864      	cmp	r0, #100	; 0x64
 80047f0:	d9f7      	bls.n	80047e2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80047f2:	2003      	movs	r0, #3
}
 80047f4:	b002      	add	sp, #8
 80047f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047fa:	b99b      	cbnz	r3, 8004824 <HAL_RCC_OscConfig+0xb4>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800480c:	f7ff fcc4 	bl	8004198 <HAL_GetTick>
 8004810:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	0399      	lsls	r1, r3, #14
 8004816:	d5b2      	bpl.n	800477e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004818:	f7ff fcbe 	bl	8004198 <HAL_GetTick>
 800481c:	1b80      	subs	r0, r0, r6
 800481e:	2864      	cmp	r0, #100	; 0x64
 8004820:	d9f7      	bls.n	8004812 <HAL_RCC_OscConfig+0xa2>
 8004822:	e7e6      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	d103      	bne.n	8004834 <HAL_RCC_OscConfig+0xc4>
 800482c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	e7cf      	b.n	80047d4 <HAL_RCC_OscConfig+0x64>
 8004834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004840:	e7cb      	b.n	80047da <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004842:	4c68      	ldr	r4, [pc, #416]	; (80049e4 <HAL_RCC_OscConfig+0x274>)
 8004844:	6863      	ldr	r3, [r4, #4]
 8004846:	f013 0f0c 	tst.w	r3, #12
 800484a:	d007      	beq.n	800485c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b08      	cmp	r3, #8
 8004854:	d110      	bne.n	8004878 <HAL_RCC_OscConfig+0x108>
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	03da      	lsls	r2, r3, #15
 800485a:	d40d      	bmi.n	8004878 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	079b      	lsls	r3, r3, #30
 8004860:	d502      	bpl.n	8004868 <HAL_RCC_OscConfig+0xf8>
 8004862:	692b      	ldr	r3, [r5, #16]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d1af      	bne.n	80047c8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	696a      	ldr	r2, [r5, #20]
 800486c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004870:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	e785      	b.n	8004784 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004878:	692a      	ldr	r2, [r5, #16]
 800487a:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <HAL_RCC_OscConfig+0x278>)
 800487c:	b16a      	cbz	r2, 800489a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004882:	f7ff fc89 	bl	8004198 <HAL_GetTick>
 8004886:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	079f      	lsls	r7, r3, #30
 800488c:	d4ec      	bmi.n	8004868 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488e:	f7ff fc83 	bl	8004198 <HAL_GetTick>
 8004892:	1b80      	subs	r0, r0, r6
 8004894:	2802      	cmp	r0, #2
 8004896:	d9f7      	bls.n	8004888 <HAL_RCC_OscConfig+0x118>
 8004898:	e7ab      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800489a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800489c:	f7ff fc7c 	bl	8004198 <HAL_GetTick>
 80048a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	0798      	lsls	r0, r3, #30
 80048a6:	f57f af6d 	bpl.w	8004784 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7ff fc75 	bl	8004198 <HAL_GetTick>
 80048ae:	1b80      	subs	r0, r0, r6
 80048b0:	2802      	cmp	r0, #2
 80048b2:	d9f6      	bls.n	80048a2 <HAL_RCC_OscConfig+0x132>
 80048b4:	e79d      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b6:	69aa      	ldr	r2, [r5, #24]
 80048b8:	4e4a      	ldr	r6, [pc, #296]	; (80049e4 <HAL_RCC_OscConfig+0x274>)
 80048ba:	4b4b      	ldr	r3, [pc, #300]	; (80049e8 <HAL_RCC_OscConfig+0x278>)
 80048bc:	b1e2      	cbz	r2, 80048f8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80048be:	2201      	movs	r2, #1
 80048c0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80048c4:	f7ff fc68 	bl	8004198 <HAL_GetTick>
 80048c8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80048cc:	079b      	lsls	r3, r3, #30
 80048ce:	d50d      	bpl.n	80048ec <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80048d4:	4b45      	ldr	r3, [pc, #276]	; (80049ec <HAL_RCC_OscConfig+0x27c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048dc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80048de:	bf00      	nop
  }
  while (Delay --);
 80048e0:	9b01      	ldr	r3, [sp, #4]
 80048e2:	1e5a      	subs	r2, r3, #1
 80048e4:	9201      	str	r2, [sp, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f9      	bne.n	80048de <HAL_RCC_OscConfig+0x16e>
 80048ea:	e74f      	b.n	800478c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ec:	f7ff fc54 	bl	8004198 <HAL_GetTick>
 80048f0:	1b00      	subs	r0, r0, r4
 80048f2:	2802      	cmp	r0, #2
 80048f4:	d9e9      	bls.n	80048ca <HAL_RCC_OscConfig+0x15a>
 80048f6:	e77c      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80048f8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80048fc:	f7ff fc4c 	bl	8004198 <HAL_GetTick>
 8004900:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004902:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004904:	079f      	lsls	r7, r3, #30
 8004906:	f57f af41 	bpl.w	800478c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490a:	f7ff fc45 	bl	8004198 <HAL_GetTick>
 800490e:	1b00      	subs	r0, r0, r4
 8004910:	2802      	cmp	r0, #2
 8004912:	d9f6      	bls.n	8004902 <HAL_RCC_OscConfig+0x192>
 8004914:	e76d      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004916:	4c33      	ldr	r4, [pc, #204]	; (80049e4 <HAL_RCC_OscConfig+0x274>)
 8004918:	69e3      	ldr	r3, [r4, #28]
 800491a:	00d8      	lsls	r0, r3, #3
 800491c:	d424      	bmi.n	8004968 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800491e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	69e3      	ldr	r3, [r4, #28]
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	61e3      	str	r3, [r4, #28]
 8004928:	69e3      	ldr	r3, [r4, #28]
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4e2f      	ldr	r6, [pc, #188]	; (80049f0 <HAL_RCC_OscConfig+0x280>)
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	05d9      	lsls	r1, r3, #23
 8004938:	d518      	bpl.n	800496c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493a:	68eb      	ldr	r3, [r5, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d126      	bne.n	800498e <HAL_RCC_OscConfig+0x21e>
 8004940:	6a23      	ldr	r3, [r4, #32]
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004948:	f7ff fc26 	bl	8004198 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004950:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	6a23      	ldr	r3, [r4, #32]
 8004954:	079b      	lsls	r3, r3, #30
 8004956:	d53f      	bpl.n	80049d8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8004958:	2f00      	cmp	r7, #0
 800495a:	f43f af1b 	beq.w	8004794 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800495e:	69e3      	ldr	r3, [r4, #28]
 8004960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004964:	61e3      	str	r3, [r4, #28]
 8004966:	e715      	b.n	8004794 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004968:	2700      	movs	r7, #0
 800496a:	e7e2      	b.n	8004932 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496c:	6833      	ldr	r3, [r6, #0]
 800496e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004972:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004974:	f7ff fc10 	bl	8004198 <HAL_GetTick>
 8004978:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497a:	6833      	ldr	r3, [r6, #0]
 800497c:	05da      	lsls	r2, r3, #23
 800497e:	d4dc      	bmi.n	800493a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7ff fc0a 	bl	8004198 <HAL_GetTick>
 8004984:	eba0 0008 	sub.w	r0, r0, r8
 8004988:	2864      	cmp	r0, #100	; 0x64
 800498a:	d9f6      	bls.n	800497a <HAL_RCC_OscConfig+0x20a>
 800498c:	e731      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498e:	b9ab      	cbnz	r3, 80049bc <HAL_RCC_OscConfig+0x24c>
 8004990:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	6223      	str	r3, [r4, #32]
 800499c:	6a23      	ldr	r3, [r4, #32]
 800499e:	f023 0304 	bic.w	r3, r3, #4
 80049a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80049a4:	f7ff fbf8 	bl	8004198 <HAL_GetTick>
 80049a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049aa:	6a23      	ldr	r3, [r4, #32]
 80049ac:	0798      	lsls	r0, r3, #30
 80049ae:	d5d3      	bpl.n	8004958 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7ff fbf2 	bl	8004198 <HAL_GetTick>
 80049b4:	1b80      	subs	r0, r0, r6
 80049b6:	4540      	cmp	r0, r8
 80049b8:	d9f7      	bls.n	80049aa <HAL_RCC_OscConfig+0x23a>
 80049ba:	e71a      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	2b05      	cmp	r3, #5
 80049be:	6a23      	ldr	r3, [r4, #32]
 80049c0:	d103      	bne.n	80049ca <HAL_RCC_OscConfig+0x25a>
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	6223      	str	r3, [r4, #32]
 80049c8:	e7ba      	b.n	8004940 <HAL_RCC_OscConfig+0x1d0>
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6223      	str	r3, [r4, #32]
 80049d0:	6a23      	ldr	r3, [r4, #32]
 80049d2:	f023 0304 	bic.w	r3, r3, #4
 80049d6:	e7b6      	b.n	8004946 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7ff fbde 	bl	8004198 <HAL_GetTick>
 80049dc:	1b80      	subs	r0, r0, r6
 80049de:	4540      	cmp	r0, r8
 80049e0:	d9b7      	bls.n	8004952 <HAL_RCC_OscConfig+0x1e2>
 80049e2:	e706      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
 80049e4:	40021000 	.word	0x40021000
 80049e8:	42420000 	.word	0x42420000
 80049ec:	20000004 	.word	0x20000004
 80049f0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f4:	4c2a      	ldr	r4, [pc, #168]	; (8004aa0 <HAL_RCC_OscConfig+0x330>)
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d03e      	beq.n	8004a7e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a00:	2200      	movs	r2, #0
 8004a02:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <HAL_RCC_OscConfig+0x334>)
 8004a04:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a08:	d12c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8004a0a:	f7ff fbc5 	bl	8004198 <HAL_GetTick>
 8004a0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	0199      	lsls	r1, r3, #6
 8004a14:	d420      	bmi.n	8004a58 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a16:	6a2b      	ldr	r3, [r5, #32]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d105      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a1e:	6862      	ldr	r2, [r4, #4]
 8004a20:	68a9      	ldr	r1, [r5, #8]
 8004a22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004a26:	430a      	orrs	r2, r1
 8004a28:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a2a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004a2c:	6862      	ldr	r2, [r4, #4]
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004a34:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004a36:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a38:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCC_OscConfig+0x334>)
 8004a3c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004a3e:	f7ff fbab 	bl	8004198 <HAL_GetTick>
 8004a42:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	019a      	lsls	r2, r3, #6
 8004a48:	f53f aea8 	bmi.w	800479c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7ff fba4 	bl	8004198 <HAL_GetTick>
 8004a50:	1b40      	subs	r0, r0, r5
 8004a52:	2802      	cmp	r0, #2
 8004a54:	d9f6      	bls.n	8004a44 <HAL_RCC_OscConfig+0x2d4>
 8004a56:	e6cc      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7ff fb9e 	bl	8004198 <HAL_GetTick>
 8004a5c:	1b80      	subs	r0, r0, r6
 8004a5e:	2802      	cmp	r0, #2
 8004a60:	d9d6      	bls.n	8004a10 <HAL_RCC_OscConfig+0x2a0>
 8004a62:	e6c6      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004a64:	f7ff fb98 	bl	8004198 <HAL_GetTick>
 8004a68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	f57f ae95 	bpl.w	800479c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a72:	f7ff fb91 	bl	8004198 <HAL_GetTick>
 8004a76:	1b40      	subs	r0, r0, r5
 8004a78:	2802      	cmp	r0, #2
 8004a7a:	d9f6      	bls.n	8004a6a <HAL_RCC_OscConfig+0x2fa>
 8004a7c:	e6b9      	b.n	80047f2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a7e:	2801      	cmp	r0, #1
 8004a80:	f43f aeb8 	beq.w	80047f4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004a84:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	6a2a      	ldr	r2, [r5, #32]
 8004a88:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004a8c:	4291      	cmp	r1, r2
 8004a8e:	f47f ae9b 	bne.w	80047c8 <HAL_RCC_OscConfig+0x58>
 8004a92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	f43f ae7f 	beq.w	800479c <HAL_RCC_OscConfig+0x2c>
 8004a9e:	e693      	b.n	80047c8 <HAL_RCC_OscConfig+0x58>
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	42420000 	.word	0x42420000

08004aa8 <HAL_RCC_GetSysClockFreq>:
{
 8004aa8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004aac:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004aae:	ac02      	add	r4, sp, #8
 8004ab0:	f103 0510 	add.w	r5, r3, #16
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	3308      	adds	r3, #8
 8004abc:	c203      	stmia	r2!, {r0, r1}
 8004abe:	42ab      	cmp	r3, r5
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	d1f7      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ac4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8004ac8:	4911      	ldr	r1, [pc, #68]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004aca:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004ace:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad0:	f003 020c 	and.w	r2, r3, #12
 8004ad4:	2a08      	cmp	r2, #8
 8004ad6:	d117      	bne.n	8004b08 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ad8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004adc:	3218      	adds	r2, #24
 8004ade:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ae0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ae2:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ae6:	d50c      	bpl.n	8004b02 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ae8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004aec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004af0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004af2:	3318      	adds	r3, #24
 8004af4:	446b      	add	r3, sp
 8004af6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004afa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004afe:	b007      	add	sp, #28
 8004b00:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x70>)
 8004b04:	4358      	muls	r0, r3
 8004b06:	e7fa      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8004b08:	4802      	ldr	r0, [pc, #8]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8004b0a:	e7f8      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x56>
 8004b0c:	08006897 	.word	0x08006897
 8004b10:	40021000 	.word	0x40021000
 8004b14:	007a1200 	.word	0x007a1200
 8004b18:	003d0900 	.word	0x003d0900

08004b1c <HAL_RCC_ClockConfig>:
{
 8004b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b20:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004b22:	4604      	mov	r4, r0
 8004b24:	b910      	cbnz	r0, 8004b2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004b26:	2001      	movs	r0, #1
}
 8004b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4a44      	ldr	r2, [pc, #272]	; (8004c40 <HAL_RCC_ClockConfig+0x124>)
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	428b      	cmp	r3, r1
 8004b36:	d328      	bcc.n	8004b8a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	6821      	ldr	r1, [r4, #0]
 8004b3a:	078e      	lsls	r6, r1, #30
 8004b3c:	d430      	bmi.n	8004ba0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	07ca      	lsls	r2, r1, #31
 8004b40:	d443      	bmi.n	8004bca <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b42:	4a3f      	ldr	r2, [pc, #252]	; (8004c40 <HAL_RCC_ClockConfig+0x124>)
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	42ab      	cmp	r3, r5
 8004b4c:	d865      	bhi.n	8004c1a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	4d3c      	ldr	r5, [pc, #240]	; (8004c44 <HAL_RCC_ClockConfig+0x128>)
 8004b52:	f012 0f04 	tst.w	r2, #4
 8004b56:	d16c      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b58:	0713      	lsls	r3, r2, #28
 8004b5a:	d506      	bpl.n	8004b6a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b5c:	686b      	ldr	r3, [r5, #4]
 8004b5e:	6922      	ldr	r2, [r4, #16]
 8004b60:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b64:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b68:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b6a:	f7ff ff9d 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004b6e:	686b      	ldr	r3, [r5, #4]
 8004b70:	4a35      	ldr	r2, [pc, #212]	; (8004c48 <HAL_RCC_ClockConfig+0x12c>)
 8004b72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b76:	5cd3      	ldrb	r3, [r2, r3]
 8004b78:	40d8      	lsrs	r0, r3
 8004b7a:	4b34      	ldr	r3, [pc, #208]	; (8004c4c <HAL_RCC_ClockConfig+0x130>)
 8004b7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004b7e:	4b34      	ldr	r3, [pc, #208]	; (8004c50 <HAL_RCC_ClockConfig+0x134>)
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f7ff fac7 	bl	8004114 <HAL_InitTick>
  return HAL_OK;
 8004b86:	2000      	movs	r0, #0
 8004b88:	e7ce      	b.n	8004b28 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	f023 0307 	bic.w	r3, r3, #7
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b94:	6813      	ldr	r3, [r2, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	428b      	cmp	r3, r1
 8004b9c:	d1c3      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xa>
 8004b9e:	e7cb      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba0:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_RCC_ClockConfig+0x128>)
 8004ba2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba6:	bf1e      	ittt	ne
 8004ba8:	685a      	ldrne	r2, [r3, #4]
 8004baa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004bae:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb2:	bf42      	ittt	mi
 8004bb4:	685a      	ldrmi	r2, [r3, #4]
 8004bb6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004bba:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68a0      	ldr	r0, [r4, #8]
 8004bc0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004bc4:	4302      	orrs	r2, r0
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	e7b9      	b.n	8004b3e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	4e1d      	ldr	r6, [pc, #116]	; (8004c44 <HAL_RCC_ClockConfig+0x128>)
 8004bce:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	d11a      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd8:	d0a5      	beq.n	8004b26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be0:	f023 0303 	bic.w	r3, r3, #3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004be8:	f7ff fad6 	bl	8004198 <HAL_GetTick>
 8004bec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	6873      	ldr	r3, [r6, #4]
 8004bf0:	6862      	ldr	r2, [r4, #4]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004bfa:	d0a2      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7ff facc 	bl	8004198 <HAL_GetTick>
 8004c00:	1bc0      	subs	r0, r0, r7
 8004c02:	4540      	cmp	r0, r8
 8004c04:	d9f3      	bls.n	8004bee <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8004c06:	2003      	movs	r0, #3
 8004c08:	e78e      	b.n	8004b28 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c0a:	2a02      	cmp	r2, #2
 8004c0c:	d102      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c12:	e7e1      	b.n	8004bd8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	f013 0f02 	tst.w	r3, #2
 8004c18:	e7de      	b.n	8004bd8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	6813      	ldr	r3, [r2, #0]
 8004c1c:	f023 0307 	bic.w	r3, r3, #7
 8004c20:	432b      	orrs	r3, r5
 8004c22:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c24:	6813      	ldr	r3, [r2, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	42ab      	cmp	r3, r5
 8004c2c:	f47f af7b 	bne.w	8004b26 <HAL_RCC_ClockConfig+0xa>
 8004c30:	e78d      	b.n	8004b4e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c32:	686b      	ldr	r3, [r5, #4]
 8004c34:	68e1      	ldr	r1, [r4, #12]
 8004c36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	606b      	str	r3, [r5, #4]
 8004c3e:	e78b      	b.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40021000 	.word	0x40021000
 8004c48:	08006750 	.word	0x08006750
 8004c4c:	20000004 	.word	0x20000004
 8004c50:	2000000c 	.word	0x2000000c

08004c54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	4a03      	ldr	r2, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c62:	6810      	ldr	r0, [r2, #0]
}
 8004c64:	40d8      	lsrs	r0, r3
 8004c66:	4770      	bx	lr
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	08006760 	.word	0x08006760
 8004c70:	20000004 	.word	0x20000004

08004c74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004c76:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c7e:	5cd3      	ldrb	r3, [r2, r3]
 8004c80:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c82:	6810      	ldr	r0, [r2, #0]
}
 8004c84:	40d8      	lsrs	r0, r3
 8004c86:	4770      	bx	lr
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	08006760 	.word	0x08006760
 8004c90:	20000004 	.word	0x20000004

08004c94 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c94:	6a03      	ldr	r3, [r0, #32]
{
 8004c96:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ca6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004caa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004cae:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004cb2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cb4:	4d0a      	ldr	r5, [pc, #40]	; (8004ce0 <TIM_OC1_SetConfig+0x4c>)
 8004cb6:	42a8      	cmp	r0, r5
 8004cb8:	d10b      	bne.n	8004cd2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cbc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004cc0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cc6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004cca:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cd4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cd6:	684a      	ldr	r2, [r1, #4]
 8004cd8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cda:	6203      	str	r3, [r0, #32]
}
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	bf00      	nop
 8004ce0:	40012c00 	.word	0x40012c00

08004ce4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce4:	6a03      	ldr	r3, [r0, #32]
{
 8004ce6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cf6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004cfa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cfc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004cfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d06:	4d0b      	ldr	r5, [pc, #44]	; (8004d34 <TIM_OC3_SetConfig+0x50>)
 8004d08:	42a8      	cmp	r0, r5
 8004d0a:	d10d      	bne.n	8004d28 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d0c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d16:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d1a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004d1e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d24:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2c:	684a      	ldr	r2, [r1, #4]
 8004d2e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d30:	6203      	str	r3, [r0, #32]
}
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	40012c00 	.word	0x40012c00

08004d38 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d38:	6a03      	ldr	r3, [r0, #32]
{
 8004d3a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d46:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d4a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d52:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d58:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5c:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <TIM_OC4_SetConfig+0x40>)
 8004d5e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d60:	bf02      	ittt	eq
 8004d62:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d64:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d68:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d6e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d70:	684a      	ldr	r2, [r1, #4]
 8004d72:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	6203      	str	r3, [r0, #32]
}
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	40012c00 	.word	0x40012c00

08004d7c <HAL_TIM_PWM_MspInit>:
 8004d7c:	4770      	bx	lr
	...

08004d80 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d80:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <TIM_Base_SetConfig+0x5c>)
{
 8004d82:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d84:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8004d86:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	d005      	beq.n	8004d96 <TIM_Base_SetConfig+0x16>
 8004d8a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004d8e:	d002      	beq.n	8004d96 <TIM_Base_SetConfig+0x16>
 8004d90:	4c13      	ldr	r4, [pc, #76]	; (8004de0 <TIM_Base_SetConfig+0x60>)
 8004d92:	42a0      	cmp	r0, r4
 8004d94:	d110      	bne.n	8004db8 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 8004d96:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9c:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004d9e:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da2:	d005      	beq.n	8004db0 <TIM_Base_SetConfig+0x30>
 8004da4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004da8:	d002      	beq.n	8004db0 <TIM_Base_SetConfig+0x30>
 8004daa:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <TIM_Base_SetConfig+0x60>)
 8004dac:	4290      	cmp	r0, r2
 8004dae:	d103      	bne.n	8004db8 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	694a      	ldr	r2, [r1, #20]
 8004dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dbe:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004dc0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc2:	688b      	ldr	r3, [r1, #8]
 8004dc4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004dc6:	680b      	ldr	r3, [r1, #0]
 8004dc8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dca:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <TIM_Base_SetConfig+0x5c>)
 8004dcc:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004dce:	bf04      	itt	eq
 8004dd0:	690b      	ldreq	r3, [r1, #16]
 8004dd2:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	6143      	str	r3, [r0, #20]
}
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	bf00      	nop
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40000400 	.word	0x40000400

08004de4 <HAL_TIM_Base_Init>:
{
 8004de4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004de6:	4604      	mov	r4, r0
 8004de8:	b330      	cbz	r0, 8004e38 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004dea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004df2:	b91b      	cbnz	r3, 8004dfc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004df4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004df8:	f7fe fb44 	bl	8003484 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	1d21      	adds	r1, r4, #4
 8004e06:	f7ff ffbb 	bl	8004d80 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0a:	2301      	movs	r3, #1
  return HAL_OK;
 8004e0c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004e16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004e1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004e1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004e36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e38:	2001      	movs	r0, #1
 8004e3a:	e7fc      	b.n	8004e36 <HAL_TIM_Base_Init+0x52>

08004e3c <HAL_TIM_PWM_Init>:
{
 8004e3c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004e3e:	4604      	mov	r4, r0
 8004e40:	b330      	cbz	r0, 8004e90 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e4a:	b91b      	cbnz	r3, 8004e54 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004e4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004e50:	f7ff ff94 	bl	8004d7c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e56:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5c:	1d21      	adds	r1, r4, #4
 8004e5e:	f7ff ff8f 	bl	8004d80 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e62:	2301      	movs	r3, #1
  return HAL_OK;
 8004e64:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004e6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004e72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004e76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004e8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e90:	2001      	movs	r0, #1
 8004e92:	e7fc      	b.n	8004e8e <HAL_TIM_PWM_Init+0x52>

08004e94 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e94:	6a03      	ldr	r3, [r0, #32]
{
 8004e96:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e98:	f023 0310 	bic.w	r3, r3, #16
 8004e9c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004e9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004ea0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eaa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb8:	4d0b      	ldr	r5, [pc, #44]	; (8004ee8 <TIM_OC2_SetConfig+0x54>)
 8004eba:	42a8      	cmp	r0, r5
 8004ebc:	d10d      	bne.n	8004eda <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ebe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ecc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004ed0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004eda:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004edc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004ede:	684a      	ldr	r2, [r1, #4]
 8004ee0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004ee2:	6203      	str	r3, [r0, #32]
}
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40012c00 	.word	0x40012c00

08004eec <HAL_TIM_PWM_ConfigChannel>:
{
 8004eec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004eee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004ef2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d052      	beq.n	8004f9e <HAL_TIM_PWM_ConfigChannel+0xb2>
 8004ef8:	2301      	movs	r3, #1
  switch (Channel)
 8004efa:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8004efc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004f00:	d03c      	beq.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x90>
 8004f02:	d806      	bhi.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x26>
 8004f04:	b1c2      	cbz	r2, 8004f38 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8004f06:	2a04      	cmp	r2, #4
 8004f08:	d027      	beq.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004f10:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004f12:	2a0c      	cmp	r2, #12
 8004f14:	d1f9      	bne.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	f7ff ff0e 	bl	8004d38 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f1c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f36:	e030      	b.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f38:	6800      	ldr	r0, [r0, #0]
 8004f3a:	f7ff feab 	bl	8004c94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f3e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f40:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	f042 0208 	orr.w	r2, r2, #8
 8004f48:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	f022 0204 	bic.w	r2, r2, #4
 8004f50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f56:	619a      	str	r2, [r3, #24]
      break;
 8004f58:	e7d7      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	f7ff ff9a 	bl	8004e94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f60:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f62:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f7a:	e7ec      	b.n	8004f56 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f7ff feb1 	bl	8004ce4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f82:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f84:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	f042 0208 	orr.w	r2, r2, #8
 8004f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	f022 0204 	bic.w	r2, r2, #4
 8004f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f9a:	61da      	str	r2, [r3, #28]
      break;
 8004f9c:	e7b5      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8004f9e:	2002      	movs	r0, #2
 8004fa0:	e7b6      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x24>

08004fa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa2:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fa4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa6:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004fb0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb2:	6082      	str	r2, [r0, #8]
}
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <HAL_TIM_ConfigClockSource>:
{
 8004fb6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004fb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004fbc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	f04f 0002 	mov.w	r0, #2
 8004fc4:	d027      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x60>
 8004fc6:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004fcc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004fce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004fd2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004fdc:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004fde:	680b      	ldr	r3, [r1, #0]
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d04d      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0xca>
 8004fe4:	d832      	bhi.n	800504c <HAL_TIM_ConfigClockSource+0x96>
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d062      	beq.n	80050b0 <HAL_TIM_ConfigClockSource+0xfa>
 8004fea:	d815      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x62>
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d003      	beq.n	8004ff8 <HAL_TIM_ConfigClockSource+0x42>
 8004ff0:	d809      	bhi.n	8005006 <HAL_TIM_ConfigClockSource+0x50>
 8004ff2:	f033 0210 	bics.w	r2, r3, #16
 8004ff6:	d108      	bne.n	800500a <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8004ff8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f043 0307 	orr.w	r3, r3, #7
 8005004:	e020      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005006:	2b30      	cmp	r3, #48	; 0x30
 8005008:	d0f6      	beq.n	8004ff8 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800500a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800500c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800500e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005012:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005016:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005018:	2b50      	cmp	r3, #80	; 0x50
 800501a:	d1f6      	bne.n	800500a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800501c:	684a      	ldr	r2, [r1, #4]
 800501e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005020:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005022:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005024:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005028:	f025 0501 	bic.w	r5, r5, #1
 800502c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005030:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005036:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800503a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800503c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800503e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005044:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005048:	6083      	str	r3, [r0, #8]
}
 800504a:	e7de      	b.n	800500a <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 800504c:	2b70      	cmp	r3, #112	; 0x70
 800504e:	d00c      	beq.n	800506a <HAL_TIM_ConfigClockSource+0xb4>
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	d1d9      	bne.n	800500a <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8005056:	68cb      	ldr	r3, [r1, #12]
 8005058:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800505c:	f7ff ffa1 	bl	8004fa2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	6893      	ldr	r3, [r2, #8]
 8005064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005068:	e008      	b.n	800507c <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800506a:	68cb      	ldr	r3, [r1, #12]
 800506c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005070:	f7ff ff97 	bl	8004fa2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005074:	6822      	ldr	r2, [r4, #0]
 8005076:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800507c:	6093      	str	r3, [r2, #8]
      break;
 800507e:	e7c4      	b.n	800500a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005080:	684d      	ldr	r5, [r1, #4]
 8005082:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005084:	6a01      	ldr	r1, [r0, #32]
 8005086:	f021 0110 	bic.w	r1, r1, #16
 800508a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800508e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005090:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005098:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800509c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80050a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80050a2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80050a4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050aa:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80050ae:	e7cb      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b0:	684a      	ldr	r2, [r1, #4]
 80050b2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80050b4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b6:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050bc:	f025 0501 	bic.w	r5, r5, #1
 80050c0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c2:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80050c4:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ca:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80050ce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80050d0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80050d2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050d8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80050dc:	e7b4      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x92>

080050de <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050de:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e0:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050e2:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e4:	f001 011f 	and.w	r1, r1, #31
 80050e8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80050ea:	ea23 0304 	bic.w	r3, r3, r4
 80050ee:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f0:	6a03      	ldr	r3, [r0, #32]
 80050f2:	408a      	lsls	r2, r1
 80050f4:	431a      	orrs	r2, r3
 80050f6:	6202      	str	r2, [r0, #32]
}
 80050f8:	bd10      	pop	{r4, pc}
	...

080050fc <HAL_TIM_OC_Start>:
{
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005100:	b929      	cbnz	r1, 800510e <HAL_TIM_OC_Start+0x12>
 8005102:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005106:	2b01      	cmp	r3, #1
 8005108:	d021      	beq.n	800514e <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800510a:	2001      	movs	r0, #1
}
 800510c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510e:	2904      	cmp	r1, #4
 8005110:	d107      	bne.n	8005122 <HAL_TIM_OC_Start+0x26>
 8005112:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005116:	2b01      	cmp	r3, #1
 8005118:	d1f7      	bne.n	800510a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800511a:	2302      	movs	r3, #2
 800511c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005120:	e018      	b.n	8005154 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005122:	2908      	cmp	r1, #8
 8005124:	d107      	bne.n	8005136 <HAL_TIM_OC_Start+0x3a>
 8005126:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800512a:	2b01      	cmp	r3, #1
 800512c:	d1ed      	bne.n	800510a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512e:	2302      	movs	r3, #2
 8005130:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005134:	e00e      	b.n	8005154 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005136:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800513a:	2b01      	cmp	r3, #1
 800513c:	d1e5      	bne.n	800510a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800513e:	2904      	cmp	r1, #4
 8005140:	d0eb      	beq.n	800511a <HAL_TIM_OC_Start+0x1e>
 8005142:	2908      	cmp	r1, #8
 8005144:	d0f3      	beq.n	800512e <HAL_TIM_OC_Start+0x32>
 8005146:	2302      	movs	r3, #2
 8005148:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800514c:	e002      	b.n	8005154 <HAL_TIM_OC_Start+0x58>
 800514e:	2302      	movs	r3, #2
 8005150:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005154:	2201      	movs	r2, #1
 8005156:	6820      	ldr	r0, [r4, #0]
 8005158:	f7ff ffc1 	bl	80050de <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <HAL_TIM_OC_Start+0x94>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10a      	bne.n	800517a <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8005164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	2a06      	cmp	r2, #6
 8005174:	d107      	bne.n	8005186 <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 8005176:	2000      	movs	r0, #0
 8005178:	e7c8      	b.n	800510c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d0f5      	beq.n	800516c <HAL_TIM_OC_Start+0x70>
 8005180:	4a04      	ldr	r2, [pc, #16]	; (8005194 <HAL_TIM_OC_Start+0x98>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d0f2      	beq.n	800516c <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e7f2      	b.n	8005176 <HAL_TIM_OC_Start+0x7a>
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40000400 	.word	0x40000400

08005198 <HAL_TIM_PWM_Start>:
 8005198:	f7ff bfb0 	b.w	80050fc <HAL_TIM_OC_Start>

0800519c <HAL_TIM_OC_Stop>:
{
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051a0:	2200      	movs	r2, #0
 80051a2:	6800      	ldr	r0, [r0, #0]
{
 80051a4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051a6:	f7ff ff9a 	bl	80050de <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <HAL_TIM_OC_Stop+0x74>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10d      	bne.n	80051ce <HAL_TIM_OC_Stop+0x32>
    __HAL_TIM_MOE_DISABLE(htim);
 80051b2:	f241 1211 	movw	r2, #4369	; 0x1111
 80051b6:	6a19      	ldr	r1, [r3, #32]
 80051b8:	4211      	tst	r1, r2
 80051ba:	d108      	bne.n	80051ce <HAL_TIM_OC_Stop+0x32>
 80051bc:	f240 4244 	movw	r2, #1092	; 0x444
 80051c0:	6a19      	ldr	r1, [r3, #32]
 80051c2:	4211      	tst	r1, r2
 80051c4:	bf02      	ittt	eq
 80051c6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80051c8:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80051cc:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80051ce:	f241 1211 	movw	r2, #4369	; 0x1111
 80051d2:	6a19      	ldr	r1, [r3, #32]
 80051d4:	4211      	tst	r1, r2
 80051d6:	d108      	bne.n	80051ea <HAL_TIM_OC_Stop+0x4e>
 80051d8:	f240 4244 	movw	r2, #1092	; 0x444
 80051dc:	6a19      	ldr	r1, [r3, #32]
 80051de:	4211      	tst	r1, r2
 80051e0:	bf02      	ittt	eq
 80051e2:	681a      	ldreq	r2, [r3, #0]
 80051e4:	f022 0201 	biceq.w	r2, r2, #1
 80051e8:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	2301      	movs	r3, #1
 80051ec:	b91d      	cbnz	r5, 80051f6 <HAL_TIM_OC_Stop+0x5a>
 80051ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80051f2:	2000      	movs	r0, #0
 80051f4:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	2d04      	cmp	r5, #4
 80051f8:	d102      	bne.n	8005200 <HAL_TIM_OC_Stop+0x64>
 80051fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80051fe:	e7f8      	b.n	80051f2 <HAL_TIM_OC_Stop+0x56>
 8005200:	2d08      	cmp	r5, #8
 8005202:	bf0c      	ite	eq
 8005204:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8005208:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 800520c:	e7f1      	b.n	80051f2 <HAL_TIM_OC_Stop+0x56>
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00

08005214 <HAL_TIM_PWM_Stop>:
 8005214:	f7ff bfc2 	b.w	800519c <HAL_TIM_OC_Stop>

08005218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005218:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 800521e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005220:	2a01      	cmp	r2, #1
 8005222:	f04f 0002 	mov.w	r0, #2
 8005226:	d01e      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005228:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800522a:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800522e:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005230:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005232:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005236:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8005238:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800523a:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	4c0a      	ldr	r4, [pc, #40]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800523e:	42a2      	cmp	r2, r4
 8005240:	d006      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8005242:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005246:	d003      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8005248:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800524c:	42a2      	cmp	r2, r4
 800524e:	d104      	bne.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005250:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005252:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005256:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005258:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525a:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 800525c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005262:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8005266:	bd30      	pop	{r4, r5, pc}
 8005268:	40012c00 	.word	0x40012c00

0800526c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800526c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d01f      	beq.n	80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005274:	68cb      	ldr	r3, [r1, #12]
 8005276:	688a      	ldr	r2, [r1, #8]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800527e:	684a      	ldr	r2, [r1, #4]
 8005280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005284:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005286:	680a      	ldr	r2, [r1, #0]
 8005288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800528c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800528e:	690a      	ldr	r2, [r1, #16]
 8005290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005294:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005296:	694a      	ldr	r2, [r1, #20]
 8005298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800529e:	69ca      	ldr	r2, [r1, #28]
 80052a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a4:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052a6:	6802      	ldr	r2, [r0, #0]
 80052a8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052aa:	2300      	movs	r3, #0
 80052ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80052b0:	4618      	mov	r0, r3
 80052b2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80052b4:	2002      	movs	r0, #2
}
 80052b6:	4770      	bx	lr

080052b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80052b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80052ba:	2400      	movs	r4, #0
 80052bc:	2310      	movs	r3, #16
 80052be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80052c2:	6803      	ldr	r3, [r0, #0]
 80052c4:	4615      	mov	r5, r2
 80052c6:	699e      	ldr	r6, [r3, #24]
 80052c8:	e9cd 4400 	strd	r4, r4, [sp]
 80052cc:	466b      	mov	r3, sp
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	47b0      	blx	r6
 80052d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052d6:	f003 0306 	and.w	r3, r3, #6
 80052da:	2b06      	cmp	r3, #6
 80052dc:	bf09      	itett	eq
 80052de:	2001      	moveq	r0, #1
 80052e0:	4620      	movne	r0, r4
 80052e2:	9b00      	ldreq	r3, [sp, #0]
 80052e4:	602b      	streq	r3, [r5, #0]
 80052e6:	b004      	add	sp, #16
 80052e8:	bd70      	pop	{r4, r5, r6, pc}

080052ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80052ea:	9800      	ldr	r0, [sp, #0]
 80052ec:	4290      	cmp	r0, r2
 80052ee:	bf14      	ite	ne
 80052f0:	2001      	movne	r0, #1
 80052f2:	2006      	moveq	r0, #6
 80052f4:	4770      	bx	lr
	...

080052f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	4604      	mov	r4, r0
 80052fc:	4b02      	ldr	r3, [pc, #8]	; (8005308 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80052fe:	6003      	str	r3, [r0, #0]
 8005300:	f000 fc3b 	bl	8005b7a <_ZNSt9type_infoD1Ev>
 8005304:	4620      	mov	r0, r4
 8005306:	bd10      	pop	{r4, pc}
 8005308:	080068e0 	.word	0x080068e0

0800530c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4604      	mov	r4, r0
 8005310:	f7ff fff2 	bl	80052f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005314:	4620      	mov	r0, r4
 8005316:	2108      	movs	r1, #8
 8005318:	f000 f842 	bl	80053a0 <_ZdlPvj>
 800531c:	4620      	mov	r0, r4
 800531e:	bd10      	pop	{r4, pc}

08005320 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005324:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005328:	461f      	mov	r7, r3
 800532a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800532e:	4598      	cmp	r8, r3
 8005330:	4606      	mov	r6, r0
 8005332:	4615      	mov	r5, r2
 8005334:	d107      	bne.n	8005346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005336:	9907      	ldr	r1, [sp, #28]
 8005338:	f000 fc22 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 800533c:	b118      	cbz	r0, 8005346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800533e:	7165      	strb	r5, [r4, #5]
 8005340:	2000      	movs	r0, #0
 8005342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005346:	4639      	mov	r1, r7
 8005348:	4630      	mov	r0, r6
 800534a:	f000 fc19 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 800534e:	2800      	cmp	r0, #0
 8005350:	d0f6      	beq.n	8005340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8005352:	2301      	movs	r3, #1
 8005354:	f8c4 8000 	str.w	r8, [r4]
 8005358:	7125      	strb	r5, [r4, #4]
 800535a:	71a3      	strb	r3, [r4, #6]
 800535c:	e7f0      	b.n	8005340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800535e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800535e:	b538      	push	{r3, r4, r5, lr}
 8005360:	4615      	mov	r5, r2
 8005362:	461c      	mov	r4, r3
 8005364:	f000 fc0c 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005368:	b120      	cbz	r0, 8005374 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800536a:	2308      	movs	r3, #8
 800536c:	60e3      	str	r3, [r4, #12]
 800536e:	2306      	movs	r3, #6
 8005370:	6025      	str	r5, [r4, #0]
 8005372:	7123      	strb	r3, [r4, #4]
 8005374:	bd38      	pop	{r3, r4, r5, pc}

08005376 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	4605      	mov	r5, r0
 800537c:	460c      	mov	r4, r1
 800537e:	4616      	mov	r6, r2
 8005380:	461f      	mov	r7, r3
 8005382:	f000 fbfd 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005386:	b948      	cbnz	r0, 800539c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005388:	2f03      	cmp	r7, #3
 800538a:	d807      	bhi.n	800539c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	4632      	mov	r2, r6
 8005390:	4629      	mov	r1, r5
 8005392:	4620      	mov	r0, r4
 8005394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4718      	bx	r3
 800539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053a0 <_ZdlPvj>:
 80053a0:	f000 be47 	b.w	8006032 <_ZdlPv>

080053a4 <__cxa_end_cleanup>:
 80053a4:	b41e      	push	{r1, r2, r3, r4}
 80053a6:	f000 f89c 	bl	80054e2 <__gnu_end_cleanup>
 80053aa:	bc1e      	pop	{r1, r2, r3, r4}
 80053ac:	f7fb ff72 	bl	8001294 <_Unwind_Resume>

080053b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80053b0:	7803      	ldrb	r3, [r0, #0]
 80053b2:	2b47      	cmp	r3, #71	; 0x47
 80053b4:	d117      	bne.n	80053e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053b6:	7843      	ldrb	r3, [r0, #1]
 80053b8:	2b4e      	cmp	r3, #78	; 0x4e
 80053ba:	d114      	bne.n	80053e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053bc:	7883      	ldrb	r3, [r0, #2]
 80053be:	2b55      	cmp	r3, #85	; 0x55
 80053c0:	d111      	bne.n	80053e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053c2:	78c3      	ldrb	r3, [r0, #3]
 80053c4:	2b43      	cmp	r3, #67	; 0x43
 80053c6:	d10e      	bne.n	80053e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053c8:	7903      	ldrb	r3, [r0, #4]
 80053ca:	2b43      	cmp	r3, #67	; 0x43
 80053cc:	d10b      	bne.n	80053e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053ce:	7943      	ldrb	r3, [r0, #5]
 80053d0:	2b2b      	cmp	r3, #43	; 0x2b
 80053d2:	d108      	bne.n	80053e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053d4:	7983      	ldrb	r3, [r0, #6]
 80053d6:	2b2b      	cmp	r3, #43	; 0x2b
 80053d8:	d105      	bne.n	80053e6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053da:	79c0      	ldrb	r0, [r0, #7]
 80053dc:	2801      	cmp	r0, #1
 80053de:	bf8c      	ite	hi
 80053e0:	2000      	movhi	r0, #0
 80053e2:	2001      	movls	r0, #1
 80053e4:	4770      	bx	lr
 80053e6:	2000      	movs	r0, #0
 80053e8:	4770      	bx	lr
	...

080053ec <__cxa_type_match>:
 80053ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80053f0:	461d      	mov	r5, r3
 80053f2:	7803      	ldrb	r3, [r0, #0]
 80053f4:	460e      	mov	r6, r1
 80053f6:	2b47      	cmp	r3, #71	; 0x47
 80053f8:	4602      	mov	r2, r0
 80053fa:	79c1      	ldrb	r1, [r0, #7]
 80053fc:	d113      	bne.n	8005426 <__cxa_type_match+0x3a>
 80053fe:	7843      	ldrb	r3, [r0, #1]
 8005400:	2b4e      	cmp	r3, #78	; 0x4e
 8005402:	d110      	bne.n	8005426 <__cxa_type_match+0x3a>
 8005404:	7883      	ldrb	r3, [r0, #2]
 8005406:	2b55      	cmp	r3, #85	; 0x55
 8005408:	d10d      	bne.n	8005426 <__cxa_type_match+0x3a>
 800540a:	78c3      	ldrb	r3, [r0, #3]
 800540c:	2b43      	cmp	r3, #67	; 0x43
 800540e:	d10a      	bne.n	8005426 <__cxa_type_match+0x3a>
 8005410:	7903      	ldrb	r3, [r0, #4]
 8005412:	2b46      	cmp	r3, #70	; 0x46
 8005414:	d107      	bne.n	8005426 <__cxa_type_match+0x3a>
 8005416:	7943      	ldrb	r3, [r0, #5]
 8005418:	2b4f      	cmp	r3, #79	; 0x4f
 800541a:	d104      	bne.n	8005426 <__cxa_type_match+0x3a>
 800541c:	7983      	ldrb	r3, [r0, #6]
 800541e:	2b52      	cmp	r3, #82	; 0x52
 8005420:	d101      	bne.n	8005426 <__cxa_type_match+0x3a>
 8005422:	2900      	cmp	r1, #0
 8005424:	d030      	beq.n	8005488 <__cxa_type_match+0x9c>
 8005426:	4610      	mov	r0, r2
 8005428:	f7ff ffc2 	bl	80053b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800542c:	2300      	movs	r3, #0
 800542e:	f080 0401 	eor.w	r4, r0, #1
 8005432:	b2e4      	uxtb	r4, r4
 8005434:	2000      	movs	r0, #0
 8005436:	9001      	str	r0, [sp, #4]
 8005438:	bb4b      	cbnz	r3, 800548e <__cxa_type_match+0xa2>
 800543a:	bb54      	cbnz	r4, 8005492 <__cxa_type_match+0xa6>
 800543c:	2901      	cmp	r1, #1
 800543e:	bf0a      	itet	eq
 8005440:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005444:	f1a2 0320 	subne.w	r3, r2, #32
 8005448:	3b78      	subeq	r3, #120	; 0x78
 800544a:	2901      	cmp	r1, #1
 800544c:	bf0c      	ite	eq
 800544e:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005452:	3258      	addne	r2, #88	; 0x58
 8005454:	681c      	ldr	r4, [r3, #0]
 8005456:	9201      	str	r2, [sp, #4]
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	4620      	mov	r0, r4
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	4798      	blx	r3
 8005460:	b1c8      	cbz	r0, 8005496 <__cxa_type_match+0xaa>
 8005462:	2702      	movs	r7, #2
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	6833      	ldr	r3, [r6, #0]
 800546c:	4621      	mov	r1, r4
 800546e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005472:	4630      	mov	r0, r6
 8005474:	2301      	movs	r3, #1
 8005476:	aa01      	add	r2, sp, #4
 8005478:	47c0      	blx	r8
 800547a:	b170      	cbz	r0, 800549a <__cxa_type_match+0xae>
 800547c:	9b01      	ldr	r3, [sp, #4]
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	4638      	mov	r0, r7
 8005482:	b002      	add	sp, #8
 8005484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005488:	2301      	movs	r3, #1
 800548a:	460c      	mov	r4, r1
 800548c:	e7d2      	b.n	8005434 <__cxa_type_match+0x48>
 800548e:	4c04      	ldr	r4, [pc, #16]	; (80054a0 <__cxa_type_match+0xb4>)
 8005490:	e7e2      	b.n	8005458 <__cxa_type_match+0x6c>
 8005492:	4c04      	ldr	r4, [pc, #16]	; (80054a4 <__cxa_type_match+0xb8>)
 8005494:	e7e0      	b.n	8005458 <__cxa_type_match+0x6c>
 8005496:	2701      	movs	r7, #1
 8005498:	e7e7      	b.n	800546a <__cxa_type_match+0x7e>
 800549a:	4607      	mov	r7, r0
 800549c:	e7f0      	b.n	8005480 <__cxa_type_match+0x94>
 800549e:	bf00      	nop
 80054a0:	08006904 	.word	0x08006904
 80054a4:	0800690c 	.word	0x0800690c

080054a8 <__cxa_begin_cleanup>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4604      	mov	r4, r0
 80054ac:	f000 f832 	bl	8005514 <__cxa_get_globals>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4620      	mov	r0, r4
 80054b4:	f1a4 0120 	sub.w	r1, r4, #32
 80054b8:	f7ff ff7a 	bl	80053b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80054bc:	b160      	cbz	r0, 80054d8 <__cxa_begin_cleanup+0x30>
 80054be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80054c2:	3301      	adds	r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80054ca:	d103      	bne.n	80054d4 <__cxa_begin_cleanup+0x2c>
 80054cc:	6893      	ldr	r3, [r2, #8]
 80054ce:	f844 3c08 	str.w	r3, [r4, #-8]
 80054d2:	6091      	str	r1, [r2, #8]
 80054d4:	2001      	movs	r0, #1
 80054d6:	bd10      	pop	{r4, pc}
 80054d8:	6893      	ldr	r3, [r2, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f9      	beq.n	80054d2 <__cxa_begin_cleanup+0x2a>
 80054de:	f000 faa3 	bl	8005a28 <_ZSt9terminatev>

080054e2 <__gnu_end_cleanup>:
 80054e2:	b510      	push	{r4, lr}
 80054e4:	f000 f816 	bl	8005514 <__cxa_get_globals>
 80054e8:	6882      	ldr	r2, [r0, #8]
 80054ea:	4601      	mov	r1, r0
 80054ec:	b90a      	cbnz	r2, 80054f2 <__gnu_end_cleanup+0x10>
 80054ee:	f000 fa9b 	bl	8005a28 <_ZSt9terminatev>
 80054f2:	f102 0420 	add.w	r4, r2, #32
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff ff5a 	bl	80053b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80054fc:	b140      	cbz	r0, 8005510 <__gnu_end_cleanup+0x2e>
 80054fe:	69d3      	ldr	r3, [r2, #28]
 8005500:	3b01      	subs	r3, #1
 8005502:	61d3      	str	r3, [r2, #28]
 8005504:	b913      	cbnz	r3, 800550c <__gnu_end_cleanup+0x2a>
 8005506:	6990      	ldr	r0, [r2, #24]
 8005508:	6088      	str	r0, [r1, #8]
 800550a:	6193      	str	r3, [r2, #24]
 800550c:	4620      	mov	r0, r4
 800550e:	bd10      	pop	{r4, pc}
 8005510:	6088      	str	r0, [r1, #8]
 8005512:	e7fb      	b.n	800550c <__gnu_end_cleanup+0x2a>

08005514 <__cxa_get_globals>:
 8005514:	4800      	ldr	r0, [pc, #0]	; (8005518 <__cxa_get_globals+0x4>)
 8005516:	4770      	bx	lr
 8005518:	20000430 	.word	0x20000430

0800551c <_ZL12read_uleb128PKhPm>:
 800551c:	2300      	movs	r3, #0
 800551e:	461a      	mov	r2, r3
 8005520:	b530      	push	{r4, r5, lr}
 8005522:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005526:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800552a:	4094      	lsls	r4, r2
 800552c:	4323      	orrs	r3, r4
 800552e:	062c      	lsls	r4, r5, #24
 8005530:	f102 0207 	add.w	r2, r2, #7
 8005534:	d4f5      	bmi.n	8005522 <_ZL12read_uleb128PKhPm+0x6>
 8005536:	600b      	str	r3, [r1, #0]
 8005538:	bd30      	pop	{r4, r5, pc}

0800553a <_ZL12read_sleb128PKhPl>:
 800553a:	2300      	movs	r3, #0
 800553c:	461a      	mov	r2, r3
 800553e:	b530      	push	{r4, r5, lr}
 8005540:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005544:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8005548:	4095      	lsls	r5, r2
 800554a:	432b      	orrs	r3, r5
 800554c:	0625      	lsls	r5, r4, #24
 800554e:	f102 0207 	add.w	r2, r2, #7
 8005552:	d4f5      	bmi.n	8005540 <_ZL12read_sleb128PKhPl+0x6>
 8005554:	2a1f      	cmp	r2, #31
 8005556:	d806      	bhi.n	8005566 <_ZL12read_sleb128PKhPl+0x2c>
 8005558:	0664      	lsls	r4, r4, #25
 800555a:	bf42      	ittt	mi
 800555c:	f04f 34ff 	movmi.w	r4, #4294967295
 8005560:	fa04 f202 	lslmi.w	r2, r4, r2
 8005564:	4313      	orrmi	r3, r2
 8005566:	600b      	str	r3, [r1, #0]
 8005568:	bd30      	pop	{r4, r5, pc}

0800556a <_ZL28read_encoded_value_with_basehjPKhPj>:
 800556a:	2850      	cmp	r0, #80	; 0x50
 800556c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005570:	4606      	mov	r6, r0
 8005572:	4688      	mov	r8, r1
 8005574:	4615      	mov	r5, r2
 8005576:	461f      	mov	r7, r3
 8005578:	d108      	bne.n	800558c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800557a:	1cd0      	adds	r0, r2, #3
 800557c:	f020 0003 	bic.w	r0, r0, #3
 8005580:	f850 4b04 	ldr.w	r4, [r0], #4
 8005584:	603c      	str	r4, [r7, #0]
 8005586:	b002      	add	sp, #8
 8005588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800558c:	f000 030f 	and.w	r3, r0, #15
 8005590:	2b0c      	cmp	r3, #12
 8005592:	d82e      	bhi.n	80055f2 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8005594:	e8df f003 	tbb	[pc, r3]
 8005598:	251d0725 	.word	0x251d0725
 800559c:	2d2d2d29 	.word	0x2d2d2d29
 80055a0:	2521182d 	.word	0x2521182d
 80055a4:	29          	.byte	0x29
 80055a5:	00          	.byte	0x00
 80055a6:	4628      	mov	r0, r5
 80055a8:	a901      	add	r1, sp, #4
 80055aa:	f7ff ffb7 	bl	800551c <_ZL12read_uleb128PKhPm>
 80055ae:	9c01      	ldr	r4, [sp, #4]
 80055b0:	2c00      	cmp	r4, #0
 80055b2:	d0e7      	beq.n	8005584 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80055b4:	f006 0370 	and.w	r3, r6, #112	; 0x70
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	bf08      	it	eq
 80055bc:	46a8      	moveq	r8, r5
 80055be:	0633      	lsls	r3, r6, #24
 80055c0:	4444      	add	r4, r8
 80055c2:	bf48      	it	mi
 80055c4:	6824      	ldrmi	r4, [r4, #0]
 80055c6:	e7dd      	b.n	8005584 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80055c8:	4628      	mov	r0, r5
 80055ca:	a901      	add	r1, sp, #4
 80055cc:	f7ff ffb5 	bl	800553a <_ZL12read_sleb128PKhPl>
 80055d0:	e7ed      	b.n	80055ae <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80055d2:	4628      	mov	r0, r5
 80055d4:	f830 4b02 	ldrh.w	r4, [r0], #2
 80055d8:	e7ea      	b.n	80055b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80055da:	4628      	mov	r0, r5
 80055dc:	f930 4b02 	ldrsh.w	r4, [r0], #2
 80055e0:	e7e6      	b.n	80055b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80055e2:	4628      	mov	r0, r5
 80055e4:	f850 4b04 	ldr.w	r4, [r0], #4
 80055e8:	e7e2      	b.n	80055b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80055ea:	4628      	mov	r0, r5
 80055ec:	f850 4b08 	ldr.w	r4, [r0], #8
 80055f0:	e7de      	b.n	80055b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80055f2:	f000 fdaf 	bl	8006154 <abort>

080055f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80055f6:	b508      	push	{r3, lr}
 80055f8:	4603      	mov	r3, r0
 80055fa:	2bff      	cmp	r3, #255	; 0xff
 80055fc:	4608      	mov	r0, r1
 80055fe:	d010      	beq.n	8005622 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005600:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005604:	2a30      	cmp	r2, #48	; 0x30
 8005606:	d012      	beq.n	800562e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8005608:	d807      	bhi.n	800561a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800560a:	2a20      	cmp	r2, #32
 800560c:	d00b      	beq.n	8005626 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 800560e:	d802      	bhi.n	8005616 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005610:	f013 0f60 	tst.w	r3, #96	; 0x60
 8005614:	d005      	beq.n	8005622 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005616:	f000 fd9d 	bl	8006154 <abort>
 800561a:	2a40      	cmp	r2, #64	; 0x40
 800561c:	d00b      	beq.n	8005636 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 800561e:	2a50      	cmp	r2, #80	; 0x50
 8005620:	d1f9      	bne.n	8005616 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005622:	2000      	movs	r0, #0
 8005624:	bd08      	pop	{r3, pc}
 8005626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800562a:	f000 bf46 	b.w	80064ba <_Unwind_GetTextRelBase>
 800562e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005632:	f000 bf3f 	b.w	80064b4 <_Unwind_GetDataRelBase>
 8005636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800563a:	f7fc b829 	b.w	8001690 <_Unwind_GetRegionStart>

0800563e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 800563e:	b570      	push	{r4, r5, r6, lr}
 8005640:	460c      	mov	r4, r1
 8005642:	4601      	mov	r1, r0
 8005644:	4620      	mov	r0, r4
 8005646:	4615      	mov	r5, r2
 8005648:	461e      	mov	r6, r3
 800564a:	f7ff ffd4 	bl	80055f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800564e:	4633      	mov	r3, r6
 8005650:	4601      	mov	r1, r0
 8005652:	462a      	mov	r2, r5
 8005654:	4620      	mov	r0, r4
 8005656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800565a:	f7ff bf86 	b.w	800556a <_ZL28read_encoded_value_with_basehjPKhPj>

0800565e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800565e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005660:	460c      	mov	r4, r1
 8005662:	4615      	mov	r5, r2
 8005664:	4606      	mov	r6, r0
 8005666:	b328      	cbz	r0, 80056b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8005668:	f7fc f812 	bl	8001690 <_Unwind_GetRegionStart>
 800566c:	4603      	mov	r3, r0
 800566e:	4620      	mov	r0, r4
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005676:	29ff      	cmp	r1, #255	; 0xff
 8005678:	d01e      	beq.n	80056b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800567a:	4602      	mov	r2, r0
 800567c:	1d2b      	adds	r3, r5, #4
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ffdd 	bl	800563e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005684:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005688:	2bff      	cmp	r3, #255	; 0xff
 800568a:	752b      	strb	r3, [r5, #20]
 800568c:	d016      	beq.n	80056bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 800568e:	2310      	movs	r3, #16
 8005690:	a901      	add	r1, sp, #4
 8005692:	752b      	strb	r3, [r5, #20]
 8005694:	f7ff ff42 	bl	800551c <_ZL12read_uleb128PKhPm>
 8005698:	9b01      	ldr	r3, [sp, #4]
 800569a:	4403      	add	r3, r0
 800569c:	60eb      	str	r3, [r5, #12]
 800569e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80056a2:	a901      	add	r1, sp, #4
 80056a4:	756b      	strb	r3, [r5, #21]
 80056a6:	f7ff ff39 	bl	800551c <_ZL12read_uleb128PKhPm>
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	4403      	add	r3, r0
 80056ae:	612b      	str	r3, [r5, #16]
 80056b0:	b002      	add	sp, #8
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	4603      	mov	r3, r0
 80056b6:	e7da      	b.n	800566e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 80056b8:	606b      	str	r3, [r5, #4]
 80056ba:	e7e3      	b.n	8005684 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 80056bc:	2300      	movs	r3, #0
 80056be:	e7ed      	b.n	800569c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080056c0 <_Unwind_GetGR>:
 80056c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056c2:	ab03      	add	r3, sp, #12
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	2300      	movs	r3, #0
 80056c8:	460a      	mov	r2, r1
 80056ca:	4619      	mov	r1, r3
 80056cc:	f7fb fa36 	bl	8000b3c <_Unwind_VRS_Get>
 80056d0:	9803      	ldr	r0, [sp, #12]
 80056d2:	b005      	add	sp, #20
 80056d4:	f85d fb04 	ldr.w	pc, [sp], #4

080056d8 <__gxx_personality_v0>:
 80056d8:	2300      	movs	r3, #0
 80056da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056de:	b091      	sub	sp, #68	; 0x44
 80056e0:	9305      	str	r3, [sp, #20]
 80056e2:	f000 0303 	and.w	r3, r0, #3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	4606      	mov	r6, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	4617      	mov	r7, r2
 80056ee:	d00e      	beq.n	800570e <__gxx_personality_v0+0x36>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d003      	beq.n	80056fc <__gxx_personality_v0+0x24>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d13b      	bne.n	8005770 <__gxx_personality_v0+0x98>
 80056f8:	0701      	lsls	r1, r0, #28
 80056fa:	d53b      	bpl.n	8005774 <__gxx_personality_v0+0x9c>
 80056fc:	4639      	mov	r1, r7
 80056fe:	4620      	mov	r0, r4
 8005700:	f7fb ffae 	bl	8001660 <__gnu_unwind_frame>
 8005704:	b390      	cbz	r0, 800576c <__gxx_personality_v0+0x94>
 8005706:	2009      	movs	r0, #9
 8005708:	b011      	add	sp, #68	; 0x44
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	0702      	lsls	r2, r0, #28
 8005710:	d406      	bmi.n	8005720 <__gxx_personality_v0+0x48>
 8005712:	6a0d      	ldr	r5, [r1, #32]
 8005714:	4638      	mov	r0, r7
 8005716:	210d      	movs	r1, #13
 8005718:	f7ff ffd2 	bl	80056c0 <_Unwind_GetGR>
 800571c:	4285      	cmp	r5, r0
 800571e:	d02b      	beq.n	8005778 <__gxx_personality_v0+0xa0>
 8005720:	2002      	movs	r0, #2
 8005722:	2300      	movs	r3, #0
 8005724:	f006 0608 	and.w	r6, r6, #8
 8005728:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800572c:	4306      	orrs	r6, r0
 800572e:	220c      	movs	r2, #12
 8005730:	4619      	mov	r1, r3
 8005732:	4638      	mov	r0, r7
 8005734:	f8cd a000 	str.w	sl, [sp]
 8005738:	940a      	str	r4, [sp, #40]	; 0x28
 800573a:	f7fb fa25 	bl	8000b88 <_Unwind_VRS_Set>
 800573e:	2e06      	cmp	r6, #6
 8005740:	d11c      	bne.n	800577c <__gxx_personality_v0+0xa4>
 8005742:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8005746:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800574a:	f1b8 0f00 	cmp.w	r8, #0
 800574e:	bf0c      	ite	eq
 8005750:	f04f 0b01 	moveq.w	fp, #1
 8005754:	f04f 0b03 	movne.w	fp, #3
 8005758:	f016 0608 	ands.w	r6, r6, #8
 800575c:	f000 8107 	beq.w	800596e <__gxx_personality_v0+0x296>
 8005760:	f1bb 0f01 	cmp.w	fp, #1
 8005764:	f040 80ff 	bne.w	8005966 <__gxx_personality_v0+0x28e>
 8005768:	f000 f95e 	bl	8005a28 <_ZSt9terminatev>
 800576c:	2008      	movs	r0, #8
 800576e:	e7cb      	b.n	8005708 <__gxx_personality_v0+0x30>
 8005770:	f000 fcf0 	bl	8006154 <abort>
 8005774:	2001      	movs	r0, #1
 8005776:	e7d4      	b.n	8005722 <__gxx_personality_v0+0x4a>
 8005778:	2006      	movs	r0, #6
 800577a:	e7d2      	b.n	8005722 <__gxx_personality_v0+0x4a>
 800577c:	4638      	mov	r0, r7
 800577e:	f7fb ff8d 	bl	800169c <_Unwind_GetLanguageSpecificData>
 8005782:	4681      	mov	r9, r0
 8005784:	2800      	cmp	r0, #0
 8005786:	d0b9      	beq.n	80056fc <__gxx_personality_v0+0x24>
 8005788:	4652      	mov	r2, sl
 800578a:	4601      	mov	r1, r0
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff ff66 	bl	800565e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005792:	4639      	mov	r1, r7
 8005794:	4605      	mov	r5, r0
 8005796:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800579a:	f7ff ff2c 	bl	80055f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800579e:	210f      	movs	r1, #15
 80057a0:	900c      	str	r0, [sp, #48]	; 0x30
 80057a2:	4638      	mov	r0, r7
 80057a4:	f7ff ff8c 	bl	80056c0 <_Unwind_GetGR>
 80057a8:	f020 0801 	bic.w	r8, r0, #1
 80057ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80057b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057b2:	42ab      	cmp	r3, r5
 80057b4:	f240 80bf 	bls.w	8005936 <__gxx_personality_v0+0x25e>
 80057b8:	462a      	mov	r2, r5
 80057ba:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80057be:	ab06      	add	r3, sp, #24
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7ff ff3c 	bl	800563e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80057c6:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80057ca:	4602      	mov	r2, r0
 80057cc:	ab07      	add	r3, sp, #28
 80057ce:	2000      	movs	r0, #0
 80057d0:	f7ff ff35 	bl	800563e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80057d4:	ab08      	add	r3, sp, #32
 80057d6:	4602      	mov	r2, r0
 80057d8:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80057dc:	2000      	movs	r0, #0
 80057de:	f7ff ff2e 	bl	800563e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80057e2:	a909      	add	r1, sp, #36	; 0x24
 80057e4:	f7ff fe9a 	bl	800551c <_ZL12read_uleb128PKhPm>
 80057e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ea:	9a06      	ldr	r2, [sp, #24]
 80057ec:	4605      	mov	r5, r0
 80057ee:	4413      	add	r3, r2
 80057f0:	4543      	cmp	r3, r8
 80057f2:	d901      	bls.n	80057f8 <__gxx_personality_v0+0x120>
 80057f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80057f6:	e7db      	b.n	80057b0 <__gxx_personality_v0+0xd8>
 80057f8:	9a07      	ldr	r2, [sp, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	4543      	cmp	r3, r8
 80057fe:	d9d7      	bls.n	80057b0 <__gxx_personality_v0+0xd8>
 8005800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005804:	f1b8 0f00 	cmp.w	r8, #0
 8005808:	d001      	beq.n	800580e <__gxx_personality_v0+0x136>
 800580a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800580c:	4498      	add	r8, r3
 800580e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005810:	b115      	cbz	r5, 8005818 <__gxx_personality_v0+0x140>
 8005812:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005814:	3d01      	subs	r5, #1
 8005816:	4405      	add	r5, r0
 8005818:	f1b8 0f00 	cmp.w	r8, #0
 800581c:	f43f af6e 	beq.w	80056fc <__gxx_personality_v0+0x24>
 8005820:	2d00      	cmp	r5, #0
 8005822:	f000 80f2 	beq.w	8005a0a <__gxx_personality_v0+0x332>
 8005826:	f016 0308 	ands.w	r3, r6, #8
 800582a:	9302      	str	r3, [sp, #8]
 800582c:	d034      	beq.n	8005898 <__gxx_personality_v0+0x1c0>
 800582e:	2347      	movs	r3, #71	; 0x47
 8005830:	7023      	strb	r3, [r4, #0]
 8005832:	234e      	movs	r3, #78	; 0x4e
 8005834:	7063      	strb	r3, [r4, #1]
 8005836:	2355      	movs	r3, #85	; 0x55
 8005838:	70a3      	strb	r3, [r4, #2]
 800583a:	2343      	movs	r3, #67	; 0x43
 800583c:	70e3      	strb	r3, [r4, #3]
 800583e:	2346      	movs	r3, #70	; 0x46
 8005840:	7123      	strb	r3, [r4, #4]
 8005842:	234f      	movs	r3, #79	; 0x4f
 8005844:	7163      	strb	r3, [r4, #5]
 8005846:	2352      	movs	r3, #82	; 0x52
 8005848:	71a3      	strb	r3, [r4, #6]
 800584a:	2300      	movs	r3, #0
 800584c:	71e3      	strb	r3, [r4, #7]
 800584e:	f04f 0b00 	mov.w	fp, #0
 8005852:	a907      	add	r1, sp, #28
 8005854:	4628      	mov	r0, r5
 8005856:	f7ff fe70 	bl	800553a <_ZL12read_sleb128PKhPl>
 800585a:	a908      	add	r1, sp, #32
 800585c:	9003      	str	r0, [sp, #12]
 800585e:	f7ff fe6c 	bl	800553a <_ZL12read_sleb128PKhPl>
 8005862:	9907      	ldr	r1, [sp, #28]
 8005864:	2900      	cmp	r1, #0
 8005866:	d063      	beq.n	8005930 <__gxx_personality_v0+0x258>
 8005868:	dd3a      	ble.n	80058e0 <__gxx_personality_v0+0x208>
 800586a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800586e:	28ff      	cmp	r0, #255	; 0xff
 8005870:	d032      	beq.n	80058d8 <__gxx_personality_v0+0x200>
 8005872:	f000 0307 	and.w	r3, r0, #7
 8005876:	2b04      	cmp	r3, #4
 8005878:	f63f af7a 	bhi.w	8005770 <__gxx_personality_v0+0x98>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <__gxx_personality_v0+0x1ac>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058dd 	.word	0x080058dd
 8005888:	08005771 	.word	0x08005771
 800588c:	080058ab 	.word	0x080058ab
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058d5 	.word	0x080058d5
 8005898:	79e3      	ldrb	r3, [r4, #7]
 800589a:	2b01      	cmp	r3, #1
 800589c:	bf0c      	ite	eq
 800589e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80058a2:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	e7d1      	b.n	800584e <__gxx_personality_v0+0x176>
 80058aa:	2502      	movs	r5, #2
 80058ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058ae:	ab09      	add	r3, sp, #36	; 0x24
 80058b0:	fb05 2211 	mls	r2, r5, r1, r2
 80058b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058b6:	f7ff fe58 	bl	800556a <_ZL28read_encoded_value_with_basehjPKhPj>
 80058ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058bc:	b131      	cbz	r1, 80058cc <__gxx_personality_v0+0x1f4>
 80058be:	b35c      	cbz	r4, 8005918 <__gxx_personality_v0+0x240>
 80058c0:	2200      	movs	r2, #0
 80058c2:	4620      	mov	r0, r4
 80058c4:	ab05      	add	r3, sp, #20
 80058c6:	f7ff fd91 	bl	80053ec <__cxa_type_match>
 80058ca:	b328      	cbz	r0, 8005918 <__gxx_personality_v0+0x240>
 80058cc:	f04f 0b03 	mov.w	fp, #3
 80058d0:	9d07      	ldr	r5, [sp, #28]
 80058d2:	e034      	b.n	800593e <__gxx_personality_v0+0x266>
 80058d4:	2508      	movs	r5, #8
 80058d6:	e7e9      	b.n	80058ac <__gxx_personality_v0+0x1d4>
 80058d8:	2500      	movs	r5, #0
 80058da:	e7e7      	b.n	80058ac <__gxx_personality_v0+0x1d4>
 80058dc:	2504      	movs	r5, #4
 80058de:	e7e5      	b.n	80058ac <__gxx_personality_v0+0x1d4>
 80058e0:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 80058e4:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 80058e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ea:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 80058ee:	313f      	adds	r1, #63	; 0x3f
 80058f0:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 80058f4:	b1bc      	cbz	r4, 8005926 <__gxx_personality_v0+0x24e>
 80058f6:	9a02      	ldr	r2, [sp, #8]
 80058f8:	b9aa      	cbnz	r2, 8005926 <__gxx_personality_v0+0x24e>
 80058fa:	9b05      	ldr	r3, [sp, #20]
 80058fc:	3d04      	subs	r5, #4
 80058fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005900:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005904:	2900      	cmp	r1, #0
 8005906:	d0e1      	beq.n	80058cc <__gxx_personality_v0+0x1f4>
 8005908:	2200      	movs	r2, #0
 800590a:	4620      	mov	r0, r4
 800590c:	ab09      	add	r3, sp, #36	; 0x24
 800590e:	4429      	add	r1, r5
 8005910:	f7ff fd6c 	bl	80053ec <__cxa_type_match>
 8005914:	2800      	cmp	r0, #0
 8005916:	d0f3      	beq.n	8005900 <__gxx_personality_v0+0x228>
 8005918:	9d08      	ldr	r5, [sp, #32]
 800591a:	2d00      	cmp	r5, #0
 800591c:	d071      	beq.n	8005a02 <__gxx_personality_v0+0x32a>
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	442b      	add	r3, r5
 8005922:	461d      	mov	r5, r3
 8005924:	e795      	b.n	8005852 <__gxx_personality_v0+0x17a>
 8005926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f4      	bne.n	8005918 <__gxx_personality_v0+0x240>
 800592e:	e7cd      	b.n	80058cc <__gxx_personality_v0+0x1f4>
 8005930:	f04f 0b01 	mov.w	fp, #1
 8005934:	e7f0      	b.n	8005918 <__gxx_personality_v0+0x240>
 8005936:	2500      	movs	r5, #0
 8005938:	f04f 0b01 	mov.w	fp, #1
 800593c:	46a8      	mov	r8, r5
 800593e:	07f3      	lsls	r3, r6, #31
 8005940:	f57f af0a 	bpl.w	8005758 <__gxx_personality_v0+0x80>
 8005944:	f1bb 0f02 	cmp.w	fp, #2
 8005948:	f43f aed8 	beq.w	80056fc <__gxx_personality_v0+0x24>
 800594c:	210d      	movs	r1, #13
 800594e:	4638      	mov	r0, r7
 8005950:	9e05      	ldr	r6, [sp, #20]
 8005952:	f7ff feb5 	bl	80056c0 <_Unwind_GetGR>
 8005956:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 800595a:	e9c4 0608 	strd	r0, r6, [r4, #32]
 800595e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005962:	2006      	movs	r0, #6
 8005964:	e6d0      	b.n	8005708 <__gxx_personality_v0+0x30>
 8005966:	2d00      	cmp	r5, #0
 8005968:	da22      	bge.n	80059b0 <__gxx_personality_v0+0x2d8>
 800596a:	f000 f86f 	bl	8005a4c <_ZSt10unexpectedv>
 800596e:	f1bb 0f01 	cmp.w	fp, #1
 8005972:	d102      	bne.n	800597a <__gxx_personality_v0+0x2a2>
 8005974:	4620      	mov	r0, r4
 8005976:	f000 fb7b 	bl	8006070 <__cxa_call_terminate>
 800597a:	2d00      	cmp	r5, #0
 800597c:	da18      	bge.n	80059b0 <__gxx_personality_v0+0x2d8>
 800597e:	4652      	mov	r2, sl
 8005980:	4649      	mov	r1, r9
 8005982:	4638      	mov	r0, r7
 8005984:	f7ff fe6b 	bl	800565e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005988:	4639      	mov	r1, r7
 800598a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800598e:	f7ff fe32 	bl	80055f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005992:	43eb      	mvns	r3, r5
 8005994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005996:	900c      	str	r0, [sp, #48]	; 0x30
 8005998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800599c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80059a0:	b10a      	cbz	r2, 80059a6 <__gxx_personality_v0+0x2ce>
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7fa      	b.n	800599c <__gxx_personality_v0+0x2c4>
 80059a6:	2204      	movs	r2, #4
 80059a8:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 80059ac:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80059b0:	2300      	movs	r3, #0
 80059b2:	ae09      	add	r6, sp, #36	; 0x24
 80059b4:	461a      	mov	r2, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	4638      	mov	r0, r7
 80059ba:	9600      	str	r6, [sp, #0]
 80059bc:	9409      	str	r4, [sp, #36]	; 0x24
 80059be:	f7fb f8e3 	bl	8000b88 <_Unwind_VRS_Set>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2201      	movs	r2, #1
 80059c6:	4619      	mov	r1, r3
 80059c8:	4638      	mov	r0, r7
 80059ca:	9600      	str	r6, [sp, #0]
 80059cc:	9509      	str	r5, [sp, #36]	; 0x24
 80059ce:	f7fb f8db 	bl	8000b88 <_Unwind_VRS_Set>
 80059d2:	210f      	movs	r1, #15
 80059d4:	4638      	mov	r0, r7
 80059d6:	f7ff fe73 	bl	80056c0 <_Unwind_GetGR>
 80059da:	2300      	movs	r3, #0
 80059dc:	f000 0001 	and.w	r0, r0, #1
 80059e0:	ea40 0008 	orr.w	r0, r0, r8
 80059e4:	9009      	str	r0, [sp, #36]	; 0x24
 80059e6:	220f      	movs	r2, #15
 80059e8:	4619      	mov	r1, r3
 80059ea:	4638      	mov	r0, r7
 80059ec:	9600      	str	r6, [sp, #0]
 80059ee:	f7fb f8cb 	bl	8000b88 <_Unwind_VRS_Set>
 80059f2:	f1bb 0f02 	cmp.w	fp, #2
 80059f6:	d102      	bne.n	80059fe <__gxx_personality_v0+0x326>
 80059f8:	4620      	mov	r0, r4
 80059fa:	f7ff fd55 	bl	80054a8 <__cxa_begin_cleanup>
 80059fe:	2007      	movs	r0, #7
 8005a00:	e682      	b.n	8005708 <__gxx_personality_v0+0x30>
 8005a02:	f1bb 0f00 	cmp.w	fp, #0
 8005a06:	f43f ae79 	beq.w	80056fc <__gxx_personality_v0+0x24>
 8005a0a:	f04f 0b02 	mov.w	fp, #2
 8005a0e:	e796      	b.n	800593e <__gxx_personality_v0+0x266>

08005a10 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005a10:	b508      	push	{r3, lr}
 8005a12:	4780      	blx	r0
 8005a14:	f000 fb9e 	bl	8006154 <abort>

08005a18 <_ZSt13get_terminatev>:
 8005a18:	4b02      	ldr	r3, [pc, #8]	; (8005a24 <_ZSt13get_terminatev+0xc>)
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	f3bf 8f5b 	dmb	ish
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000014 	.word	0x20000014

08005a28 <_ZSt9terminatev>:
 8005a28:	b508      	push	{r3, lr}
 8005a2a:	f7ff fff5 	bl	8005a18 <_ZSt13get_terminatev>
 8005a2e:	f7ff ffef 	bl	8005a10 <_ZN10__cxxabiv111__terminateEPFvvE>

08005a32 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005a32:	b508      	push	{r3, lr}
 8005a34:	4780      	blx	r0
 8005a36:	f7ff fff7 	bl	8005a28 <_ZSt9terminatev>
	...

08005a3c <_ZSt14get_unexpectedv>:
 8005a3c:	4b02      	ldr	r3, [pc, #8]	; (8005a48 <_ZSt14get_unexpectedv+0xc>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	f3bf 8f5b 	dmb	ish
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000010 	.word	0x20000010

08005a4c <_ZSt10unexpectedv>:
 8005a4c:	b508      	push	{r3, lr}
 8005a4e:	f7ff fff5 	bl	8005a3c <_ZSt14get_unexpectedv>
 8005a52:	f7ff ffee 	bl	8005a32 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005a56 <_Znwj>:
 8005a56:	2801      	cmp	r0, #1
 8005a58:	bf38      	it	cc
 8005a5a:	2001      	movcc	r0, #1
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 fba9 	bl	80061b8 <malloc>
 8005a66:	b930      	cbnz	r0, 8005a76 <_Znwj+0x20>
 8005a68:	f000 fb6c 	bl	8006144 <_ZSt15get_new_handlerv>
 8005a6c:	b908      	cbnz	r0, 8005a72 <_Znwj+0x1c>
 8005a6e:	f000 fb71 	bl	8006154 <abort>
 8005a72:	4780      	blx	r0
 8005a74:	e7f4      	b.n	8005a60 <_Znwj+0xa>
 8005a76:	bd10      	pop	{r4, pc}

08005a78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4b02      	ldr	r3, [pc, #8]	; (8005a88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005a7e:	6003      	str	r3, [r0, #0]
 8005a80:	f7ff fc3a 	bl	80052f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005a84:	4620      	mov	r0, r4
 8005a86:	bd10      	pop	{r4, pc}
 8005a88:	08006994 	.word	0x08006994

08005a8c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4604      	mov	r4, r0
 8005a90:	f7ff fff2 	bl	8005a78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005a94:	4620      	mov	r0, r4
 8005a96:	210c      	movs	r1, #12
 8005a98:	f7ff fc82 	bl	80053a0 <_ZdlPvj>
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	4590      	cmp	r8, r2
 8005aac:	460f      	mov	r7, r1
 8005aae:	4615      	mov	r5, r2
 8005ab0:	461c      	mov	r4, r3
 8005ab2:	d00b      	beq.n	8005acc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8005ab4:	68b0      	ldr	r0, [r6, #8]
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	6803      	ldr	r3, [r0, #0]
 8005aba:	f8cd 8018 	str.w	r8, [sp, #24]
 8005abe:	6a1e      	ldr	r6, [r3, #32]
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	46b4      	mov	ip, r6
 8005ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	4760      	bx	ip
 8005acc:	4619      	mov	r1, r3
 8005ace:	f000 f857 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d0ee      	beq.n	8005ab4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8005ad6:	2006      	movs	r0, #6
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005adc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	460d      	mov	r5, r1
 8005ae2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005ae6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8005aea:	4619      	mov	r1, r3
 8005aec:	4681      	mov	r9, r0
 8005aee:	4617      	mov	r7, r2
 8005af0:	4698      	mov	r8, r3
 8005af2:	f000 f845 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005af6:	b190      	cbz	r0, 8005b1e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	6034      	str	r4, [r6, #0]
 8005afc:	7137      	strb	r7, [r6, #4]
 8005afe:	db09      	blt.n	8005b14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8005b00:	442c      	add	r4, r5
 8005b02:	45a2      	cmp	sl, r4
 8005b04:	bf0c      	ite	eq
 8005b06:	2406      	moveq	r4, #6
 8005b08:	2401      	movne	r4, #1
 8005b0a:	71b4      	strb	r4, [r6, #6]
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	b001      	add	sp, #4
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	3502      	adds	r5, #2
 8005b16:	d1f9      	bne.n	8005b0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	71b3      	strb	r3, [r6, #6]
 8005b1c:	e7f6      	b.n	8005b0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005b1e:	4554      	cmp	r4, sl
 8005b20:	d106      	bne.n	8005b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005b22:	4659      	mov	r1, fp
 8005b24:	4648      	mov	r0, r9
 8005b26:	f000 f82b 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005b2a:	b108      	cbz	r0, 8005b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005b2c:	7177      	strb	r7, [r6, #5]
 8005b2e:	e7ed      	b.n	8005b0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005b30:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005b34:	463a      	mov	r2, r7
 8005b36:	6803      	ldr	r3, [r0, #0]
 8005b38:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005b3c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005b40:	69dc      	ldr	r4, [r3, #28]
 8005b42:	4629      	mov	r1, r5
 8005b44:	4643      	mov	r3, r8
 8005b46:	46a4      	mov	ip, r4
 8005b48:	b001      	add	sp, #4
 8005b4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4e:	4760      	bx	ip

08005b50 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b54:	4607      	mov	r7, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	4615      	mov	r5, r2
 8005b5a:	461e      	mov	r6, r3
 8005b5c:	f7ff fbff 	bl	800535e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005b60:	b948      	cbnz	r0, 8005b76 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	462a      	mov	r2, r5
 8005b66:	6803      	ldr	r3, [r0, #0]
 8005b68:	4621      	mov	r1, r4
 8005b6a:	699f      	ldr	r7, [r3, #24]
 8005b6c:	4633      	mov	r3, r6
 8005b6e:	46bc      	mov	ip, r7
 8005b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b74:	4760      	bx	ip
 8005b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b7a <_ZNSt9type_infoD1Ev>:
 8005b7a:	4770      	bx	lr

08005b7c <_ZNKSt9type_info14__is_pointer_pEv>:
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	4770      	bx	lr

08005b80 <_ZNKSt9type_infoeqERKS_>:
 8005b80:	4281      	cmp	r1, r0
 8005b82:	b508      	push	{r3, lr}
 8005b84:	d00e      	beq.n	8005ba4 <_ZNKSt9type_infoeqERKS_+0x24>
 8005b86:	6840      	ldr	r0, [r0, #4]
 8005b88:	7803      	ldrb	r3, [r0, #0]
 8005b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8c:	d00c      	beq.n	8005ba8 <_ZNKSt9type_infoeqERKS_+0x28>
 8005b8e:	6849      	ldr	r1, [r1, #4]
 8005b90:	780b      	ldrb	r3, [r1, #0]
 8005b92:	2b2a      	cmp	r3, #42	; 0x2a
 8005b94:	bf08      	it	eq
 8005b96:	3101      	addeq	r1, #1
 8005b98:	f7fa fad8 	bl	800014c <strcmp>
 8005b9c:	fab0 f080 	clz	r0, r0
 8005ba0:	0940      	lsrs	r0, r0, #5
 8005ba2:	bd08      	pop	{r3, pc}
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	e7fc      	b.n	8005ba2 <_ZNKSt9type_infoeqERKS_+0x22>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e7fa      	b.n	8005ba2 <_ZNKSt9type_infoeqERKS_+0x22>

08005bac <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	4604      	mov	r4, r0
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8005bb2:	6003      	str	r3, [r0, #0]
 8005bb4:	f7ff fba0 	bl	80052f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	bd10      	pop	{r4, pc}
 8005bbc:	08006a0c 	.word	0x08006a0c

08005bc0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	f7ff fff2 	bl	8005bac <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	2118      	movs	r1, #24
 8005bcc:	f7ff fbe8 	bl	80053a0 <_ZdlPvj>
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	bd10      	pop	{r4, pc}

08005bd4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8005bdc:	4604      	mov	r4, r0
 8005bde:	454a      	cmp	r2, r9
 8005be0:	460f      	mov	r7, r1
 8005be2:	4616      	mov	r6, r2
 8005be4:	469a      	mov	sl, r3
 8005be6:	d024      	beq.n	8005c32 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8005be8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005bec:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8005bf0:	f1b8 0f00 	cmp.w	r8, #0
 8005bf4:	d028      	beq.n	8005c48 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 8005bf6:	68e5      	ldr	r5, [r4, #12]
 8005bf8:	07aa      	lsls	r2, r5, #30
 8005bfa:	d521      	bpl.n	8005c40 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8005bfc:	122a      	asrs	r2, r5, #8
 8005bfe:	f015 0501 	ands.w	r5, r5, #1
 8005c02:	d003      	beq.n	8005c0c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8005c04:	1cfb      	adds	r3, r7, #3
 8005c06:	d01b      	beq.n	8005c40 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	589a      	ldr	r2, [r3, r2]
 8005c0c:	68a0      	ldr	r0, [r4, #8]
 8005c0e:	4639      	mov	r1, r7
 8005c10:	6803      	ldr	r3, [r0, #0]
 8005c12:	f8cd 9000 	str.w	r9, [sp]
 8005c16:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8005c1a:	4432      	add	r2, r6
 8005c1c:	4653      	mov	r3, sl
 8005c1e:	47d8      	blx	fp
 8005c20:	2803      	cmp	r0, #3
 8005c22:	d90d      	bls.n	8005c40 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8005c24:	b115      	cbz	r5, 8005c2c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8005c26:	f040 0001 	orr.w	r0, r0, #1
 8005c2a:	b2c0      	uxtb	r0, r0
 8005c2c:	b003      	add	sp, #12
 8005c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c32:	4619      	mov	r1, r3
 8005c34:	f7ff ffa4 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d0d5      	beq.n	8005be8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8005c3c:	2006      	movs	r0, #6
 8005c3e:	e7f5      	b.n	8005c2c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8005c40:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c44:	3c08      	subs	r4, #8
 8005c46:	e7d3      	b.n	8005bf0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8005c48:	2001      	movs	r0, #1
 8005c4a:	e7ef      	b.n	8005c2c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

08005c4c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8005c4c:	b4f0      	push	{r4, r5, r6, r7}
 8005c4e:	1e0d      	subs	r5, r1, #0
 8005c50:	9c04      	ldr	r4, [sp, #16]
 8005c52:	db06      	blt.n	8005c62 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 8005c54:	1950      	adds	r0, r2, r5
 8005c56:	4284      	cmp	r4, r0
 8005c58:	bf14      	ite	ne
 8005c5a:	2001      	movne	r0, #1
 8005c5c:	2006      	moveq	r0, #6
 8005c5e:	bcf0      	pop	{r4, r5, r6, r7}
 8005c60:	4770      	bx	lr
 8005c62:	3502      	adds	r5, #2
 8005c64:	d005      	beq.n	8005c72 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 8005c66:	6805      	ldr	r5, [r0, #0]
 8005c68:	9404      	str	r4, [sp, #16]
 8005c6a:	6a2c      	ldr	r4, [r5, #32]
 8005c6c:	46a4      	mov	ip, r4
 8005c6e:	bcf0      	pop	{r4, r5, r6, r7}
 8005c70:	4760      	bx	ip
 8005c72:	2001      	movs	r0, #1
 8005c74:	e7f3      	b.n	8005c5e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

08005c76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	b091      	sub	sp, #68	; 0x44
 8005c7c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005c7e:	469a      	mov	sl, r3
 8005c80:	68a3      	ldr	r3, [r4, #8]
 8005c82:	4688      	mov	r8, r1
 8005c84:	06d9      	lsls	r1, r3, #27
 8005c86:	bf48      	it	mi
 8005c88:	6883      	ldrmi	r3, [r0, #8]
 8005c8a:	9206      	str	r2, [sp, #24]
 8005c8c:	bf48      	it	mi
 8005c8e:	60a3      	strmi	r3, [r4, #8]
 8005c90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005c94:	4681      	mov	r9, r0
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d107      	bne.n	8005caa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005c9a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005c9c:	f7ff ff70 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005ca0:	b118      	cbz	r0, 8005caa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	7163      	strb	r3, [r4, #5]
 8005ca6:	2700      	movs	r7, #0
 8005ca8:	e085      	b.n	8005db6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8005caa:	4651      	mov	r1, sl
 8005cac:	4648      	mov	r0, r9
 8005cae:	f7ff ff67 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8005cb2:	b1c0      	cbz	r0, 8005ce6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 8005cb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005cb6:	f1b8 0f00 	cmp.w	r8, #0
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	9b06      	ldr	r3, [sp, #24]
 8005cbe:	7123      	strb	r3, [r4, #4]
 8005cc0:	db0b      	blt.n	8005cda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 8005cc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005cc4:	4498      	add	r8, r3
 8005cc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005cc8:	4543      	cmp	r3, r8
 8005cca:	bf0c      	ite	eq
 8005ccc:	f04f 0806 	moveq.w	r8, #6
 8005cd0:	f04f 0801 	movne.w	r8, #1
 8005cd4:	f884 8006 	strb.w	r8, [r4, #6]
 8005cd8:	e7e5      	b.n	8005ca6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005cda:	f118 0f02 	cmn.w	r8, #2
 8005cde:	d1e2      	bne.n	8005ca6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	71a3      	strb	r3, [r4, #6]
 8005ce4:	e7df      	b.n	8005ca6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005ce6:	f1b8 0f00 	cmp.w	r8, #0
 8005cea:	bfa8      	it	ge
 8005cec:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8005cee:	f04f 0700 	mov.w	r7, #0
 8005cf2:	bfa4      	itt	ge
 8005cf4:	eba3 0308 	subge.w	r3, r3, r8
 8005cf8:	9307      	strge	r3, [sp, #28]
 8005cfa:	f04f 0302 	mov.w	r3, #2
 8005cfe:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 8005d02:	f04f 0301 	mov.w	r3, #1
 8005d06:	9308      	str	r3, [sp, #32]
 8005d08:	9b06      	ldr	r3, [sp, #24]
 8005d0a:	bfb8      	it	lt
 8005d0c:	9007      	strlt	r0, [sp, #28]
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d14:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005d18:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8005d1c:	9305      	str	r3, [sp, #20]
 8005d1e:	f1bb 0f00 	cmp.w	fp, #0
 8005d22:	f000 80d5 	beq.w	8005ed0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25a>
 8005d26:	2300      	movs	r3, #0
 8005d28:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8005d2c:	9b05      	ldr	r3, [sp, #20]
 8005d2e:	68a5      	ldr	r5, [r4, #8]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	950f      	str	r5, [sp, #60]	; 0x3c
 8005d34:	07da      	lsls	r2, r3, #31
 8005d36:	bf48      	it	mi
 8005d38:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8005d3a:	ea4f 2123 	mov.w	r1, r3, asr #8
 8005d3e:	bf42      	ittt	mi
 8005d40:	6800      	ldrmi	r0, [r0, #0]
 8005d42:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 8005d44:	5841      	ldrmi	r1, [r0, r1]
 8005d46:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005d48:	bf58      	it	pl
 8005d4a:	9a06      	ldrpl	r2, [sp, #24]
 8005d4c:	4401      	add	r1, r0
 8005d4e:	9807      	ldr	r0, [sp, #28]
 8005d50:	b138      	cbz	r0, 8005d62 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 8005d52:	4288      	cmp	r0, r1
 8005d54:	bf2c      	ite	cs
 8005d56:	2000      	movcs	r0, #0
 8005d58:	2001      	movcc	r0, #1
 8005d5a:	9e08      	ldr	r6, [sp, #32]
 8005d5c:	42b0      	cmp	r0, r6
 8005d5e:	f000 80b3 	beq.w	8005ec8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 8005d62:	079b      	lsls	r3, r3, #30
 8005d64:	d407      	bmi.n	8005d76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>
 8005d66:	f118 0f02 	cmn.w	r8, #2
 8005d6a:	d102      	bne.n	8005d72 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xfc>
 8005d6c:	07ae      	lsls	r6, r5, #30
 8005d6e:	f000 80ad 	beq.w	8005ecc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x256>
 8005d72:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8005d76:	9b05      	ldr	r3, [sp, #20]
 8005d78:	ad0d      	add	r5, sp, #52	; 0x34
 8005d7a:	6898      	ldr	r0, [r3, #8]
 8005d7c:	6803      	ldr	r3, [r0, #0]
 8005d7e:	9503      	str	r5, [sp, #12]
 8005d80:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005d82:	9502      	str	r5, [sp, #8]
 8005d84:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005d86:	e9cd 1500 	strd	r1, r5, [sp]
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	69dd      	ldr	r5, [r3, #28]
 8005d8e:	4653      	mov	r3, sl
 8005d90:	47a8      	blx	r5
 8005d92:	7963      	ldrb	r3, [r4, #5]
 8005d94:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8005d98:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	2d06      	cmp	r5, #6
 8005da0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005da2:	7163      	strb	r3, [r4, #5]
 8005da4:	d001      	beq.n	8005daa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 8005da6:	2d02      	cmp	r5, #2
 8005da8:	d109      	bne.n	8005dbe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8005daa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8005dae:	6021      	str	r1, [r4, #0]
 8005db0:	7123      	strb	r3, [r4, #4]
 8005db2:	71a5      	strb	r5, [r4, #6]
 8005db4:	4607      	mov	r7, r0
 8005db6:	4638      	mov	r0, r7
 8005db8:	b011      	add	sp, #68	; 0x44
 8005dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	b9a7      	cbnz	r7, 8005dec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 8005dc2:	b9aa      	cbnz	r2, 8005df0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8005dc4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005dc8:	6021      	str	r1, [r4, #0]
 8005dca:	7122      	strb	r2, [r4, #4]
 8005dcc:	b121      	cbz	r1, 8005dd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8005dce:	b11b      	cbz	r3, 8005dd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8005dd0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005dd4:	07dd      	lsls	r5, r3, #31
 8005dd6:	d5ed      	bpl.n	8005db4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8005dd8:	7963      	ldrb	r3, [r4, #5]
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d0ea      	beq.n	8005db4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8005dde:	9b05      	ldr	r3, [sp, #20]
 8005de0:	4607      	mov	r7, r0
 8005de2:	3b08      	subs	r3, #8
 8005de4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005de8:	9305      	str	r3, [sp, #20]
 8005dea:	e798      	b.n	8005d1e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	d037      	beq.n	8005e60 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 8005df0:	4291      	cmp	r1, r2
 8005df2:	d106      	bne.n	8005e02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 8005df4:	7923      	ldrb	r3, [r4, #4]
 8005df6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	7123      	strb	r3, [r4, #4]
 8005dfe:	4638      	mov	r0, r7
 8005e00:	e7ea      	b.n	8005dd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8005e02:	b909      	cbnz	r1, 8005e08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d0fa      	beq.n	8005dfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	79a6      	ldrb	r6, [r4, #6]
 8005e0c:	d904      	bls.n	8005e18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d529      	bpl.n	8005e66 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8005e12:	68a3      	ldr	r3, [r4, #8]
 8005e14:	079b      	lsls	r3, r3, #30
 8005e16:	d526      	bpl.n	8005e66 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8005e18:	b97e      	cbnz	r6, 8005e3a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 8005e1a:	2d03      	cmp	r5, #3
 8005e1c:	d905      	bls.n	8005e2a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 8005e1e:	07ee      	lsls	r6, r5, #31
 8005e20:	d541      	bpl.n	8005ea6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8005e22:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005e26:	0798      	lsls	r0, r3, #30
 8005e28:	d53d      	bpl.n	8005ea6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8005e2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4650      	mov	r0, sl
 8005e32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e34:	f7ff ff0a 	bl	8005c4c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	b9e5      	cbnz	r5, 8005e76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8005e3c:	2e03      	cmp	r6, #3
 8005e3e:	d905      	bls.n	8005e4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 8005e40:	07f1      	lsls	r1, r6, #31
 8005e42:	d532      	bpl.n	8005eaa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8005e44:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005e48:	079a      	lsls	r2, r3, #30
 8005e4a:	d52e      	bpl.n	8005eaa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8005e4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005e4e:	4641      	mov	r1, r8
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	4650      	mov	r0, sl
 8005e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e58:	f7ff fef8 	bl	8005c4c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	e00a      	b.n	8005e76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d1d1      	bne.n	8005e08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 8005e64:	e7cb      	b.n	8005dfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8005e66:	2e01      	cmp	r6, #1
 8005e68:	bf38      	it	cc
 8005e6a:	2601      	movcc	r6, #1
 8005e6c:	2d01      	cmp	r5, #1
 8005e6e:	bf38      	it	cc
 8005e70:	2501      	movcc	r5, #1
 8005e72:	b2f6      	uxtb	r6, r6
 8005e74:	b2ed      	uxtb	r5, r5
 8005e76:	ea85 0306 	eor.w	r3, r5, r6
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d916      	bls.n	8005eae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 8005e80:	2d03      	cmp	r5, #3
 8005e82:	bf81      	itttt	hi
 8005e84:	462e      	movhi	r6, r5
 8005e86:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8005e88:	2000      	movhi	r0, #0
 8005e8a:	6023      	strhi	r3, [r4, #0]
 8005e8c:	bf8a      	itet	hi
 8005e8e:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8005e92:	4638      	movls	r0, r7
 8005e94:	7123      	strbhi	r3, [r4, #4]
 8005e96:	07b3      	lsls	r3, r6, #30
 8005e98:	71a6      	strb	r6, [r4, #6]
 8005e9a:	d402      	bmi.n	8005ea2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8005e9c:	f016 0601 	ands.w	r6, r6, #1
 8005ea0:	d19a      	bne.n	8005dd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e786      	b.n	8005db4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8005ea6:	2601      	movs	r6, #1
 8005ea8:	e7e5      	b.n	8005e76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8005eaa:	2501      	movs	r5, #1
 8005eac:	e7e3      	b.n	8005e76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4035      	ands	r5, r6
 8005eb2:	b2ed      	uxtb	r5, r5
 8005eb4:	2d03      	cmp	r5, #3
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	d903      	bls.n	8005ec2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	71a3      	strb	r3, [r4, #6]
 8005ec0:	e778      	b.n	8005db4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	71a0      	strb	r0, [r4, #6]
 8005ec6:	e787      	b.n	8005dd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ecc:	4638      	mov	r0, r7
 8005ece:	e786      	b.n	8005dde <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 8005ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f43f af6f 	beq.w	8005db6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	f43f af6b 	beq.w	8005db6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f8cd b020 	str.w	fp, [sp, #32]
 8005ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee8:	e714      	b.n	8005d14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9e>

08005eea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eee:	b089      	sub	sp, #36	; 0x24
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	4617      	mov	r7, r2
 8005ef4:	461c      	mov	r4, r3
 8005ef6:	9102      	str	r1, [sp, #8]
 8005ef8:	f7ff fa31 	bl	800535e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005efc:	4605      	mov	r5, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d15f      	bne.n	8005fc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8005f02:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8005f06:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8005f0a:	f019 0f10 	tst.w	r9, #16
 8005f0e:	bf18      	it	ne
 8005f10:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 8005f14:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8005f18:	f009 0301 	and.w	r3, r9, #1
 8005f1c:	9303      	str	r3, [sp, #12]
 8005f1e:	f10d 0b10 	add.w	fp, sp, #16
 8005f22:	f1ba 0f00 	cmp.w	sl, #0
 8005f26:	d072      	beq.n	800600e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x124>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	f88d 3014 	strb.w	r3, [sp, #20]
 8005f30:	2300      	movs	r3, #0
 8005f32:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8005f36:	9307      	str	r3, [sp, #28]
 8005f38:	f002 0301 	and.w	r3, r2, #1
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	f002 0302 	and.w	r3, r2, #2
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	f002 0102 	and.w	r1, r2, #2
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	f8cd 9018 	str.w	r9, [sp, #24]
 8005f50:	d104      	bne.n	8005f5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x72>
 8005f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f56:	f1a8 0808 	sub.w	r8, r8, #8
 8005f5a:	e7e2      	b.n	8005f22 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 8005f5c:	2f00      	cmp	r7, #0
 8005f5e:	d034      	beq.n	8005fca <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 8005f60:	9b00      	ldr	r3, [sp, #0]
 8005f62:	1212      	asrs	r2, r2, #8
 8005f64:	b10b      	cbz	r3, 8005f6a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x80>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	589a      	ldr	r2, [r3, r2]
 8005f6a:	443a      	add	r2, r7
 8005f6c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005f70:	9902      	ldr	r1, [sp, #8]
 8005f72:	6803      	ldr	r3, [r0, #0]
 8005f74:	699d      	ldr	r5, [r3, #24]
 8005f76:	465b      	mov	r3, fp
 8005f78:	47a8      	blx	r5
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d0e8      	beq.n	8005f52 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8005f80:	9b07      	ldr	r3, [sp, #28]
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d104      	bne.n	8005f90 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 8005f86:	9b00      	ldr	r3, [sp, #0]
 8005f88:	b113      	cbz	r3, 8005f90 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 8005f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d905      	bls.n	8005fa4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8005f98:	9a01      	ldr	r2, [sp, #4]
 8005f9a:	b91a      	cbnz	r2, 8005fa4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8005f9c:	f023 0302 	bic.w	r3, r3, #2
 8005fa0:	f88d 3014 	strb.w	r3, [sp, #20]
 8005fa4:	68e1      	ldr	r1, [r4, #12]
 8005fa6:	b9c1      	cbnz	r1, 8005fda <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 8005fa8:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8005fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005fb0:	7923      	ldrb	r3, [r4, #4]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d905      	bls.n	8005fc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8005fb6:	079a      	lsls	r2, r3, #30
 8005fb8:	d509      	bpl.n	8005fce <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8005fba:	68b3      	ldr	r3, [r6, #8]
 8005fbc:	f013 0f01 	tst.w	r3, #1
 8005fc0:	d1c7      	bne.n	8005f52 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	b009      	add	sp, #36	; 0x24
 8005fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fca:	463a      	mov	r2, r7
 8005fcc:	e7ce      	b.n	8005f6c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x82>
 8005fce:	07db      	lsls	r3, r3, #31
 8005fd0:	d5f7      	bpl.n	8005fc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8005fd2:	68b3      	ldr	r3, [r6, #8]
 8005fd4:	f013 0f02 	tst.w	r3, #2
 8005fd8:	e7f2      	b.n	8005fc0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd6>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	9a04      	ldr	r2, [sp, #16]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	7123      	strb	r3, [r4, #4]
 8005fea:	e7ea      	b.n	8005fc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8005fec:	b12b      	cbz	r3, 8005ffa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x110>
 8005fee:	7923      	ldrb	r3, [r4, #4]
 8005ff0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	7123      	strb	r3, [r4, #4]
 8005ff8:	e7ab      	b.n	8005f52 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8005ffa:	9807      	ldr	r0, [sp, #28]
 8005ffc:	2808      	cmp	r0, #8
 8005ffe:	d0f2      	beq.n	8005fe6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8006000:	2908      	cmp	r1, #8
 8006002:	d0f0      	beq.n	8005fe6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8006004:	f7ff fdbc 	bl	8005b80 <_ZNKSt9type_infoeqERKS_>
 8006008:	2800      	cmp	r0, #0
 800600a:	d1f0      	bne.n	8005fee <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 800600c:	e7eb      	b.n	8005fe6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 800600e:	7925      	ldrb	r5, [r4, #4]
 8006010:	3d00      	subs	r5, #0
 8006012:	bf18      	it	ne
 8006014:	2501      	movne	r5, #1
 8006016:	e7d4      	b.n	8005fc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>

08006018 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8006018:	684b      	ldr	r3, [r1, #4]
 800601a:	6001      	str	r1, [r0, #0]
 800601c:	6043      	str	r3, [r0, #4]
 800601e:	684b      	ldr	r3, [r1, #4]
 8006020:	6018      	str	r0, [r3, #0]
 8006022:	6048      	str	r0, [r1, #4]
 8006024:	4770      	bx	lr

08006026 <_ZSt20__throw_length_errorPKc>:
 8006026:	b508      	push	{r3, lr}
 8006028:	f000 f894 	bl	8006154 <abort>

0800602c <_ZSt25__throw_bad_function_callv>:
 800602c:	b508      	push	{r3, lr}
 800602e:	f000 f891 	bl	8006154 <abort>

08006032 <_ZdlPv>:
 8006032:	f000 b8c9 	b.w	80061c8 <free>

08006036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006036:	7803      	ldrb	r3, [r0, #0]
 8006038:	2b47      	cmp	r3, #71	; 0x47
 800603a:	d117      	bne.n	800606c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800603c:	7843      	ldrb	r3, [r0, #1]
 800603e:	2b4e      	cmp	r3, #78	; 0x4e
 8006040:	d114      	bne.n	800606c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006042:	7883      	ldrb	r3, [r0, #2]
 8006044:	2b55      	cmp	r3, #85	; 0x55
 8006046:	d111      	bne.n	800606c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006048:	78c3      	ldrb	r3, [r0, #3]
 800604a:	2b43      	cmp	r3, #67	; 0x43
 800604c:	d10e      	bne.n	800606c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800604e:	7903      	ldrb	r3, [r0, #4]
 8006050:	2b43      	cmp	r3, #67	; 0x43
 8006052:	d10b      	bne.n	800606c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006054:	7943      	ldrb	r3, [r0, #5]
 8006056:	2b2b      	cmp	r3, #43	; 0x2b
 8006058:	d108      	bne.n	800606c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800605a:	7983      	ldrb	r3, [r0, #6]
 800605c:	2b2b      	cmp	r3, #43	; 0x2b
 800605e:	d105      	bne.n	800606c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006060:	79c0      	ldrb	r0, [r0, #7]
 8006062:	2801      	cmp	r0, #1
 8006064:	bf8c      	ite	hi
 8006066:	2000      	movhi	r0, #0
 8006068:	2001      	movls	r0, #1
 800606a:	4770      	bx	lr
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr

08006070 <__cxa_call_terminate>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4604      	mov	r4, r0
 8006074:	b148      	cbz	r0, 800608a <__cxa_call_terminate+0x1a>
 8006076:	f000 f83b 	bl	80060f0 <__cxa_begin_catch>
 800607a:	4620      	mov	r0, r4
 800607c:	f7ff ffdb 	bl	8006036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006080:	b118      	cbz	r0, 800608a <__cxa_call_terminate+0x1a>
 8006082:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8006086:	f7ff fcc3 	bl	8005a10 <_ZN10__cxxabiv111__terminateEPFvvE>
 800608a:	f7ff fccd 	bl	8005a28 <_ZSt9terminatev>

0800608e <__cxa_call_unexpected>:
 800608e:	b538      	push	{r3, r4, r5, lr}
 8006090:	4602      	mov	r2, r0
 8006092:	f7ff ffd0 	bl	8006036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006096:	4604      	mov	r4, r0
 8006098:	b140      	cbz	r0, 80060ac <__cxa_call_unexpected+0x1e>
 800609a:	2500      	movs	r5, #0
 800609c:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80060a0:	4610      	mov	r0, r2
 80060a2:	f000 f825 	bl	80060f0 <__cxa_begin_catch>
 80060a6:	b11d      	cbz	r5, 80060b0 <__cxa_call_unexpected+0x22>
 80060a8:	f7ff fcd0 	bl	8005a4c <_ZSt10unexpectedv>
 80060ac:	2501      	movs	r5, #1
 80060ae:	e7f7      	b.n	80060a0 <__cxa_call_unexpected+0x12>
 80060b0:	4620      	mov	r0, r4
 80060b2:	f7ff fcbe 	bl	8005a32 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080060b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80060b6:	7803      	ldrb	r3, [r0, #0]
 80060b8:	2b47      	cmp	r3, #71	; 0x47
 80060ba:	d117      	bne.n	80060ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060bc:	7843      	ldrb	r3, [r0, #1]
 80060be:	2b4e      	cmp	r3, #78	; 0x4e
 80060c0:	d114      	bne.n	80060ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060c2:	7883      	ldrb	r3, [r0, #2]
 80060c4:	2b55      	cmp	r3, #85	; 0x55
 80060c6:	d111      	bne.n	80060ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060c8:	78c3      	ldrb	r3, [r0, #3]
 80060ca:	2b43      	cmp	r3, #67	; 0x43
 80060cc:	d10e      	bne.n	80060ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060ce:	7903      	ldrb	r3, [r0, #4]
 80060d0:	2b43      	cmp	r3, #67	; 0x43
 80060d2:	d10b      	bne.n	80060ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060d4:	7943      	ldrb	r3, [r0, #5]
 80060d6:	2b2b      	cmp	r3, #43	; 0x2b
 80060d8:	d108      	bne.n	80060ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060da:	7983      	ldrb	r3, [r0, #6]
 80060dc:	2b2b      	cmp	r3, #43	; 0x2b
 80060de:	d105      	bne.n	80060ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060e0:	79c0      	ldrb	r0, [r0, #7]
 80060e2:	2801      	cmp	r0, #1
 80060e4:	bf8c      	ite	hi
 80060e6:	2000      	movhi	r0, #0
 80060e8:	2001      	movls	r0, #1
 80060ea:	4770      	bx	lr
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr

080060f0 <__cxa_begin_catch>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4604      	mov	r4, r0
 80060f4:	f7ff fa0e 	bl	8005514 <__cxa_get_globals>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6805      	ldr	r5, [r0, #0]
 80060fc:	4620      	mov	r0, r4
 80060fe:	f1a4 0120 	sub.w	r1, r4, #32
 8006102:	f7ff ffd8 	bl	80060b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006106:	b928      	cbnz	r0, 8006114 <__cxa_begin_catch+0x24>
 8006108:	b10d      	cbz	r5, 800610e <__cxa_begin_catch+0x1e>
 800610a:	f7ff fc8d 	bl	8005a28 <_ZSt9terminatev>
 800610e:	6011      	str	r1, [r2, #0]
 8006110:	4628      	mov	r0, r5
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8006118:	4620      	mov	r0, r4
 800611a:	2b00      	cmp	r3, #0
 800611c:	bfb4      	ite	lt
 800611e:	f1c3 0301 	rsblt	r3, r3, #1
 8006122:	3301      	addge	r3, #1
 8006124:	f844 3c0c 	str.w	r3, [r4, #-12]
 8006128:	6853      	ldr	r3, [r2, #4]
 800612a:	428d      	cmp	r5, r1
 800612c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006130:	6053      	str	r3, [r2, #4]
 8006132:	bf1c      	itt	ne
 8006134:	f844 5c10 	strne.w	r5, [r4, #-16]
 8006138:	6011      	strne	r1, [r2, #0]
 800613a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800613c:	f7fa fcf6 	bl	8000b2c <_Unwind_Complete>
 8006140:	e7e6      	b.n	8006110 <__cxa_begin_catch+0x20>
	...

08006144 <_ZSt15get_new_handlerv>:
 8006144:	4b02      	ldr	r3, [pc, #8]	; (8006150 <_ZSt15get_new_handlerv+0xc>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	f3bf 8f5b 	dmb	ish
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	2000043c 	.word	0x2000043c

08006154 <abort>:
 8006154:	2006      	movs	r0, #6
 8006156:	b508      	push	{r3, lr}
 8006158:	f000 f982 	bl	8006460 <raise>
 800615c:	2001      	movs	r0, #1
 800615e:	f7fd fa05 	bl	800356c <_exit>
	...

08006164 <__errno>:
 8006164:	4b01      	ldr	r3, [pc, #4]	; (800616c <__errno+0x8>)
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000018 	.word	0x20000018

08006170 <__libc_init_array>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	2600      	movs	r6, #0
 8006174:	4d0c      	ldr	r5, [pc, #48]	; (80061a8 <__libc_init_array+0x38>)
 8006176:	4c0d      	ldr	r4, [pc, #52]	; (80061ac <__libc_init_array+0x3c>)
 8006178:	1b64      	subs	r4, r4, r5
 800617a:	10a4      	asrs	r4, r4, #2
 800617c:	42a6      	cmp	r6, r4
 800617e:	d109      	bne.n	8006194 <__libc_init_array+0x24>
 8006180:	f000 f99e 	bl	80064c0 <_init>
 8006184:	2600      	movs	r6, #0
 8006186:	4d0a      	ldr	r5, [pc, #40]	; (80061b0 <__libc_init_array+0x40>)
 8006188:	4c0a      	ldr	r4, [pc, #40]	; (80061b4 <__libc_init_array+0x44>)
 800618a:	1b64      	subs	r4, r4, r5
 800618c:	10a4      	asrs	r4, r4, #2
 800618e:	42a6      	cmp	r6, r4
 8006190:	d105      	bne.n	800619e <__libc_init_array+0x2e>
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	f855 3b04 	ldr.w	r3, [r5], #4
 8006198:	4798      	blx	r3
 800619a:	3601      	adds	r6, #1
 800619c:	e7ee      	b.n	800617c <__libc_init_array+0xc>
 800619e:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a2:	4798      	blx	r3
 80061a4:	3601      	adds	r6, #1
 80061a6:	e7f2      	b.n	800618e <__libc_init_array+0x1e>
 80061a8:	08006dbc 	.word	0x08006dbc
 80061ac:	08006dbc 	.word	0x08006dbc
 80061b0:	08006dbc 	.word	0x08006dbc
 80061b4:	08006dd0 	.word	0x08006dd0

080061b8 <malloc>:
 80061b8:	4b02      	ldr	r3, [pc, #8]	; (80061c4 <malloc+0xc>)
 80061ba:	4601      	mov	r1, r0
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	f000 b8a3 	b.w	8006308 <_malloc_r>
 80061c2:	bf00      	nop
 80061c4:	20000018 	.word	0x20000018

080061c8 <free>:
 80061c8:	4b02      	ldr	r3, [pc, #8]	; (80061d4 <free+0xc>)
 80061ca:	4601      	mov	r1, r0
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	f000 b833 	b.w	8006238 <_free_r>
 80061d2:	bf00      	nop
 80061d4:	20000018 	.word	0x20000018

080061d8 <memcpy>:
 80061d8:	440a      	add	r2, r1
 80061da:	4291      	cmp	r1, r2
 80061dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80061e0:	d100      	bne.n	80061e4 <memcpy+0xc>
 80061e2:	4770      	bx	lr
 80061e4:	b510      	push	{r4, lr}
 80061e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ea:	4291      	cmp	r1, r2
 80061ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061f0:	d1f9      	bne.n	80061e6 <memcpy+0xe>
 80061f2:	bd10      	pop	{r4, pc}

080061f4 <memmove>:
 80061f4:	4288      	cmp	r0, r1
 80061f6:	b510      	push	{r4, lr}
 80061f8:	eb01 0402 	add.w	r4, r1, r2
 80061fc:	d902      	bls.n	8006204 <memmove+0x10>
 80061fe:	4284      	cmp	r4, r0
 8006200:	4623      	mov	r3, r4
 8006202:	d807      	bhi.n	8006214 <memmove+0x20>
 8006204:	1e43      	subs	r3, r0, #1
 8006206:	42a1      	cmp	r1, r4
 8006208:	d008      	beq.n	800621c <memmove+0x28>
 800620a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800620e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006212:	e7f8      	b.n	8006206 <memmove+0x12>
 8006214:	4601      	mov	r1, r0
 8006216:	4402      	add	r2, r0
 8006218:	428a      	cmp	r2, r1
 800621a:	d100      	bne.n	800621e <memmove+0x2a>
 800621c:	bd10      	pop	{r4, pc}
 800621e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006226:	e7f7      	b.n	8006218 <memmove+0x24>

08006228 <memset>:
 8006228:	4603      	mov	r3, r0
 800622a:	4402      	add	r2, r0
 800622c:	4293      	cmp	r3, r2
 800622e:	d100      	bne.n	8006232 <memset+0xa>
 8006230:	4770      	bx	lr
 8006232:	f803 1b01 	strb.w	r1, [r3], #1
 8006236:	e7f9      	b.n	800622c <memset+0x4>

08006238 <_free_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4605      	mov	r5, r0
 800623c:	2900      	cmp	r1, #0
 800623e:	d040      	beq.n	80062c2 <_free_r+0x8a>
 8006240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006244:	1f0c      	subs	r4, r1, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	bfb8      	it	lt
 800624a:	18e4      	addlt	r4, r4, r3
 800624c:	f000 f924 	bl	8006498 <__malloc_lock>
 8006250:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <_free_r+0x8c>)
 8006252:	6813      	ldr	r3, [r2, #0]
 8006254:	b933      	cbnz	r3, 8006264 <_free_r+0x2c>
 8006256:	6063      	str	r3, [r4, #4]
 8006258:	6014      	str	r4, [r2, #0]
 800625a:	4628      	mov	r0, r5
 800625c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006260:	f000 b920 	b.w	80064a4 <__malloc_unlock>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d908      	bls.n	800627a <_free_r+0x42>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	1821      	adds	r1, r4, r0
 800626c:	428b      	cmp	r3, r1
 800626e:	bf01      	itttt	eq
 8006270:	6819      	ldreq	r1, [r3, #0]
 8006272:	685b      	ldreq	r3, [r3, #4]
 8006274:	1809      	addeq	r1, r1, r0
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	e7ed      	b.n	8006256 <_free_r+0x1e>
 800627a:	461a      	mov	r2, r3
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	b10b      	cbz	r3, 8006284 <_free_r+0x4c>
 8006280:	42a3      	cmp	r3, r4
 8006282:	d9fa      	bls.n	800627a <_free_r+0x42>
 8006284:	6811      	ldr	r1, [r2, #0]
 8006286:	1850      	adds	r0, r2, r1
 8006288:	42a0      	cmp	r0, r4
 800628a:	d10b      	bne.n	80062a4 <_free_r+0x6c>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	4401      	add	r1, r0
 8006290:	1850      	adds	r0, r2, r1
 8006292:	4283      	cmp	r3, r0
 8006294:	6011      	str	r1, [r2, #0]
 8006296:	d1e0      	bne.n	800625a <_free_r+0x22>
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4401      	add	r1, r0
 800629e:	6011      	str	r1, [r2, #0]
 80062a0:	6053      	str	r3, [r2, #4]
 80062a2:	e7da      	b.n	800625a <_free_r+0x22>
 80062a4:	d902      	bls.n	80062ac <_free_r+0x74>
 80062a6:	230c      	movs	r3, #12
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	e7d6      	b.n	800625a <_free_r+0x22>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	1821      	adds	r1, r4, r0
 80062b0:	428b      	cmp	r3, r1
 80062b2:	bf01      	itttt	eq
 80062b4:	6819      	ldreq	r1, [r3, #0]
 80062b6:	685b      	ldreq	r3, [r3, #4]
 80062b8:	1809      	addeq	r1, r1, r0
 80062ba:	6021      	streq	r1, [r4, #0]
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	6054      	str	r4, [r2, #4]
 80062c0:	e7cb      	b.n	800625a <_free_r+0x22>
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	20000440 	.word	0x20000440

080062c8 <sbrk_aligned>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4e0e      	ldr	r6, [pc, #56]	; (8006304 <sbrk_aligned+0x3c>)
 80062cc:	460c      	mov	r4, r1
 80062ce:	6831      	ldr	r1, [r6, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	b911      	cbnz	r1, 80062da <sbrk_aligned+0x12>
 80062d4:	f000 f88c 	bl	80063f0 <_sbrk_r>
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 f887 	bl	80063f0 <_sbrk_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d00a      	beq.n	80062fc <sbrk_aligned+0x34>
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d007      	beq.n	8006300 <sbrk_aligned+0x38>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 f87c 	bl	80063f0 <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d101      	bne.n	8006300 <sbrk_aligned+0x38>
 80062fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006300:	4620      	mov	r0, r4
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	20000444 	.word	0x20000444

08006308 <_malloc_r>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	1ccd      	adds	r5, r1, #3
 800630e:	f025 0503 	bic.w	r5, r5, #3
 8006312:	3508      	adds	r5, #8
 8006314:	2d0c      	cmp	r5, #12
 8006316:	bf38      	it	cc
 8006318:	250c      	movcc	r5, #12
 800631a:	2d00      	cmp	r5, #0
 800631c:	4607      	mov	r7, r0
 800631e:	db01      	blt.n	8006324 <_malloc_r+0x1c>
 8006320:	42a9      	cmp	r1, r5
 8006322:	d905      	bls.n	8006330 <_malloc_r+0x28>
 8006324:	230c      	movs	r3, #12
 8006326:	2600      	movs	r6, #0
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4630      	mov	r0, r6
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	4e2e      	ldr	r6, [pc, #184]	; (80063ec <_malloc_r+0xe4>)
 8006332:	f000 f8b1 	bl	8006498 <__malloc_lock>
 8006336:	6833      	ldr	r3, [r6, #0]
 8006338:	461c      	mov	r4, r3
 800633a:	bb34      	cbnz	r4, 800638a <_malloc_r+0x82>
 800633c:	4629      	mov	r1, r5
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ffc2 	bl	80062c8 <sbrk_aligned>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	4604      	mov	r4, r0
 8006348:	d14d      	bne.n	80063e6 <_malloc_r+0xde>
 800634a:	6834      	ldr	r4, [r6, #0]
 800634c:	4626      	mov	r6, r4
 800634e:	2e00      	cmp	r6, #0
 8006350:	d140      	bne.n	80063d4 <_malloc_r+0xcc>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	4631      	mov	r1, r6
 8006356:	4638      	mov	r0, r7
 8006358:	eb04 0803 	add.w	r8, r4, r3
 800635c:	f000 f848 	bl	80063f0 <_sbrk_r>
 8006360:	4580      	cmp	r8, r0
 8006362:	d13a      	bne.n	80063da <_malloc_r+0xd2>
 8006364:	6821      	ldr	r1, [r4, #0]
 8006366:	3503      	adds	r5, #3
 8006368:	1a6d      	subs	r5, r5, r1
 800636a:	f025 0503 	bic.w	r5, r5, #3
 800636e:	3508      	adds	r5, #8
 8006370:	2d0c      	cmp	r5, #12
 8006372:	bf38      	it	cc
 8006374:	250c      	movcc	r5, #12
 8006376:	4638      	mov	r0, r7
 8006378:	4629      	mov	r1, r5
 800637a:	f7ff ffa5 	bl	80062c8 <sbrk_aligned>
 800637e:	3001      	adds	r0, #1
 8006380:	d02b      	beq.n	80063da <_malloc_r+0xd2>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	442b      	add	r3, r5
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	e00e      	b.n	80063a8 <_malloc_r+0xa0>
 800638a:	6822      	ldr	r2, [r4, #0]
 800638c:	1b52      	subs	r2, r2, r5
 800638e:	d41e      	bmi.n	80063ce <_malloc_r+0xc6>
 8006390:	2a0b      	cmp	r2, #11
 8006392:	d916      	bls.n	80063c2 <_malloc_r+0xba>
 8006394:	1961      	adds	r1, r4, r5
 8006396:	42a3      	cmp	r3, r4
 8006398:	6025      	str	r5, [r4, #0]
 800639a:	bf18      	it	ne
 800639c:	6059      	strne	r1, [r3, #4]
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	bf08      	it	eq
 80063a2:	6031      	streq	r1, [r6, #0]
 80063a4:	5162      	str	r2, [r4, r5]
 80063a6:	604b      	str	r3, [r1, #4]
 80063a8:	4638      	mov	r0, r7
 80063aa:	f104 060b 	add.w	r6, r4, #11
 80063ae:	f000 f879 	bl	80064a4 <__malloc_unlock>
 80063b2:	f026 0607 	bic.w	r6, r6, #7
 80063b6:	1d23      	adds	r3, r4, #4
 80063b8:	1af2      	subs	r2, r6, r3
 80063ba:	d0b6      	beq.n	800632a <_malloc_r+0x22>
 80063bc:	1b9b      	subs	r3, r3, r6
 80063be:	50a3      	str	r3, [r4, r2]
 80063c0:	e7b3      	b.n	800632a <_malloc_r+0x22>
 80063c2:	6862      	ldr	r2, [r4, #4]
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	bf0c      	ite	eq
 80063c8:	6032      	streq	r2, [r6, #0]
 80063ca:	605a      	strne	r2, [r3, #4]
 80063cc:	e7ec      	b.n	80063a8 <_malloc_r+0xa0>
 80063ce:	4623      	mov	r3, r4
 80063d0:	6864      	ldr	r4, [r4, #4]
 80063d2:	e7b2      	b.n	800633a <_malloc_r+0x32>
 80063d4:	4634      	mov	r4, r6
 80063d6:	6876      	ldr	r6, [r6, #4]
 80063d8:	e7b9      	b.n	800634e <_malloc_r+0x46>
 80063da:	230c      	movs	r3, #12
 80063dc:	4638      	mov	r0, r7
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	f000 f860 	bl	80064a4 <__malloc_unlock>
 80063e4:	e7a1      	b.n	800632a <_malloc_r+0x22>
 80063e6:	6025      	str	r5, [r4, #0]
 80063e8:	e7de      	b.n	80063a8 <_malloc_r+0xa0>
 80063ea:	bf00      	nop
 80063ec:	20000440 	.word	0x20000440

080063f0 <_sbrk_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	2300      	movs	r3, #0
 80063f4:	4d05      	ldr	r5, [pc, #20]	; (800640c <_sbrk_r+0x1c>)
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fd f8bc 	bl	8003578 <_sbrk>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_sbrk_r+0x1a>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_sbrk_r+0x1a>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	20000448 	.word	0x20000448

08006410 <_raise_r>:
 8006410:	291f      	cmp	r1, #31
 8006412:	b538      	push	{r3, r4, r5, lr}
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	d904      	bls.n	8006424 <_raise_r+0x14>
 800641a:	2316      	movs	r3, #22
 800641c:	6003      	str	r3, [r0, #0]
 800641e:	f04f 30ff 	mov.w	r0, #4294967295
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006426:	b112      	cbz	r2, 800642e <_raise_r+0x1e>
 8006428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800642c:	b94b      	cbnz	r3, 8006442 <_raise_r+0x32>
 800642e:	4620      	mov	r0, r4
 8006430:	f000 f830 	bl	8006494 <_getpid_r>
 8006434:	462a      	mov	r2, r5
 8006436:	4601      	mov	r1, r0
 8006438:	4620      	mov	r0, r4
 800643a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800643e:	f000 b817 	b.w	8006470 <_kill_r>
 8006442:	2b01      	cmp	r3, #1
 8006444:	d00a      	beq.n	800645c <_raise_r+0x4c>
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	d103      	bne.n	8006452 <_raise_r+0x42>
 800644a:	2316      	movs	r3, #22
 800644c:	6003      	str	r3, [r0, #0]
 800644e:	2001      	movs	r0, #1
 8006450:	e7e7      	b.n	8006422 <_raise_r+0x12>
 8006452:	2400      	movs	r4, #0
 8006454:	4628      	mov	r0, r5
 8006456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800645a:	4798      	blx	r3
 800645c:	2000      	movs	r0, #0
 800645e:	e7e0      	b.n	8006422 <_raise_r+0x12>

08006460 <raise>:
 8006460:	4b02      	ldr	r3, [pc, #8]	; (800646c <raise+0xc>)
 8006462:	4601      	mov	r1, r0
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	f7ff bfd3 	b.w	8006410 <_raise_r>
 800646a:	bf00      	nop
 800646c:	20000018 	.word	0x20000018

08006470 <_kill_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	2300      	movs	r3, #0
 8006474:	4d06      	ldr	r5, [pc, #24]	; (8006490 <_kill_r+0x20>)
 8006476:	4604      	mov	r4, r0
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	f7fd f86d 	bl	800355c <_kill>
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	d102      	bne.n	800648c <_kill_r+0x1c>
 8006486:	682b      	ldr	r3, [r5, #0]
 8006488:	b103      	cbz	r3, 800648c <_kill_r+0x1c>
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	bd38      	pop	{r3, r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	20000448 	.word	0x20000448

08006494 <_getpid_r>:
 8006494:	f7fd b860 	b.w	8003558 <_getpid>

08006498 <__malloc_lock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_lock+0x8>)
 800649a:	f000 b809 	b.w	80064b0 <__retarget_lock_acquire_recursive>
 800649e:	bf00      	nop
 80064a0:	2000044c 	.word	0x2000044c

080064a4 <__malloc_unlock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	; (80064ac <__malloc_unlock+0x8>)
 80064a6:	f000 b804 	b.w	80064b2 <__retarget_lock_release_recursive>
 80064aa:	bf00      	nop
 80064ac:	2000044c 	.word	0x2000044c

080064b0 <__retarget_lock_acquire_recursive>:
 80064b0:	4770      	bx	lr

080064b2 <__retarget_lock_release_recursive>:
 80064b2:	4770      	bx	lr

080064b4 <_Unwind_GetDataRelBase>:
 80064b4:	b508      	push	{r3, lr}
 80064b6:	f7ff fe4d 	bl	8006154 <abort>

080064ba <_Unwind_GetTextRelBase>:
 80064ba:	b508      	push	{r3, lr}
 80064bc:	f7ff fffa 	bl	80064b4 <_Unwind_GetDataRelBase>

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
