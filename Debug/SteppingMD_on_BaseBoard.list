
SteppingMD_on_BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000184  08007594  08007594  00017594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000268  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007980  08007980  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080079a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000007c  08007a20  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08007a20  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007b0c6  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008315  00000000  00000000  0009b16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00023d0c  00000000  00000000  000a3480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  000c7190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005840  00000000  00000000  000c7fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000aac3  00000000  00000000  000cd7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021660  00000000  00000000  000d82ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df5fd  00000000  00000000  000f990b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d8f08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004074  00000000  00000000  001d8f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007014 	.word	0x08007014

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08007014 	.word	0x08007014

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2f>:
 8000900:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000904:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000908:	bf24      	itt	cs
 800090a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000912:	d90d      	bls.n	8000930 <__aeabi_d2f+0x30>
 8000914:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000918:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800091c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000920:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000924:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000928:	bf08      	it	eq
 800092a:	f020 0001 	biceq.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000934:	d121      	bne.n	800097a <__aeabi_d2f+0x7a>
 8000936:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093a:	bfbc      	itt	lt
 800093c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000940:	4770      	bxlt	lr
 8000942:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000946:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094a:	f1c2 0218 	rsb	r2, r2, #24
 800094e:	f1c2 0c20 	rsb	ip, r2, #32
 8000952:	fa10 f30c 	lsls.w	r3, r0, ip
 8000956:	fa20 f002 	lsr.w	r0, r0, r2
 800095a:	bf18      	it	ne
 800095c:	f040 0001 	orrne.w	r0, r0, #1
 8000960:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000964:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000968:	fa03 fc0c 	lsl.w	ip, r3, ip
 800096c:	ea40 000c 	orr.w	r0, r0, ip
 8000970:	fa23 f302 	lsr.w	r3, r3, r2
 8000974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000978:	e7cc      	b.n	8000914 <__aeabi_d2f+0x14>
 800097a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097e:	d107      	bne.n	8000990 <__aeabi_d2f+0x90>
 8000980:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000984:	bf1e      	ittt	ne
 8000986:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098e:	4770      	bxne	lr
 8000990:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000994:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_frsub>:
 80009a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a4:	e002      	b.n	80009ac <__addsf3>
 80009a6:	bf00      	nop

080009a8 <__aeabi_fsub>:
 80009a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009ac <__addsf3>:
 80009ac:	0042      	lsls	r2, r0, #1
 80009ae:	bf1f      	itttt	ne
 80009b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b4:	ea92 0f03 	teqne	r2, r3
 80009b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009c0:	d06a      	beq.n	8000a98 <__addsf3+0xec>
 80009c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ca:	bfc1      	itttt	gt
 80009cc:	18d2      	addgt	r2, r2, r3
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	4048      	eorgt	r0, r1
 80009d2:	4041      	eorgt	r1, r0
 80009d4:	bfb8      	it	lt
 80009d6:	425b      	neglt	r3, r3
 80009d8:	2b19      	cmp	r3, #25
 80009da:	bf88      	it	hi
 80009dc:	4770      	bxhi	lr
 80009de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ea:	bf18      	it	ne
 80009ec:	4240      	negne	r0, r0
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009fa:	bf18      	it	ne
 80009fc:	4249      	negne	r1, r1
 80009fe:	ea92 0f03 	teq	r2, r3
 8000a02:	d03f      	beq.n	8000a84 <__addsf3+0xd8>
 8000a04:	f1a2 0201 	sub.w	r2, r2, #1
 8000a08:	fa41 fc03 	asr.w	ip, r1, r3
 8000a0c:	eb10 000c 	adds.w	r0, r0, ip
 8000a10:	f1c3 0320 	rsb	r3, r3, #32
 8000a14:	fa01 f103 	lsl.w	r1, r1, r3
 8000a18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a1c:	d502      	bpl.n	8000a24 <__addsf3+0x78>
 8000a1e:	4249      	negs	r1, r1
 8000a20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a28:	d313      	bcc.n	8000a52 <__addsf3+0xa6>
 8000a2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2e:	d306      	bcc.n	8000a3e <__addsf3+0x92>
 8000a30:	0840      	lsrs	r0, r0, #1
 8000a32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a36:	f102 0201 	add.w	r2, r2, #1
 8000a3a:	2afe      	cmp	r2, #254	; 0xfe
 8000a3c:	d251      	bcs.n	8000ae2 <__addsf3+0x136>
 8000a3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a46:	bf08      	it	eq
 8000a48:	f020 0001 	biceq.w	r0, r0, #1
 8000a4c:	ea40 0003 	orr.w	r0, r0, r3
 8000a50:	4770      	bx	lr
 8000a52:	0049      	lsls	r1, r1, #1
 8000a54:	eb40 0000 	adc.w	r0, r0, r0
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	bf28      	it	cs
 8000a5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a60:	d2ed      	bcs.n	8000a3e <__addsf3+0x92>
 8000a62:	fab0 fc80 	clz	ip, r0
 8000a66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a72:	bfaa      	itet	ge
 8000a74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a78:	4252      	neglt	r2, r2
 8000a7a:	4318      	orrge	r0, r3
 8000a7c:	bfbc      	itt	lt
 8000a7e:	40d0      	lsrlt	r0, r2
 8000a80:	4318      	orrlt	r0, r3
 8000a82:	4770      	bx	lr
 8000a84:	f092 0f00 	teq	r2, #0
 8000a88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a8c:	bf06      	itte	eq
 8000a8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a92:	3201      	addeq	r2, #1
 8000a94:	3b01      	subne	r3, #1
 8000a96:	e7b5      	b.n	8000a04 <__addsf3+0x58>
 8000a98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa6:	d021      	beq.n	8000aec <__addsf3+0x140>
 8000aa8:	ea92 0f03 	teq	r2, r3
 8000aac:	d004      	beq.n	8000ab8 <__addsf3+0x10c>
 8000aae:	f092 0f00 	teq	r2, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	4608      	moveq	r0, r1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea90 0f01 	teq	r0, r1
 8000abc:	bf1c      	itt	ne
 8000abe:	2000      	movne	r0, #0
 8000ac0:	4770      	bxne	lr
 8000ac2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac6:	d104      	bne.n	8000ad2 <__addsf3+0x126>
 8000ac8:	0040      	lsls	r0, r0, #1
 8000aca:	bf28      	it	cs
 8000acc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ad0:	4770      	bx	lr
 8000ad2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad6:	bf3c      	itt	cc
 8000ad8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000adc:	4770      	bxcc	lr
 8000ade:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aea:	4770      	bx	lr
 8000aec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000af0:	bf16      	itet	ne
 8000af2:	4608      	movne	r0, r1
 8000af4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af8:	4601      	movne	r1, r0
 8000afa:	0242      	lsls	r2, r0, #9
 8000afc:	bf06      	itte	eq
 8000afe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b02:	ea90 0f01 	teqeq	r0, r1
 8000b06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_ui2f>:
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e004      	b.n	8000b1c <__aeabi_i2f+0x8>
 8000b12:	bf00      	nop

08000b14 <__aeabi_i2f>:
 8000b14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	bf48      	it	mi
 8000b1a:	4240      	negmi	r0, r0
 8000b1c:	ea5f 0c00 	movs.w	ip, r0
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b28:	4601      	mov	r1, r0
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	e01c      	b.n	8000b6a <__aeabi_l2f+0x2a>

08000b30 <__aeabi_ul2f>:
 8000b30:	ea50 0201 	orrs.w	r2, r0, r1
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e00a      	b.n	8000b54 <__aeabi_l2f+0x14>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_l2f>:
 8000b40:	ea50 0201 	orrs.w	r2, r0, r1
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b4c:	d502      	bpl.n	8000b54 <__aeabi_l2f+0x14>
 8000b4e:	4240      	negs	r0, r0
 8000b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b54:	ea5f 0c01 	movs.w	ip, r1
 8000b58:	bf02      	ittt	eq
 8000b5a:	4684      	moveq	ip, r0
 8000b5c:	4601      	moveq	r1, r0
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b64:	bf08      	it	eq
 8000b66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6e:	fabc f28c 	clz	r2, ip
 8000b72:	3a08      	subs	r2, #8
 8000b74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b78:	db10      	blt.n	8000b9c <__aeabi_l2f+0x5c>
 8000b7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7e:	4463      	add	r3, ip
 8000b80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b84:	f1c2 0220 	rsb	r2, r2, #32
 8000b88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b90:	eb43 0002 	adc.w	r0, r3, r2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f102 0220 	add.w	r2, r2, #32
 8000ba0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba4:	f1c2 0220 	rsb	r2, r2, #32
 8000ba8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bac:	fa21 f202 	lsr.w	r2, r1, r2
 8000bb0:	eb43 0002 	adc.w	r0, r3, r2
 8000bb4:	bf08      	it	eq
 8000bb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_fmul>:
 8000bbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bca:	ea92 0f0c 	teqne	r2, ip
 8000bce:	ea93 0f0c 	teqne	r3, ip
 8000bd2:	d06f      	beq.n	8000cb4 <__aeabi_fmul+0xf8>
 8000bd4:	441a      	add	r2, r3
 8000bd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bda:	0240      	lsls	r0, r0, #9
 8000bdc:	bf18      	it	ne
 8000bde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000be2:	d01e      	beq.n	8000c22 <__aeabi_fmul+0x66>
 8000be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bf0:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bfc:	bf3e      	ittt	cc
 8000bfe:	0049      	lslcc	r1, r1, #1
 8000c00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c04:	005b      	lslcc	r3, r3, #1
 8000c06:	ea40 0001 	orr.w	r0, r0, r1
 8000c0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0e:	2afd      	cmp	r2, #253	; 0xfd
 8000c10:	d81d      	bhi.n	8000c4e <__aeabi_fmul+0x92>
 8000c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	4770      	bx	lr
 8000c22:	f090 0f00 	teq	r0, #0
 8000c26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c2a:	bf08      	it	eq
 8000c2c:	0249      	lsleq	r1, r1, #9
 8000c2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c36:	3a7f      	subs	r2, #127	; 0x7f
 8000c38:	bfc2      	ittt	gt
 8000c3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c42:	4770      	bxgt	lr
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	dc5d      	bgt.n	8000d0c <__aeabi_fmul+0x150>
 8000c50:	f112 0f19 	cmn.w	r2, #25
 8000c54:	bfdc      	itt	le
 8000c56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c5a:	4770      	bxle	lr
 8000c5c:	f1c2 0200 	rsb	r2, r2, #0
 8000c60:	0041      	lsls	r1, r0, #1
 8000c62:	fa21 f102 	lsr.w	r1, r1, r2
 8000c66:	f1c2 0220 	rsb	r2, r2, #32
 8000c6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c72:	f140 0000 	adc.w	r0, r0, #0
 8000c76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c7a:	bf08      	it	eq
 8000c7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c80:	4770      	bx	lr
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0040      	lsleq	r0, r0, #1
 8000c8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c92:	3a01      	subeq	r2, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xce>
 8000c96:	ea40 000c 	orr.w	r0, r0, ip
 8000c9a:	f093 0f00 	teq	r3, #0
 8000c9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca2:	bf02      	ittt	eq
 8000ca4:	0049      	lsleq	r1, r1, #1
 8000ca6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000caa:	3b01      	subeq	r3, #1
 8000cac:	d0f9      	beq.n	8000ca2 <__aeabi_fmul+0xe6>
 8000cae:	ea41 010c 	orr.w	r1, r1, ip
 8000cb2:	e78f      	b.n	8000bd4 <__aeabi_fmul+0x18>
 8000cb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb8:	ea92 0f0c 	teq	r2, ip
 8000cbc:	bf18      	it	ne
 8000cbe:	ea93 0f0c 	teqne	r3, ip
 8000cc2:	d00a      	beq.n	8000cda <__aeabi_fmul+0x11e>
 8000cc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc8:	bf18      	it	ne
 8000cca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	d1d8      	bne.n	8000c82 <__aeabi_fmul+0xc6>
 8000cd0:	ea80 0001 	eor.w	r0, r0, r1
 8000cd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f090 0f00 	teq	r0, #0
 8000cde:	bf17      	itett	ne
 8000ce0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	f091 0f00 	teqne	r1, #0
 8000cea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cee:	d014      	beq.n	8000d1a <__aeabi_fmul+0x15e>
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	d101      	bne.n	8000cfa <__aeabi_fmul+0x13e>
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	d10f      	bne.n	8000d1a <__aeabi_fmul+0x15e>
 8000cfa:	ea93 0f0c 	teq	r3, ip
 8000cfe:	d103      	bne.n	8000d08 <__aeabi_fmul+0x14c>
 8000d00:	024b      	lsls	r3, r1, #9
 8000d02:	bf18      	it	ne
 8000d04:	4608      	movne	r0, r1
 8000d06:	d108      	bne.n	8000d1a <__aeabi_fmul+0x15e>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fdiv>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d069      	beq.n	8000e10 <__aeabi_fdiv+0xec>
 8000d3c:	eba2 0203 	sub.w	r2, r2, r3
 8000d40:	ea80 0c01 	eor.w	ip, r0, r1
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d4a:	d037      	beq.n	8000dbc <__aeabi_fdiv+0x98>
 8000d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	bf38      	it	cc
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	bf24      	itt	cs
 8000d6e:	1a5b      	subcs	r3, r3, r1
 8000d70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d78:	bf24      	itt	cs
 8000d7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d86:	bf24      	itt	cs
 8000d88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d94:	bf24      	itt	cs
 8000d96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da6:	d1e0      	bne.n	8000d6a <__aeabi_fdiv+0x46>
 8000da8:	2afd      	cmp	r2, #253	; 0xfd
 8000daa:	f63f af50 	bhi.w	8000c4e <__aeabi_fmul+0x92>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db4:	bf08      	it	eq
 8000db6:	f020 0001 	biceq.w	r0, r0, #1
 8000dba:	4770      	bx	lr
 8000dbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc4:	327f      	adds	r2, #127	; 0x7f
 8000dc6:	bfc2      	ittt	gt
 8000dc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd0:	4770      	bxgt	lr
 8000dd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	3a01      	subs	r2, #1
 8000ddc:	e737      	b.n	8000c4e <__aeabi_fmul+0x92>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xc2>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fdiv+0xda>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e795      	b.n	8000d3c <__aeabi_fdiv+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d108      	bne.n	8000e2c <__aeabi_fdiv+0x108>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	f47f af7d 	bne.w	8000d1a <__aeabi_fmul+0x15e>
 8000e20:	ea93 0f0c 	teq	r3, ip
 8000e24:	f47f af70 	bne.w	8000d08 <__aeabi_fmul+0x14c>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e776      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	d104      	bne.n	8000e3c <__aeabi_fdiv+0x118>
 8000e32:	024b      	lsls	r3, r1, #9
 8000e34:	f43f af4c 	beq.w	8000cd0 <__aeabi_fmul+0x114>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e76e      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1ca      	bne.n	8000dde <__aeabi_fdiv+0xba>
 8000e48:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e4c:	f47f af5c 	bne.w	8000d08 <__aeabi_fmul+0x14c>
 8000e50:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	f47f af3c 	bne.w	8000cd0 <__aeabi_fmul+0x114>
 8000e58:	e75f      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e5a:	bf00      	nop

08000e5c <__gesf2>:
 8000e5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e60:	e006      	b.n	8000e70 <__cmpsf2+0x4>
 8000e62:	bf00      	nop

08000e64 <__lesf2>:
 8000e64:	f04f 0c01 	mov.w	ip, #1
 8000e68:	e002      	b.n	8000e70 <__cmpsf2+0x4>
 8000e6a:	bf00      	nop

08000e6c <__cmpsf2>:
 8000e6c:	f04f 0c01 	mov.w	ip, #1
 8000e70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e80:	bf18      	it	ne
 8000e82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e86:	d011      	beq.n	8000eac <__cmpsf2+0x40>
 8000e88:	b001      	add	sp, #4
 8000e8a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8e:	bf18      	it	ne
 8000e90:	ea90 0f01 	teqne	r0, r1
 8000e94:	bf58      	it	pl
 8000e96:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e9a:	bf88      	it	hi
 8000e9c:	17c8      	asrhi	r0, r1, #31
 8000e9e:	bf38      	it	cc
 8000ea0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea4:	bf18      	it	ne
 8000ea6:	f040 0001 	orrne.w	r0, r0, #1
 8000eaa:	4770      	bx	lr
 8000eac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb0:	d102      	bne.n	8000eb8 <__cmpsf2+0x4c>
 8000eb2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb6:	d105      	bne.n	8000ec4 <__cmpsf2+0x58>
 8000eb8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ebc:	d1e4      	bne.n	8000e88 <__cmpsf2+0x1c>
 8000ebe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ec2:	d0e1      	beq.n	8000e88 <__cmpsf2+0x1c>
 8000ec4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <__aeabi_cfrcmple>:
 8000ecc:	4684      	mov	ip, r0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	4661      	mov	r1, ip
 8000ed2:	e7ff      	b.n	8000ed4 <__aeabi_cfcmpeq>

08000ed4 <__aeabi_cfcmpeq>:
 8000ed4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed6:	f7ff ffc9 	bl	8000e6c <__cmpsf2>
 8000eda:	2800      	cmp	r0, #0
 8000edc:	bf48      	it	mi
 8000ede:	f110 0f00 	cmnmi.w	r0, #0
 8000ee2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee4 <__aeabi_fcmpeq>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff fff4 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000eec:	bf0c      	ite	eq
 8000eee:	2001      	moveq	r0, #1
 8000ef0:	2000      	movne	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmplt>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffea 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000f00:	bf34      	ite	cc
 8000f02:	2001      	movcc	r0, #1
 8000f04:	2000      	movcs	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmple>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffe0 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpge>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffd2 	bl	8000ecc <__aeabi_cfrcmple>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpgt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffc8 	bl	8000ecc <__aeabi_cfrcmple>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_f2uiz>:
 8000f48:	0042      	lsls	r2, r0, #1
 8000f4a:	d20e      	bcs.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f50:	d30b      	bcc.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5a:	d409      	bmi.n	8000f70 <__aeabi_f2uiz+0x28>
 8000f5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2uiz+0x32>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d102      	bne.n	8000f80 <__aeabi_f2uiz+0x38>
 8000f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7e:	4770      	bx	lr
 8000f80:	f04f 0000 	mov.w	r0, #0
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <selfrel_offset31>:
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	005a      	lsls	r2, r3, #1
 8000f8c:	bf4c      	ite	mi
 8000f8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000f96:	4418      	add	r0, r3
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <search_EIT_table>:
 8000f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fa0:	b339      	cbz	r1, 8000ff2 <search_EIT_table+0x56>
 8000fa2:	1e4f      	subs	r7, r1, #1
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	4615      	mov	r5, r2
 8000fa8:	463e      	mov	r6, r7
 8000faa:	f04f 0800 	mov.w	r8, #0
 8000fae:	eb08 0106 	add.w	r1, r8, r6
 8000fb2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fb6:	1049      	asrs	r1, r1, #1
 8000fb8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000fbc:	4648      	mov	r0, r9
 8000fbe:	f7ff ffe3 	bl	8000f88 <selfrel_offset31>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	00c8      	lsls	r0, r1, #3
 8000fc6:	3008      	adds	r0, #8
 8000fc8:	428f      	cmp	r7, r1
 8000fca:	4420      	add	r0, r4
 8000fcc:	d00b      	beq.n	8000fe6 <search_EIT_table+0x4a>
 8000fce:	42ab      	cmp	r3, r5
 8000fd0:	d80b      	bhi.n	8000fea <search_EIT_table+0x4e>
 8000fd2:	f7ff ffd9 	bl	8000f88 <selfrel_offset31>
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	42a8      	cmp	r0, r5
 8000fda:	f101 0801 	add.w	r8, r1, #1
 8000fde:	d3e6      	bcc.n	8000fae <search_EIT_table+0x12>
 8000fe0:	4648      	mov	r0, r9
 8000fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fe6:	42ab      	cmp	r3, r5
 8000fe8:	d9fa      	bls.n	8000fe0 <search_EIT_table+0x44>
 8000fea:	4588      	cmp	r8, r1
 8000fec:	d001      	beq.n	8000ff2 <search_EIT_table+0x56>
 8000fee:	1e4e      	subs	r6, r1, #1
 8000ff0:	e7dd      	b.n	8000fae <search_EIT_table+0x12>
 8000ff2:	f04f 0900 	mov.w	r9, #0
 8000ff6:	4648      	mov	r0, r9
 8000ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000ffc <__gnu_unwind_get_pr_addr>:
 8000ffc:	2801      	cmp	r0, #1
 8000ffe:	d007      	beq.n	8001010 <__gnu_unwind_get_pr_addr+0x14>
 8001000:	2802      	cmp	r0, #2
 8001002:	d007      	beq.n	8001014 <__gnu_unwind_get_pr_addr+0x18>
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__gnu_unwind_get_pr_addr+0x1c>)
 8001006:	2800      	cmp	r0, #0
 8001008:	bf0c      	ite	eq
 800100a:	4618      	moveq	r0, r3
 800100c:	2000      	movne	r0, #0
 800100e:	4770      	bx	lr
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <__gnu_unwind_get_pr_addr+0x20>)
 8001012:	4770      	bx	lr
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <__gnu_unwind_get_pr_addr+0x24>)
 8001016:	4770      	bx	lr
 8001018:	080016ed 	.word	0x080016ed
 800101c:	080016f1 	.word	0x080016f1
 8001020:	080016f5 	.word	0x080016f5

08001024 <get_eit_entry>:
 8001024:	b530      	push	{r4, r5, lr}
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <get_eit_entry+0x94>)
 8001028:	4604      	mov	r4, r0
 800102a:	b083      	sub	sp, #12
 800102c:	1e8d      	subs	r5, r1, #2
 800102e:	b33b      	cbz	r3, 8001080 <get_eit_entry+0x5c>
 8001030:	4628      	mov	r0, r5
 8001032:	a901      	add	r1, sp, #4
 8001034:	f3af 8000 	nop.w
 8001038:	b1e8      	cbz	r0, 8001076 <get_eit_entry+0x52>
 800103a:	9901      	ldr	r1, [sp, #4]
 800103c:	462a      	mov	r2, r5
 800103e:	f7ff ffad 	bl	8000f9c <search_EIT_table>
 8001042:	4601      	mov	r1, r0
 8001044:	b1b8      	cbz	r0, 8001076 <get_eit_entry+0x52>
 8001046:	f7ff ff9f 	bl	8000f88 <selfrel_offset31>
 800104a:	684b      	ldr	r3, [r1, #4]
 800104c:	64a0      	str	r0, [r4, #72]	; 0x48
 800104e:	2b01      	cmp	r3, #1
 8001050:	d02e      	beq.n	80010b0 <get_eit_entry+0x8c>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db27      	blt.n	80010a6 <get_eit_entry+0x82>
 8001056:	1d08      	adds	r0, r1, #4
 8001058:	f7ff ff96 	bl	8000f88 <selfrel_offset31>
 800105c:	2300      	movs	r3, #0
 800105e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8001062:	6803      	ldr	r3, [r0, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db12      	blt.n	800108e <get_eit_entry+0x6a>
 8001068:	f7ff ff8e 	bl	8000f88 <selfrel_offset31>
 800106c:	4603      	mov	r3, r0
 800106e:	2000      	movs	r0, #0
 8001070:	6123      	str	r3, [r4, #16]
 8001072:	b003      	add	sp, #12
 8001074:	bd30      	pop	{r4, r5, pc}
 8001076:	2300      	movs	r3, #0
 8001078:	2009      	movs	r0, #9
 800107a:	6123      	str	r3, [r4, #16]
 800107c:	b003      	add	sp, #12
 800107e:	bd30      	pop	{r4, r5, pc}
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <get_eit_entry+0x98>)
 8001082:	490f      	ldr	r1, [pc, #60]	; (80010c0 <get_eit_entry+0x9c>)
 8001084:	4618      	mov	r0, r3
 8001086:	1ac9      	subs	r1, r1, r3
 8001088:	10c9      	asrs	r1, r1, #3
 800108a:	9101      	str	r1, [sp, #4]
 800108c:	e7d6      	b.n	800103c <get_eit_entry+0x18>
 800108e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8001092:	f7ff ffb3 	bl	8000ffc <__gnu_unwind_get_pr_addr>
 8001096:	2800      	cmp	r0, #0
 8001098:	4603      	mov	r3, r0
 800109a:	bf14      	ite	ne
 800109c:	2000      	movne	r0, #0
 800109e:	2009      	moveq	r0, #9
 80010a0:	6123      	str	r3, [r4, #16]
 80010a2:	b003      	add	sp, #12
 80010a4:	bd30      	pop	{r4, r5, pc}
 80010a6:	2301      	movs	r3, #1
 80010a8:	1d08      	adds	r0, r1, #4
 80010aa:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80010ae:	e7d8      	b.n	8001062 <get_eit_entry+0x3e>
 80010b0:	2300      	movs	r3, #0
 80010b2:	2005      	movs	r0, #5
 80010b4:	6123      	str	r3, [r4, #16]
 80010b6:	e7dc      	b.n	8001072 <get_eit_entry+0x4e>
 80010b8:	00000000 	.word	0x00000000
 80010bc:	08007718 	.word	0x08007718
 80010c0:	08007980 	.word	0x08007980

080010c4 <restore_non_core_regs>:
 80010c4:	6803      	ldr	r3, [r0, #0]
 80010c6:	b510      	push	{r4, lr}
 80010c8:	07da      	lsls	r2, r3, #31
 80010ca:	4604      	mov	r4, r0
 80010cc:	d406      	bmi.n	80010dc <restore_non_core_regs+0x18>
 80010ce:	079b      	lsls	r3, r3, #30
 80010d0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80010d4:	d509      	bpl.n	80010ea <restore_non_core_regs+0x26>
 80010d6:	f000 fc5d 	bl	8001994 <__gnu_Unwind_Restore_VFP_D>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	0759      	lsls	r1, r3, #29
 80010de:	d509      	bpl.n	80010f4 <restore_non_core_regs+0x30>
 80010e0:	071a      	lsls	r2, r3, #28
 80010e2:	d50e      	bpl.n	8001102 <restore_non_core_regs+0x3e>
 80010e4:	06db      	lsls	r3, r3, #27
 80010e6:	d513      	bpl.n	8001110 <restore_non_core_regs+0x4c>
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	f000 fc4b 	bl	8001984 <__gnu_Unwind_Restore_VFP>
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	0759      	lsls	r1, r3, #29
 80010f2:	d4f5      	bmi.n	80010e0 <restore_non_core_regs+0x1c>
 80010f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80010f8:	f000 fc54 	bl	80019a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	071a      	lsls	r2, r3, #28
 8001100:	d4f0      	bmi.n	80010e4 <restore_non_core_regs+0x20>
 8001102:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001106:	f000 fc55 	bl	80019b4 <__gnu_Unwind_Restore_WMMXD>
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	06db      	lsls	r3, r3, #27
 800110e:	d4eb      	bmi.n	80010e8 <restore_non_core_regs+0x24>
 8001110:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001118:	f000 bc90 	b.w	8001a3c <__gnu_Unwind_Restore_WMMXC>

0800111c <__gnu_unwind_24bit.constprop.0>:
 800111c:	2009      	movs	r0, #9
 800111e:	4770      	bx	lr

08001120 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001120:	4603      	mov	r3, r0
 8001122:	6800      	ldr	r0, [r0, #0]
 8001124:	b100      	cbz	r0, 8001128 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8001126:	4418      	add	r0, r3
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <_Unwind_DebugHook>:
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <unwind_phase2>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	4604      	mov	r4, r0
 8001134:	460e      	mov	r6, r1
 8001136:	4620      	mov	r0, r4
 8001138:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800113a:	f7ff ff73 	bl	8001024 <get_eit_entry>
 800113e:	4605      	mov	r5, r0
 8001140:	b998      	cbnz	r0, 800116a <unwind_phase2+0x3a>
 8001142:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8001146:	4632      	mov	r2, r6
 8001148:	4621      	mov	r1, r4
 800114a:	2001      	movs	r0, #1
 800114c:	6923      	ldr	r3, [r4, #16]
 800114e:	f8c4 c014 	str.w	ip, [r4, #20]
 8001152:	4798      	blx	r3
 8001154:	2808      	cmp	r0, #8
 8001156:	d0ee      	beq.n	8001136 <unwind_phase2+0x6>
 8001158:	2807      	cmp	r0, #7
 800115a:	d106      	bne.n	800116a <unwind_phase2+0x3a>
 800115c:	4628      	mov	r0, r5
 800115e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001160:	f7ff ffe4 	bl	800112c <_Unwind_DebugHook>
 8001164:	1d30      	adds	r0, r6, #4
 8001166:	f000 fc01 	bl	800196c <__restore_core_regs>
 800116a:	f005 fd9d 	bl	8006ca8 <abort>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	f04f 0a00 	mov.w	sl, #0
 8001178:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800117c:	f10d 0e0c 	add.w	lr, sp, #12
 8001180:	f101 0c04 	add.w	ip, r1, #4
 8001184:	68c7      	ldr	r7, [r0, #12]
 8001186:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800118a:	4606      	mov	r6, r0
 800118c:	4614      	mov	r4, r2
 800118e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001192:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001196:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800119a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800119e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011a6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80011aa:	ad02      	add	r5, sp, #8
 80011ac:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80011b0:	f8c5 a000 	str.w	sl, [r5]
 80011b4:	e021      	b.n	80011fa <unwind_phase2_forced+0x8a>
 80011b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80011b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011bc:	4629      	mov	r1, r5
 80011be:	6173      	str	r3, [r6, #20]
 80011c0:	a87a      	add	r0, sp, #488	; 0x1e8
 80011c2:	f005 fdb3 	bl	8006d2c <memcpy>
 80011c6:	4631      	mov	r1, r6
 80011c8:	4650      	mov	r0, sl
 80011ca:	6933      	ldr	r3, [r6, #16]
 80011cc:	aa7a      	add	r2, sp, #488	; 0x1e8
 80011ce:	4798      	blx	r3
 80011d0:	9c88      	ldr	r4, [sp, #544]	; 0x220
 80011d2:	4682      	mov	sl, r0
 80011d4:	646c      	str	r4, [r5, #68]	; 0x44
 80011d6:	4633      	mov	r3, r6
 80011d8:	4632      	mov	r2, r6
 80011da:	4649      	mov	r1, r9
 80011dc:	2001      	movs	r0, #1
 80011de:	e9cd 5800 	strd	r5, r8, [sp]
 80011e2:	47b8      	blx	r7
 80011e4:	4604      	mov	r4, r0
 80011e6:	b9f0      	cbnz	r0, 8001226 <unwind_phase2_forced+0xb6>
 80011e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011ec:	4628      	mov	r0, r5
 80011ee:	a97a      	add	r1, sp, #488	; 0x1e8
 80011f0:	f005 fd9c 	bl	8006d2c <memcpy>
 80011f4:	f1ba 0f08 	cmp.w	sl, #8
 80011f8:	d11b      	bne.n	8001232 <unwind_phase2_forced+0xc2>
 80011fa:	4630      	mov	r0, r6
 80011fc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80011fe:	f7ff ff11 	bl	8001024 <get_eit_entry>
 8001202:	f104 0909 	add.w	r9, r4, #9
 8001206:	fa5f fa89 	uxtb.w	sl, r9
 800120a:	4604      	mov	r4, r0
 800120c:	2800      	cmp	r0, #0
 800120e:	d0d2      	beq.n	80011b6 <unwind_phase2_forced+0x46>
 8001210:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001212:	4633      	mov	r3, r6
 8001214:	6469      	str	r1, [r5, #68]	; 0x44
 8001216:	4632      	mov	r2, r6
 8001218:	2001      	movs	r0, #1
 800121a:	e9cd 5800 	strd	r5, r8, [sp]
 800121e:	f04a 0110 	orr.w	r1, sl, #16
 8001222:	47b8      	blx	r7
 8001224:	b100      	cbz	r0, 8001228 <unwind_phase2_forced+0xb8>
 8001226:	2409      	movs	r4, #9
 8001228:	4620      	mov	r0, r4
 800122a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	f1ba 0f07 	cmp.w	sl, #7
 8001236:	d1f6      	bne.n	8001226 <unwind_phase2_forced+0xb6>
 8001238:	4620      	mov	r0, r4
 800123a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800123c:	f7ff ff76 	bl	800112c <_Unwind_DebugHook>
 8001240:	a803      	add	r0, sp, #12
 8001242:	f000 fb93 	bl	800196c <__restore_core_regs>
 8001246:	bf00      	nop

08001248 <_Unwind_GetCFA>:
 8001248:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800124a:	4770      	bx	lr

0800124c <__gnu_Unwind_RaiseException>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	f04f 37ff 	mov.w	r7, #4294967295
 8001252:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001254:	b0f9      	sub	sp, #484	; 0x1e4
 8001256:	640b      	str	r3, [r1, #64]	; 0x40
 8001258:	ac01      	add	r4, sp, #4
 800125a:	f101 0c04 	add.w	ip, r1, #4
 800125e:	460e      	mov	r6, r1
 8001260:	4605      	mov	r5, r0
 8001262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800127c:	9700      	str	r7, [sp, #0]
 800127e:	e006      	b.n	800128e <__gnu_Unwind_RaiseException+0x42>
 8001280:	466a      	mov	r2, sp
 8001282:	4629      	mov	r1, r5
 8001284:	692b      	ldr	r3, [r5, #16]
 8001286:	4798      	blx	r3
 8001288:	2808      	cmp	r0, #8
 800128a:	4604      	mov	r4, r0
 800128c:	d108      	bne.n	80012a0 <__gnu_Unwind_RaiseException+0x54>
 800128e:	4628      	mov	r0, r5
 8001290:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001292:	f7ff fec7 	bl	8001024 <get_eit_entry>
 8001296:	2800      	cmp	r0, #0
 8001298:	d0f2      	beq.n	8001280 <__gnu_Unwind_RaiseException+0x34>
 800129a:	2009      	movs	r0, #9
 800129c:	b079      	add	sp, #484	; 0x1e4
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	4668      	mov	r0, sp
 80012a2:	f7ff ff0f 	bl	80010c4 <restore_non_core_regs>
 80012a6:	2c06      	cmp	r4, #6
 80012a8:	d1f7      	bne.n	800129a <__gnu_Unwind_RaiseException+0x4e>
 80012aa:	4631      	mov	r1, r6
 80012ac:	4628      	mov	r0, r5
 80012ae:	f7ff ff3f 	bl	8001130 <unwind_phase2>
 80012b2:	bf00      	nop

080012b4 <__gnu_Unwind_ForcedUnwind>:
 80012b4:	b410      	push	{r4}
 80012b6:	4614      	mov	r4, r2
 80012b8:	6184      	str	r4, [r0, #24]
 80012ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80012bc:	60c1      	str	r1, [r0, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	641c      	str	r4, [r3, #64]	; 0x40
 80012c2:	4619      	mov	r1, r3
 80012c4:	bc10      	pop	{r4}
 80012c6:	e753      	b.n	8001170 <unwind_phase2_forced>

080012c8 <__gnu_Unwind_Resume>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	6943      	ldr	r3, [r0, #20]
 80012cc:	68c6      	ldr	r6, [r0, #12]
 80012ce:	640b      	str	r3, [r1, #64]	; 0x40
 80012d0:	b9ae      	cbnz	r6, 80012fe <__gnu_Unwind_Resume+0x36>
 80012d2:	460a      	mov	r2, r1
 80012d4:	6903      	ldr	r3, [r0, #16]
 80012d6:	4604      	mov	r4, r0
 80012d8:	460d      	mov	r5, r1
 80012da:	4601      	mov	r1, r0
 80012dc:	2002      	movs	r0, #2
 80012de:	4798      	blx	r3
 80012e0:	2807      	cmp	r0, #7
 80012e2:	d005      	beq.n	80012f0 <__gnu_Unwind_Resume+0x28>
 80012e4:	2808      	cmp	r0, #8
 80012e6:	d10f      	bne.n	8001308 <__gnu_Unwind_Resume+0x40>
 80012e8:	4629      	mov	r1, r5
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff ff20 	bl	8001130 <unwind_phase2>
 80012f0:	4630      	mov	r0, r6
 80012f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012f4:	f7ff ff1a 	bl	800112c <_Unwind_DebugHook>
 80012f8:	1d28      	adds	r0, r5, #4
 80012fa:	f000 fb37 	bl	800196c <__restore_core_regs>
 80012fe:	2201      	movs	r2, #1
 8001300:	f7ff ff36 	bl	8001170 <unwind_phase2_forced>
 8001304:	f005 fcd0 	bl	8006ca8 <abort>
 8001308:	f005 fcce 	bl	8006ca8 <abort>

0800130c <__gnu_Unwind_Resume_or_Rethrow>:
 800130c:	68c2      	ldr	r2, [r0, #12]
 800130e:	b12a      	cbz	r2, 800131c <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8001310:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8001314:	2200      	movs	r2, #0
 8001316:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 800131a:	e729      	b.n	8001170 <unwind_phase2_forced>
 800131c:	e796      	b.n	800124c <__gnu_Unwind_RaiseException>
 800131e:	bf00      	nop

08001320 <_Unwind_Complete>:
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop

08001324 <_Unwind_DeleteException>:
 8001324:	6883      	ldr	r3, [r0, #8]
 8001326:	4601      	mov	r1, r0
 8001328:	b10b      	cbz	r3, 800132e <_Unwind_DeleteException+0xa>
 800132a:	2001      	movs	r0, #1
 800132c:	4718      	bx	r3
 800132e:	4770      	bx	lr

08001330 <_Unwind_VRS_Get>:
 8001330:	2901      	cmp	r1, #1
 8001332:	d012      	beq.n	800135a <_Unwind_VRS_Get+0x2a>
 8001334:	d809      	bhi.n	800134a <_Unwind_VRS_Get+0x1a>
 8001336:	b973      	cbnz	r3, 8001356 <_Unwind_VRS_Get+0x26>
 8001338:	2a0f      	cmp	r2, #15
 800133a:	d80c      	bhi.n	8001356 <_Unwind_VRS_Get+0x26>
 800133c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8001340:	6842      	ldr	r2, [r0, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	9b00      	ldr	r3, [sp, #0]
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	4770      	bx	lr
 800134a:	3903      	subs	r1, #3
 800134c:	2901      	cmp	r1, #1
 800134e:	bf94      	ite	ls
 8001350:	2001      	movls	r0, #1
 8001352:	2002      	movhi	r0, #2
 8001354:	4770      	bx	lr
 8001356:	2002      	movs	r0, #2
 8001358:	4770      	bx	lr
 800135a:	4608      	mov	r0, r1
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <_Unwind_GetGR>:
 8001360:	2300      	movs	r3, #0
 8001362:	b500      	push	{lr}
 8001364:	b085      	sub	sp, #20
 8001366:	460a      	mov	r2, r1
 8001368:	a903      	add	r1, sp, #12
 800136a:	9100      	str	r1, [sp, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff ffdf 	bl	8001330 <_Unwind_VRS_Get>
 8001372:	9803      	ldr	r0, [sp, #12]
 8001374:	b005      	add	sp, #20
 8001376:	f85d fb04 	ldr.w	pc, [sp], #4
 800137a:	bf00      	nop

0800137c <_Unwind_VRS_Set>:
 800137c:	2901      	cmp	r1, #1
 800137e:	d012      	beq.n	80013a6 <_Unwind_VRS_Set+0x2a>
 8001380:	d809      	bhi.n	8001396 <_Unwind_VRS_Set+0x1a>
 8001382:	b973      	cbnz	r3, 80013a2 <_Unwind_VRS_Set+0x26>
 8001384:	2a0f      	cmp	r2, #15
 8001386:	d80c      	bhi.n	80013a2 <_Unwind_VRS_Set+0x26>
 8001388:	9900      	ldr	r1, [sp, #0]
 800138a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800138e:	6809      	ldr	r1, [r1, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	6051      	str	r1, [r2, #4]
 8001394:	4770      	bx	lr
 8001396:	3903      	subs	r1, #3
 8001398:	2901      	cmp	r1, #1
 800139a:	bf94      	ite	ls
 800139c:	2001      	movls	r0, #1
 800139e:	2002      	movhi	r0, #2
 80013a0:	4770      	bx	lr
 80013a2:	2002      	movs	r0, #2
 80013a4:	4770      	bx	lr
 80013a6:	4608      	mov	r0, r1
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <_Unwind_SetGR>:
 80013ac:	2300      	movs	r3, #0
 80013ae:	b510      	push	{r4, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	ac03      	add	r4, sp, #12
 80013b4:	9203      	str	r2, [sp, #12]
 80013b6:	9400      	str	r4, [sp, #0]
 80013b8:	460a      	mov	r2, r1
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff ffde 	bl	800137c <_Unwind_VRS_Set>
 80013c0:	b004      	add	sp, #16
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <__gnu_Unwind_Backtrace>:
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	f04f 36ff 	mov.w	r6, #4294967295
 80013ca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013cc:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80013d6:	f102 0c04 	add.w	ip, r2, #4
 80013da:	4605      	mov	r5, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013f6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013fa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013fe:	9616      	str	r6, [sp, #88]	; 0x58
 8001400:	e012      	b.n	8001428 <__gnu_Unwind_Backtrace+0x64>
 8001402:	210c      	movs	r1, #12
 8001404:	a816      	add	r0, sp, #88	; 0x58
 8001406:	466a      	mov	r2, sp
 8001408:	f7ff ffd0 	bl	80013ac <_Unwind_SetGR>
 800140c:	4621      	mov	r1, r4
 800140e:	a816      	add	r0, sp, #88	; 0x58
 8001410:	47a8      	blx	r5
 8001412:	b978      	cbnz	r0, 8001434 <__gnu_Unwind_Backtrace+0x70>
 8001414:	4669      	mov	r1, sp
 8001416:	2008      	movs	r0, #8
 8001418:	9b04      	ldr	r3, [sp, #16]
 800141a:	aa16      	add	r2, sp, #88	; 0x58
 800141c:	4798      	blx	r3
 800141e:	2805      	cmp	r0, #5
 8001420:	4606      	mov	r6, r0
 8001422:	d008      	beq.n	8001436 <__gnu_Unwind_Backtrace+0x72>
 8001424:	2809      	cmp	r0, #9
 8001426:	d005      	beq.n	8001434 <__gnu_Unwind_Backtrace+0x70>
 8001428:	4668      	mov	r0, sp
 800142a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800142c:	f7ff fdfa 	bl	8001024 <get_eit_entry>
 8001430:	2800      	cmp	r0, #0
 8001432:	d0e6      	beq.n	8001402 <__gnu_Unwind_Backtrace+0x3e>
 8001434:	2609      	movs	r6, #9
 8001436:	a816      	add	r0, sp, #88	; 0x58
 8001438:	f7ff fe44 	bl	80010c4 <restore_non_core_regs>
 800143c:	4630      	mov	r0, r6
 800143e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8001442:	bd70      	pop	{r4, r5, r6, pc}

08001444 <__gnu_unwind_pr_common>:
 8001444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001448:	461e      	mov	r6, r3
 800144a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800144c:	b089      	sub	sp, #36	; 0x24
 800144e:	f854 3b04 	ldr.w	r3, [r4], #4
 8001452:	460d      	mov	r5, r1
 8001454:	4617      	mov	r7, r2
 8001456:	f000 0803 	and.w	r8, r0, #3
 800145a:	9406      	str	r4, [sp, #24]
 800145c:	2e00      	cmp	r6, #0
 800145e:	d079      	beq.n	8001554 <__gnu_unwind_pr_common+0x110>
 8001460:	2202      	movs	r2, #2
 8001462:	f88d 201c 	strb.w	r2, [sp, #28]
 8001466:	0c1a      	lsrs	r2, r3, #16
 8001468:	f88d 201d 	strb.w	r2, [sp, #29]
 800146c:	041b      	lsls	r3, r3, #16
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	9305      	str	r3, [sp, #20]
 8001472:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001476:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001478:	f1b8 0f02 	cmp.w	r8, #2
 800147c:	bf08      	it	eq
 800147e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001480:	f013 0301 	ands.w	r3, r3, #1
 8001484:	d00c      	beq.n	80014a0 <__gnu_unwind_pr_common+0x5c>
 8001486:	4638      	mov	r0, r7
 8001488:	a905      	add	r1, sp, #20
 800148a:	f000 fb71 	bl	8001b70 <__gnu_unwind_execute>
 800148e:	b918      	cbnz	r0, 8001498 <__gnu_unwind_pr_common+0x54>
 8001490:	2008      	movs	r0, #8
 8001492:	b009      	add	sp, #36	; 0x24
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001498:	2009      	movs	r0, #9
 800149a:	b009      	add	sp, #36	; 0x24
 800149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014a0:	f8d4 a000 	ldr.w	sl, [r4]
 80014a4:	f1ba 0f00 	cmp.w	sl, #0
 80014a8:	d0ed      	beq.n	8001486 <__gnu_unwind_pr_common+0x42>
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f000 0308 	and.w	r3, r0, #8
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2e02      	cmp	r6, #2
 80014b4:	d04a      	beq.n	800154c <__gnu_unwind_pr_common+0x108>
 80014b6:	f8b4 a000 	ldrh.w	sl, [r4]
 80014ba:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80014be:	3404      	adds	r4, #4
 80014c0:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80014c2:	210f      	movs	r1, #15
 80014c4:	4638      	mov	r0, r7
 80014c6:	f029 0b01 	bic.w	fp, r9, #1
 80014ca:	4493      	add	fp, r2
 80014cc:	f7ff ff48 	bl	8001360 <_Unwind_GetGR>
 80014d0:	4583      	cmp	fp, r0
 80014d2:	d839      	bhi.n	8001548 <__gnu_unwind_pr_common+0x104>
 80014d4:	f02a 0201 	bic.w	r2, sl, #1
 80014d8:	445a      	add	r2, fp
 80014da:	4282      	cmp	r2, r0
 80014dc:	bf94      	ite	ls
 80014de:	2000      	movls	r0, #0
 80014e0:	2001      	movhi	r0, #1
 80014e2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	f00a 0a01 	and.w	sl, sl, #1
 80014ee:	ea43 030a 	orr.w	r3, r3, sl
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d049      	beq.n	800158a <__gnu_unwind_pr_common+0x146>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d032      	beq.n	8001560 <__gnu_unwind_pr_common+0x11c>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1cc      	bne.n	8001498 <__gnu_unwind_pr_common+0x54>
 80014fe:	f1b8 0f00 	cmp.w	r8, #0
 8001502:	d002      	beq.n	800150a <__gnu_unwind_pr_common+0xc6>
 8001504:	2800      	cmp	r0, #0
 8001506:	f040 80ce 	bne.w	80016a6 <__gnu_unwind_pr_common+0x262>
 800150a:	3404      	adds	r4, #4
 800150c:	f8d4 a000 	ldr.w	sl, [r4]
 8001510:	f1ba 0f00 	cmp.w	sl, #0
 8001514:	d1cd      	bne.n	80014b2 <__gnu_unwind_pr_common+0x6e>
 8001516:	4638      	mov	r0, r7
 8001518:	a905      	add	r1, sp, #20
 800151a:	f000 fb29 	bl	8001b70 <__gnu_unwind_execute>
 800151e:	2800      	cmp	r0, #0
 8001520:	d1ba      	bne.n	8001498 <__gnu_unwind_pr_common+0x54>
 8001522:	9b01      	ldr	r3, [sp, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0b3      	beq.n	8001490 <__gnu_unwind_pr_common+0x4c>
 8001528:	210f      	movs	r1, #15
 800152a:	4638      	mov	r0, r7
 800152c:	f7ff ff18 	bl	8001360 <_Unwind_GetGR>
 8001530:	210e      	movs	r1, #14
 8001532:	4602      	mov	r2, r0
 8001534:	4638      	mov	r0, r7
 8001536:	f7ff ff39 	bl	80013ac <_Unwind_SetGR>
 800153a:	4638      	mov	r0, r7
 800153c:	210f      	movs	r1, #15
 800153e:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <__gnu_unwind_pr_common+0x2a4>)
 8001540:	f7ff ff34 	bl	80013ac <_Unwind_SetGR>
 8001544:	2007      	movs	r0, #7
 8001546:	e7a8      	b.n	800149a <__gnu_unwind_pr_common+0x56>
 8001548:	2000      	movs	r0, #0
 800154a:	e7ca      	b.n	80014e2 <__gnu_unwind_pr_common+0x9e>
 800154c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001550:	3408      	adds	r4, #8
 8001552:	e7b5      	b.n	80014c0 <__gnu_unwind_pr_common+0x7c>
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	9305      	str	r3, [sp, #20]
 8001558:	2303      	movs	r3, #3
 800155a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800155e:	e78a      	b.n	8001476 <__gnu_unwind_pr_common+0x32>
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001566:	f1b8 0f00 	cmp.w	r8, #0
 800156a:	d145      	bne.n	80015f8 <__gnu_unwind_pr_common+0x1b4>
 800156c:	b128      	cbz	r0, 800157a <__gnu_unwind_pr_common+0x136>
 800156e:	9a02      	ldr	r2, [sp, #8]
 8001570:	2a00      	cmp	r2, #0
 8001572:	d05c      	beq.n	800162e <__gnu_unwind_pr_common+0x1ea>
 8001574:	f1bb 0f00 	cmp.w	fp, #0
 8001578:	d074      	beq.n	8001664 <__gnu_unwind_pr_common+0x220>
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <__gnu_unwind_pr_common+0x13c>
 800157e:	3404      	adds	r4, #4
 8001580:	f10b 0b01 	add.w	fp, fp, #1
 8001584:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8001588:	e7c0      	b.n	800150c <__gnu_unwind_pr_common+0xc8>
 800158a:	f1b8 0f00 	cmp.w	r8, #0
 800158e:	d119      	bne.n	80015c4 <__gnu_unwind_pr_common+0x180>
 8001590:	b1b0      	cbz	r0, 80015c0 <__gnu_unwind_pr_common+0x17c>
 8001592:	6863      	ldr	r3, [r4, #4]
 8001594:	6822      	ldr	r2, [r4, #0]
 8001596:	1c99      	adds	r1, r3, #2
 8001598:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800159c:	f43f af7c 	beq.w	8001498 <__gnu_unwind_pr_common+0x54>
 80015a0:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80015a4:	3301      	adds	r3, #1
 80015a6:	9104      	str	r1, [sp, #16]
 80015a8:	f000 8091 	beq.w	80016ce <__gnu_unwind_pr_common+0x28a>
 80015ac:	1d20      	adds	r0, r4, #4
 80015ae:	f7ff fdb7 	bl	8001120 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015b2:	ab04      	add	r3, sp, #16
 80015b4:	4601      	mov	r1, r0
 80015b6:	4628      	mov	r0, r5
 80015b8:	f004 fcc2 	bl	8005f40 <__cxa_type_match>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d15c      	bne.n	800167a <__gnu_unwind_pr_common+0x236>
 80015c0:	3408      	adds	r4, #8
 80015c2:	e7a3      	b.n	800150c <__gnu_unwind_pr_common+0xc8>
 80015c4:	210d      	movs	r1, #13
 80015c6:	4638      	mov	r0, r7
 80015c8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80015cc:	f7ff fec8 	bl	8001360 <_Unwind_GetGR>
 80015d0:	4581      	cmp	r9, r0
 80015d2:	d1f5      	bne.n	80015c0 <__gnu_unwind_pr_common+0x17c>
 80015d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015d6:	429c      	cmp	r4, r3
 80015d8:	d1f2      	bne.n	80015c0 <__gnu_unwind_pr_common+0x17c>
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff fcd4 	bl	8000f88 <selfrel_offset31>
 80015e0:	210f      	movs	r1, #15
 80015e2:	4602      	mov	r2, r0
 80015e4:	4638      	mov	r0, r7
 80015e6:	f7ff fee1 	bl	80013ac <_Unwind_SetGR>
 80015ea:	4638      	mov	r0, r7
 80015ec:	462a      	mov	r2, r5
 80015ee:	2100      	movs	r1, #0
 80015f0:	f7ff fedc 	bl	80013ac <_Unwind_SetGR>
 80015f4:	2007      	movs	r0, #7
 80015f6:	e750      	b.n	800149a <__gnu_unwind_pr_common+0x56>
 80015f8:	210d      	movs	r1, #13
 80015fa:	4638      	mov	r0, r7
 80015fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001600:	f7ff feae 	bl	8001360 <_Unwind_GetGR>
 8001604:	4581      	cmp	r9, r0
 8001606:	d001      	beq.n	800160c <__gnu_unwind_pr_common+0x1c8>
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	e7b6      	b.n	800157a <__gnu_unwind_pr_common+0x136>
 800160c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800160e:	429c      	cmp	r4, r3
 8001610:	d1fa      	bne.n	8001608 <__gnu_unwind_pr_common+0x1c4>
 8001612:	2304      	movs	r3, #4
 8001614:	2200      	movs	r2, #0
 8001616:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800161a:	18e3      	adds	r3, r4, r3
 800161c:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001620:	636b      	str	r3, [r5, #52]	; 0x34
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db5a      	blt.n	80016de <__gnu_unwind_pr_common+0x29a>
 8001628:	2301      	movs	r3, #1
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	e7a8      	b.n	8001580 <__gnu_unwind_pr_common+0x13c>
 800162e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001632:	f8cd 800c 	str.w	r8, [sp, #12]
 8001636:	4691      	mov	r9, r2
 8001638:	46b0      	mov	r8, r6
 800163a:	f104 0a04 	add.w	sl, r4, #4
 800163e:	461e      	mov	r6, r3
 8001640:	e00e      	b.n	8001660 <__gnu_unwind_pr_common+0x21c>
 8001642:	4650      	mov	r0, sl
 8001644:	9604      	str	r6, [sp, #16]
 8001646:	f7ff fd6b 	bl	8001120 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800164a:	2200      	movs	r2, #0
 800164c:	4601      	mov	r1, r0
 800164e:	ab04      	add	r3, sp, #16
 8001650:	4628      	mov	r0, r5
 8001652:	f109 0901 	add.w	r9, r9, #1
 8001656:	f10a 0a04 	add.w	sl, sl, #4
 800165a:	f004 fc71 	bl	8005f40 <__cxa_type_match>
 800165e:	b9e8      	cbnz	r0, 800169c <__gnu_unwind_pr_common+0x258>
 8001660:	45d9      	cmp	r9, fp
 8001662:	d1ee      	bne.n	8001642 <__gnu_unwind_pr_common+0x1fe>
 8001664:	210d      	movs	r1, #13
 8001666:	4638      	mov	r0, r7
 8001668:	f7ff fe7a 	bl	8001360 <_Unwind_GetGR>
 800166c:	4603      	mov	r3, r0
 800166e:	9a04      	ldr	r2, [sp, #16]
 8001670:	2006      	movs	r0, #6
 8001672:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 8001676:	622b      	str	r3, [r5, #32]
 8001678:	e70f      	b.n	800149a <__gnu_unwind_pr_common+0x56>
 800167a:	4681      	mov	r9, r0
 800167c:	210d      	movs	r1, #13
 800167e:	4638      	mov	r0, r7
 8001680:	f7ff fe6e 	bl	8001360 <_Unwind_GetGR>
 8001684:	f1b9 0f02 	cmp.w	r9, #2
 8001688:	6228      	str	r0, [r5, #32]
 800168a:	d125      	bne.n	80016d8 <__gnu_unwind_pr_common+0x294>
 800168c:	462b      	mov	r3, r5
 800168e:	9a04      	ldr	r2, [sp, #16]
 8001690:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001694:	626b      	str	r3, [r5, #36]	; 0x24
 8001696:	2006      	movs	r0, #6
 8001698:	62ac      	str	r4, [r5, #40]	; 0x28
 800169a:	e6fe      	b.n	800149a <__gnu_unwind_pr_common+0x56>
 800169c:	4646      	mov	r6, r8
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80016a4:	e769      	b.n	800157a <__gnu_unwind_pr_common+0x136>
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fc6e 	bl	8000f88 <selfrel_offset31>
 80016ac:	4602      	mov	r2, r0
 80016ae:	3404      	adds	r4, #4
 80016b0:	63ac      	str	r4, [r5, #56]	; 0x38
 80016b2:	4628      	mov	r0, r5
 80016b4:	4614      	mov	r4, r2
 80016b6:	f004 fca1 	bl	8005ffc <__cxa_begin_cleanup>
 80016ba:	2800      	cmp	r0, #0
 80016bc:	f43f aeec 	beq.w	8001498 <__gnu_unwind_pr_common+0x54>
 80016c0:	4638      	mov	r0, r7
 80016c2:	4622      	mov	r2, r4
 80016c4:	210f      	movs	r1, #15
 80016c6:	f7ff fe71 	bl	80013ac <_Unwind_SetGR>
 80016ca:	2007      	movs	r0, #7
 80016cc:	e6e5      	b.n	800149a <__gnu_unwind_pr_common+0x56>
 80016ce:	210d      	movs	r1, #13
 80016d0:	4638      	mov	r0, r7
 80016d2:	f7ff fe45 	bl	8001360 <_Unwind_GetGR>
 80016d6:	6228      	str	r0, [r5, #32]
 80016d8:	9b04      	ldr	r3, [sp, #16]
 80016da:	626b      	str	r3, [r5, #36]	; 0x24
 80016dc:	e7db      	b.n	8001696 <__gnu_unwind_pr_common+0x252>
 80016de:	f10b 0001 	add.w	r0, fp, #1
 80016e2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016e6:	e779      	b.n	80015dc <__gnu_unwind_pr_common+0x198>
 80016e8:	08006be3 	.word	0x08006be3

080016ec <__aeabi_unwind_cpp_pr0>:
 80016ec:	2300      	movs	r3, #0
 80016ee:	e6a9      	b.n	8001444 <__gnu_unwind_pr_common>

080016f0 <__aeabi_unwind_cpp_pr1>:
 80016f0:	2301      	movs	r3, #1
 80016f2:	e6a7      	b.n	8001444 <__gnu_unwind_pr_common>

080016f4 <__aeabi_unwind_cpp_pr2>:
 80016f4:	2302      	movs	r3, #2
 80016f6:	e6a5      	b.n	8001444 <__gnu_unwind_pr_common>

080016f8 <_Unwind_VRS_Pop>:
 80016f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016fc:	4606      	mov	r6, r0
 80016fe:	4615      	mov	r5, r2
 8001700:	461c      	mov	r4, r3
 8001702:	b0c3      	sub	sp, #268	; 0x10c
 8001704:	2904      	cmp	r1, #4
 8001706:	f200 80b8 	bhi.w	800187a <_Unwind_VRS_Pop+0x182>
 800170a:	e8df f001 	tbb	[pc, r1]
 800170e:	569c      	.short	0x569c
 8001710:	2db6      	.short	0x2db6
 8001712:	03          	.byte	0x03
 8001713:	00          	.byte	0x00
 8001714:	2c00      	cmp	r4, #0
 8001716:	f040 80b0 	bne.w	800187a <_Unwind_VRS_Pop+0x182>
 800171a:	2a10      	cmp	r2, #16
 800171c:	f200 80ad 	bhi.w	800187a <_Unwind_VRS_Pop+0x182>
 8001720:	6803      	ldr	r3, [r0, #0]
 8001722:	06d8      	lsls	r0, r3, #27
 8001724:	f100 80f1 	bmi.w	800190a <_Unwind_VRS_Pop+0x212>
 8001728:	af20      	add	r7, sp, #128	; 0x80
 800172a:	4638      	mov	r0, r7
 800172c:	f000 f990 	bl	8001a50 <__gnu_Unwind_Save_WMMXC>
 8001730:	2401      	movs	r4, #1
 8001732:	4638      	mov	r0, r7
 8001734:	2300      	movs	r3, #0
 8001736:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001738:	fa04 f203 	lsl.w	r2, r4, r3
 800173c:	422a      	tst	r2, r5
 800173e:	f103 0301 	add.w	r3, r3, #1
 8001742:	d005      	beq.n	8001750 <_Unwind_VRS_Pop+0x58>
 8001744:	460a      	mov	r2, r1
 8001746:	f852 cb04 	ldr.w	ip, [r2], #4
 800174a:	4611      	mov	r1, r2
 800174c:	f8c0 c000 	str.w	ip, [r0]
 8001750:	2b04      	cmp	r3, #4
 8001752:	f100 0004 	add.w	r0, r0, #4
 8001756:	d1ef      	bne.n	8001738 <_Unwind_VRS_Pop+0x40>
 8001758:	4638      	mov	r0, r7
 800175a:	63b1      	str	r1, [r6, #56]	; 0x38
 800175c:	f000 f96e 	bl	8001a3c <__gnu_Unwind_Restore_WMMXC>
 8001760:	2000      	movs	r0, #0
 8001762:	b043      	add	sp, #268	; 0x10c
 8001764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001768:	2c03      	cmp	r4, #3
 800176a:	f040 8086 	bne.w	800187a <_Unwind_VRS_Pop+0x182>
 800176e:	b294      	uxth	r4, r2
 8001770:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001774:	2b10      	cmp	r3, #16
 8001776:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800177a:	d87e      	bhi.n	800187a <_Unwind_VRS_Pop+0x182>
 800177c:	6803      	ldr	r3, [r0, #0]
 800177e:	071f      	lsls	r7, r3, #28
 8001780:	f100 80cb 	bmi.w	800191a <_Unwind_VRS_Pop+0x222>
 8001784:	af20      	add	r7, sp, #128	; 0x80
 8001786:	4638      	mov	r0, r7
 8001788:	f000 f936 	bl	80019f8 <__gnu_Unwind_Save_WMMXD>
 800178c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800178e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001792:	b154      	cbz	r4, 80017aa <_Unwind_VRS_Pop+0xb2>
 8001794:	460b      	mov	r3, r1
 8001796:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800179a:	1ad0      	subs	r0, r2, r3
 800179c:	00e4      	lsls	r4, r4, #3
 800179e:	581d      	ldr	r5, [r3, r0]
 80017a0:	f843 5b04 	str.w	r5, [r3], #4
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d1fa      	bne.n	800179e <_Unwind_VRS_Pop+0xa6>
 80017a8:	4422      	add	r2, r4
 80017aa:	4638      	mov	r0, r7
 80017ac:	63b2      	str	r2, [r6, #56]	; 0x38
 80017ae:	f000 f901 	bl	80019b4 <__gnu_Unwind_Restore_WMMXD>
 80017b2:	2000      	movs	r0, #0
 80017b4:	b043      	add	sp, #268	; 0x10c
 80017b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017ba:	2c01      	cmp	r4, #1
 80017bc:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017c0:	b295      	uxth	r5, r2
 80017c2:	d056      	beq.n	8001872 <_Unwind_VRS_Pop+0x17a>
 80017c4:	2c05      	cmp	r4, #5
 80017c6:	d158      	bne.n	800187a <_Unwind_VRS_Pop+0x182>
 80017c8:	eb08 0905 	add.w	r9, r8, r5
 80017cc:	f1b9 0f20 	cmp.w	r9, #32
 80017d0:	d853      	bhi.n	800187a <_Unwind_VRS_Pop+0x182>
 80017d2:	f1b8 0f0f 	cmp.w	r8, #15
 80017d6:	d973      	bls.n	80018c0 <_Unwind_VRS_Pop+0x1c8>
 80017d8:	46a9      	mov	r9, r5
 80017da:	2d00      	cmp	r5, #0
 80017dc:	f040 8084 	bne.w	80018e8 <_Unwind_VRS_Pop+0x1f0>
 80017e0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80017e2:	b365      	cbz	r5, 800183e <_Unwind_VRS_Pop+0x146>
 80017e4:	af20      	add	r7, sp, #128	; 0x80
 80017e6:	f04f 0900 	mov.w	r9, #0
 80017ea:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80017ee:	3f04      	subs	r7, #4
 80017f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80017f4:	f853 1b04 	ldr.w	r1, [r3], #4
 80017f8:	42ab      	cmp	r3, r5
 80017fa:	f847 1f04 	str.w	r1, [r7, #4]!
 80017fe:	d1f9      	bne.n	80017f4 <_Unwind_VRS_Pop+0xfc>
 8001800:	f1b9 0f00 	cmp.w	r9, #0
 8001804:	d00f      	beq.n	8001826 <_Unwind_VRS_Pop+0x12e>
 8001806:	466f      	mov	r7, sp
 8001808:	4641      	mov	r1, r8
 800180a:	2910      	cmp	r1, #16
 800180c:	bf38      	it	cc
 800180e:	2110      	movcc	r1, #16
 8001810:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001814:	3984      	subs	r1, #132	; 0x84
 8001816:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 800181a:	f853 0b04 	ldr.w	r0, [r3], #4
 800181e:	42ab      	cmp	r3, r5
 8001820:	f841 0f04 	str.w	r0, [r1, #4]!
 8001824:	d1f9      	bne.n	800181a <_Unwind_VRS_Pop+0x122>
 8001826:	2c01      	cmp	r4, #1
 8001828:	d07f      	beq.n	800192a <_Unwind_VRS_Pop+0x232>
 800182a:	f1b8 0f0f 	cmp.w	r8, #15
 800182e:	63b5      	str	r5, [r6, #56]	; 0x38
 8001830:	d942      	bls.n	80018b8 <_Unwind_VRS_Pop+0x1c0>
 8001832:	f1b9 0f00 	cmp.w	r9, #0
 8001836:	d002      	beq.n	800183e <_Unwind_VRS_Pop+0x146>
 8001838:	4668      	mov	r0, sp
 800183a:	f000 f8b3 	bl	80019a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800183e:	2000      	movs	r0, #0
 8001840:	b043      	add	sp, #268	; 0x10c
 8001842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001846:	b9c4      	cbnz	r4, 800187a <_Unwind_VRS_Pop+0x182>
 8001848:	4623      	mov	r3, r4
 800184a:	2401      	movs	r4, #1
 800184c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800184e:	1d37      	adds	r7, r6, #4
 8001850:	b2a8      	uxth	r0, r5
 8001852:	fa04 f103 	lsl.w	r1, r4, r3
 8001856:	4201      	tst	r1, r0
 8001858:	bf1c      	itt	ne
 800185a:	f852 1b04 	ldrne.w	r1, [r2], #4
 800185e:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8001862:	3301      	adds	r3, #1
 8001864:	2b10      	cmp	r3, #16
 8001866:	d1f4      	bne.n	8001852 <_Unwind_VRS_Pop+0x15a>
 8001868:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 800186c:	d1e7      	bne.n	800183e <_Unwind_VRS_Pop+0x146>
 800186e:	63b2      	str	r2, [r6, #56]	; 0x38
 8001870:	e004      	b.n	800187c <_Unwind_VRS_Pop+0x184>
 8001872:	eb08 0305 	add.w	r3, r8, r5
 8001876:	2b10      	cmp	r3, #16
 8001878:	d903      	bls.n	8001882 <_Unwind_VRS_Pop+0x18a>
 800187a:	2002      	movs	r0, #2
 800187c:	b043      	add	sp, #268	; 0x10c
 800187e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001882:	f1b8 0f0f 	cmp.w	r8, #15
 8001886:	d8f8      	bhi.n	800187a <_Unwind_VRS_Pop+0x182>
 8001888:	6833      	ldr	r3, [r6, #0]
 800188a:	07da      	lsls	r2, r3, #31
 800188c:	d506      	bpl.n	800189c <_Unwind_VRS_Pop+0x1a4>
 800188e:	4630      	mov	r0, r6
 8001890:	f023 0303 	bic.w	r3, r3, #3
 8001894:	f840 3b48 	str.w	r3, [r0], #72
 8001898:	f000 f878 	bl	800198c <__gnu_Unwind_Save_VFP>
 800189c:	af20      	add	r7, sp, #128	; 0x80
 800189e:	4638      	mov	r0, r7
 80018a0:	f000 f874 	bl	800198c <__gnu_Unwind_Save_VFP>
 80018a4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80018a6:	2d00      	cmp	r5, #0
 80018a8:	d19d      	bne.n	80017e6 <_Unwind_VRS_Pop+0xee>
 80018aa:	461d      	mov	r5, r3
 80018ac:	3504      	adds	r5, #4
 80018ae:	4638      	mov	r0, r7
 80018b0:	63b5      	str	r5, [r6, #56]	; 0x38
 80018b2:	f000 f867 	bl	8001984 <__gnu_Unwind_Restore_VFP>
 80018b6:	e7c2      	b.n	800183e <_Unwind_VRS_Pop+0x146>
 80018b8:	a820      	add	r0, sp, #128	; 0x80
 80018ba:	f000 f86b 	bl	8001994 <__gnu_Unwind_Restore_VFP_D>
 80018be:	e7b8      	b.n	8001832 <_Unwind_VRS_Pop+0x13a>
 80018c0:	f1b9 0f10 	cmp.w	r9, #16
 80018c4:	d93f      	bls.n	8001946 <_Unwind_VRS_Pop+0x24e>
 80018c6:	f1a9 0910 	sub.w	r9, r9, #16
 80018ca:	6833      	ldr	r3, [r6, #0]
 80018cc:	07d9      	lsls	r1, r3, #31
 80018ce:	d508      	bpl.n	80018e2 <_Unwind_VRS_Pop+0x1ea>
 80018d0:	4630      	mov	r0, r6
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	f840 3b48 	str.w	r3, [r0], #72
 80018de:	f000 f85d 	bl	800199c <__gnu_Unwind_Save_VFP_D>
 80018e2:	f1b9 0f00 	cmp.w	r9, #0
 80018e6:	d031      	beq.n	800194c <_Unwind_VRS_Pop+0x254>
 80018e8:	6833      	ldr	r3, [r6, #0]
 80018ea:	075a      	lsls	r2, r3, #29
 80018ec:	d41f      	bmi.n	800192e <_Unwind_VRS_Pop+0x236>
 80018ee:	f1b8 0f0f 	cmp.w	r8, #15
 80018f2:	d924      	bls.n	800193e <_Unwind_VRS_Pop+0x246>
 80018f4:	466f      	mov	r7, sp
 80018f6:	f1c8 0510 	rsb	r5, r8, #16
 80018fa:	4638      	mov	r0, r7
 80018fc:	f000 f856 	bl	80019ac <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001900:	2d00      	cmp	r5, #0
 8001902:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001904:	dd80      	ble.n	8001808 <_Unwind_VRS_Pop+0x110>
 8001906:	af20      	add	r7, sp, #128	; 0x80
 8001908:	e76f      	b.n	80017ea <_Unwind_VRS_Pop+0xf2>
 800190a:	f023 0310 	bic.w	r3, r3, #16
 800190e:	6033      	str	r3, [r6, #0]
 8001910:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001914:	f000 f89c 	bl	8001a50 <__gnu_Unwind_Save_WMMXC>
 8001918:	e706      	b.n	8001728 <_Unwind_VRS_Pop+0x30>
 800191a:	f023 0308 	bic.w	r3, r3, #8
 800191e:	6003      	str	r3, [r0, #0]
 8001920:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001924:	f000 f868 	bl	80019f8 <__gnu_Unwind_Save_WMMXD>
 8001928:	e72c      	b.n	8001784 <_Unwind_VRS_Pop+0x8c>
 800192a:	af20      	add	r7, sp, #128	; 0x80
 800192c:	e7be      	b.n	80018ac <_Unwind_VRS_Pop+0x1b4>
 800192e:	4630      	mov	r0, r6
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	f840 3bd0 	str.w	r3, [r0], #208
 8001938:	f000 f838 	bl	80019ac <__gnu_Unwind_Save_VFP_D_16_to_31>
 800193c:	e7d7      	b.n	80018ee <_Unwind_VRS_Pop+0x1f6>
 800193e:	a820      	add	r0, sp, #128	; 0x80
 8001940:	f000 f82c 	bl	800199c <__gnu_Unwind_Save_VFP_D>
 8001944:	e7d6      	b.n	80018f4 <_Unwind_VRS_Pop+0x1fc>
 8001946:	f04f 0900 	mov.w	r9, #0
 800194a:	e7be      	b.n	80018ca <_Unwind_VRS_Pop+0x1d2>
 800194c:	f1b8 0f0f 	cmp.w	r8, #15
 8001950:	f63f af46 	bhi.w	80017e0 <_Unwind_VRS_Pop+0xe8>
 8001954:	af20      	add	r7, sp, #128	; 0x80
 8001956:	4638      	mov	r0, r7
 8001958:	f000 f820 	bl	800199c <__gnu_Unwind_Save_VFP_D>
 800195c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800195e:	2d00      	cmp	r5, #0
 8001960:	f47f af41 	bne.w	80017e6 <_Unwind_VRS_Pop+0xee>
 8001964:	4638      	mov	r0, r7
 8001966:	f000 f815 	bl	8001994 <__gnu_Unwind_Restore_VFP_D>
 800196a:	e768      	b.n	800183e <_Unwind_VRS_Pop+0x146>

0800196c <__restore_core_regs>:
 800196c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001970:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001974:	469c      	mov	ip, r3
 8001976:	46a6      	mov	lr, r4
 8001978:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800197c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001980:	46e5      	mov	sp, ip
 8001982:	bd00      	pop	{pc}

08001984 <__gnu_Unwind_Restore_VFP>:
 8001984:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop

0800198c <__gnu_Unwind_Save_VFP>:
 800198c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <__gnu_Unwind_Restore_VFP_D>:
 8001994:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <__gnu_Unwind_Save_VFP_D>:
 800199c:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop

080019a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019a4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019ac:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <__gnu_Unwind_Restore_WMMXD>:
 80019b4:	ecf0 0102 	ldfe	f0, [r0], #8
 80019b8:	ecf0 1102 	ldfe	f1, [r0], #8
 80019bc:	ecf0 2102 	ldfe	f2, [r0], #8
 80019c0:	ecf0 3102 	ldfe	f3, [r0], #8
 80019c4:	ecf0 4102 	ldfe	f4, [r0], #8
 80019c8:	ecf0 5102 	ldfe	f5, [r0], #8
 80019cc:	ecf0 6102 	ldfe	f6, [r0], #8
 80019d0:	ecf0 7102 	ldfe	f7, [r0], #8
 80019d4:	ecf0 8102 	ldfp	f0, [r0], #8
 80019d8:	ecf0 9102 	ldfp	f1, [r0], #8
 80019dc:	ecf0 a102 	ldfp	f2, [r0], #8
 80019e0:	ecf0 b102 	ldfp	f3, [r0], #8
 80019e4:	ecf0 c102 	ldfp	f4, [r0], #8
 80019e8:	ecf0 d102 	ldfp	f5, [r0], #8
 80019ec:	ecf0 e102 	ldfp	f6, [r0], #8
 80019f0:	ecf0 f102 	ldfp	f7, [r0], #8
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <__gnu_Unwind_Save_WMMXD>:
 80019f8:	ece0 0102 	stfe	f0, [r0], #8
 80019fc:	ece0 1102 	stfe	f1, [r0], #8
 8001a00:	ece0 2102 	stfe	f2, [r0], #8
 8001a04:	ece0 3102 	stfe	f3, [r0], #8
 8001a08:	ece0 4102 	stfe	f4, [r0], #8
 8001a0c:	ece0 5102 	stfe	f5, [r0], #8
 8001a10:	ece0 6102 	stfe	f6, [r0], #8
 8001a14:	ece0 7102 	stfe	f7, [r0], #8
 8001a18:	ece0 8102 	stfp	f0, [r0], #8
 8001a1c:	ece0 9102 	stfp	f1, [r0], #8
 8001a20:	ece0 a102 	stfp	f2, [r0], #8
 8001a24:	ece0 b102 	stfp	f3, [r0], #8
 8001a28:	ece0 c102 	stfp	f4, [r0], #8
 8001a2c:	ece0 d102 	stfp	f5, [r0], #8
 8001a30:	ece0 e102 	stfp	f6, [r0], #8
 8001a34:	ece0 f102 	stfp	f7, [r0], #8
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <__gnu_Unwind_Restore_WMMXC>:
 8001a3c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a40:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a44:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a48:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <__gnu_Unwind_Save_WMMXC>:
 8001a50:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a54:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a58:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a5c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <_Unwind_RaiseException>:
 8001a64:	46ec      	mov	ip, sp
 8001a66:	b500      	push	{lr}
 8001a68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a78:	a901      	add	r1, sp, #4
 8001a7a:	f7ff fbe7 	bl	800124c <__gnu_Unwind_RaiseException>
 8001a7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a82:	b012      	add	sp, #72	; 0x48
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop

08001a88 <_Unwind_Resume>:
 8001a88:	46ec      	mov	ip, sp
 8001a8a:	b500      	push	{lr}
 8001a8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a9c:	a901      	add	r1, sp, #4
 8001a9e:	f7ff fc13 	bl	80012c8 <__gnu_Unwind_Resume>
 8001aa2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001aa6:	b012      	add	sp, #72	; 0x48
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <_Unwind_Resume_or_Rethrow>:
 8001aac:	46ec      	mov	ip, sp
 8001aae:	b500      	push	{lr}
 8001ab0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ab4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ac0:	a901      	add	r1, sp, #4
 8001ac2:	f7ff fc23 	bl	800130c <__gnu_Unwind_Resume_or_Rethrow>
 8001ac6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001aca:	b012      	add	sp, #72	; 0x48
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <_Unwind_ForcedUnwind>:
 8001ad0:	46ec      	mov	ip, sp
 8001ad2:	b500      	push	{lr}
 8001ad4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ae4:	ab01      	add	r3, sp, #4
 8001ae6:	f7ff fbe5 	bl	80012b4 <__gnu_Unwind_ForcedUnwind>
 8001aea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001aee:	b012      	add	sp, #72	; 0x48
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <_Unwind_Backtrace>:
 8001af4:	46ec      	mov	ip, sp
 8001af6:	b500      	push	{lr}
 8001af8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001afc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b08:	aa01      	add	r2, sp, #4
 8001b0a:	f7ff fc5b 	bl	80013c4 <__gnu_Unwind_Backtrace>
 8001b0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b12:	b012      	add	sp, #72	; 0x48
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop

08001b18 <next_unwind_byte>:
 8001b18:	7a02      	ldrb	r2, [r0, #8]
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b97a      	cbnz	r2, 8001b3e <next_unwind_byte+0x26>
 8001b1e:	7a42      	ldrb	r2, [r0, #9]
 8001b20:	b1a2      	cbz	r2, 8001b4c <next_unwind_byte+0x34>
 8001b22:	f04f 0c03 	mov.w	ip, #3
 8001b26:	6841      	ldr	r1, [r0, #4]
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	7242      	strb	r2, [r0, #9]
 8001b2c:	6808      	ldr	r0, [r1, #0]
 8001b2e:	1d0a      	adds	r2, r1, #4
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	0202      	lsls	r2, r0, #8
 8001b34:	f883 c008 	strb.w	ip, [r3, #8]
 8001b38:	0e00      	lsrs	r0, r0, #24
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	4770      	bx	lr
 8001b3e:	6800      	ldr	r0, [r0, #0]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	721a      	strb	r2, [r3, #8]
 8001b44:	0202      	lsls	r2, r0, #8
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	0e00      	lsrs	r0, r0, #24
 8001b4a:	4770      	bx	lr
 8001b4c:	20b0      	movs	r0, #176	; 0xb0
 8001b4e:	4770      	bx	lr

08001b50 <_Unwind_GetGR.constprop.0>:
 8001b50:	2300      	movs	r3, #0
 8001b52:	b500      	push	{lr}
 8001b54:	b085      	sub	sp, #20
 8001b56:	a903      	add	r1, sp, #12
 8001b58:	9100      	str	r1, [sp, #0]
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff fbe7 	bl	8001330 <_Unwind_VRS_Get>
 8001b62:	9803      	ldr	r0, [sp, #12]
 8001b64:	b005      	add	sp, #20
 8001b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b6a:	bf00      	nop

08001b6c <unwind_UCB_from_context>:
 8001b6c:	e7f0      	b.n	8001b50 <_Unwind_GetGR.constprop.0>
 8001b6e:	bf00      	nop

08001b70 <__gnu_unwind_execute>:
 8001b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b74:	f04f 0800 	mov.w	r8, #0
 8001b78:	4605      	mov	r5, r0
 8001b7a:	460e      	mov	r6, r1
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f7ff ffca 	bl	8001b18 <next_unwind_byte>
 8001b84:	28b0      	cmp	r0, #176	; 0xb0
 8001b86:	4604      	mov	r4, r0
 8001b88:	f000 80ba 	beq.w	8001d00 <__gnu_unwind_execute+0x190>
 8001b8c:	0607      	lsls	r7, r0, #24
 8001b8e:	d520      	bpl.n	8001bd2 <__gnu_unwind_execute+0x62>
 8001b90:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001b94:	2b80      	cmp	r3, #128	; 0x80
 8001b96:	d04d      	beq.n	8001c34 <__gnu_unwind_execute+0xc4>
 8001b98:	2b90      	cmp	r3, #144	; 0x90
 8001b9a:	d036      	beq.n	8001c0a <__gnu_unwind_execute+0x9a>
 8001b9c:	2ba0      	cmp	r3, #160	; 0xa0
 8001b9e:	d060      	beq.n	8001c62 <__gnu_unwind_execute+0xf2>
 8001ba0:	2bb0      	cmp	r3, #176	; 0xb0
 8001ba2:	d073      	beq.n	8001c8c <__gnu_unwind_execute+0x11c>
 8001ba4:	2bc0      	cmp	r3, #192	; 0xc0
 8001ba6:	f000 808a 	beq.w	8001cbe <__gnu_unwind_execute+0x14e>
 8001baa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001bae:	2bd0      	cmp	r3, #208	; 0xd0
 8001bb0:	d10b      	bne.n	8001bca <__gnu_unwind_execute+0x5a>
 8001bb2:	f000 0207 	and.w	r2, r0, #7
 8001bb6:	3201      	adds	r2, #1
 8001bb8:	2305      	movs	r3, #5
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001bc2:	f7ff fd99 	bl	80016f8 <_Unwind_VRS_Pop>
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d0d9      	beq.n	8001b7e <__gnu_unwind_execute+0xe>
 8001bca:	2009      	movs	r0, #9
 8001bcc:	b005      	add	sp, #20
 8001bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bd2:	0083      	lsls	r3, r0, #2
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	1d1f      	adds	r7, r3, #4
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f10d 090c 	add.w	r9, sp, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	220d      	movs	r2, #13
 8001be2:	4628      	mov	r0, r5
 8001be4:	f8cd 9000 	str.w	r9, [sp]
 8001be8:	f7ff fba2 	bl	8001330 <_Unwind_VRS_Get>
 8001bec:	9b03      	ldr	r3, [sp, #12]
 8001bee:	0660      	lsls	r0, r4, #25
 8001bf0:	bf4c      	ite	mi
 8001bf2:	1bdf      	submi	r7, r3, r7
 8001bf4:	18ff      	addpl	r7, r7, r3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	220d      	movs	r2, #13
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f8cd 9000 	str.w	r9, [sp]
 8001c02:	9703      	str	r7, [sp, #12]
 8001c04:	f7ff fbba 	bl	800137c <_Unwind_VRS_Set>
 8001c08:	e7b9      	b.n	8001b7e <__gnu_unwind_execute+0xe>
 8001c0a:	f000 030d 	and.w	r3, r0, #13
 8001c0e:	2b0d      	cmp	r3, #13
 8001c10:	d0db      	beq.n	8001bca <__gnu_unwind_execute+0x5a>
 8001c12:	2300      	movs	r3, #0
 8001c14:	af03      	add	r7, sp, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	f000 020f 	and.w	r2, r0, #15
 8001c1c:	9700      	str	r7, [sp, #0]
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f7ff fb86 	bl	8001330 <_Unwind_VRS_Get>
 8001c24:	2300      	movs	r3, #0
 8001c26:	220d      	movs	r2, #13
 8001c28:	4628      	mov	r0, r5
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	9700      	str	r7, [sp, #0]
 8001c2e:	f7ff fba5 	bl	800137c <_Unwind_VRS_Set>
 8001c32:	e7a4      	b.n	8001b7e <__gnu_unwind_execute+0xe>
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7ff ff6f 	bl	8001b18 <next_unwind_byte>
 8001c3a:	0224      	lsls	r4, r4, #8
 8001c3c:	4320      	orrs	r0, r4
 8001c3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001c42:	d0c2      	beq.n	8001bca <__gnu_unwind_execute+0x5a>
 8001c44:	2300      	movs	r3, #0
 8001c46:	0104      	lsls	r4, r0, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	b2a2      	uxth	r2, r4
 8001c4e:	f7ff fd53 	bl	80016f8 <_Unwind_VRS_Pop>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d1b9      	bne.n	8001bca <__gnu_unwind_execute+0x5a>
 8001c56:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001c5a:	bf18      	it	ne
 8001c5c:	f04f 0801 	movne.w	r8, #1
 8001c60:	e78d      	b.n	8001b7e <__gnu_unwind_execute+0xe>
 8001c62:	43c3      	mvns	r3, r0
 8001c64:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	411a      	asrs	r2, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	0701      	lsls	r1, r0, #28
 8001c72:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001c76:	bf48      	it	mi
 8001c78:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7ff fd3a 	bl	80016f8 <_Unwind_VRS_Pop>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	f43f af7a 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001c8a:	e79e      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001c8c:	28b1      	cmp	r0, #177	; 0xb1
 8001c8e:	d03c      	beq.n	8001d0a <__gnu_unwind_execute+0x19a>
 8001c90:	28b2      	cmp	r0, #178	; 0xb2
 8001c92:	f000 80b0 	beq.w	8001df6 <__gnu_unwind_execute+0x286>
 8001c96:	28b3      	cmp	r0, #179	; 0xb3
 8001c98:	d04a      	beq.n	8001d30 <__gnu_unwind_execute+0x1c0>
 8001c9a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001c9e:	2bb4      	cmp	r3, #180	; 0xb4
 8001ca0:	d093      	beq.n	8001bca <__gnu_unwind_execute+0x5a>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f000 0207 	and.w	r2, r0, #7
 8001ca8:	441a      	add	r2, r3
 8001caa:	4628      	mov	r0, r5
 8001cac:	4619      	mov	r1, r3
 8001cae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cb2:	f7ff fd21 	bl	80016f8 <_Unwind_VRS_Pop>
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	f43f af61 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001cbc:	e785      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001cbe:	28c6      	cmp	r0, #198	; 0xc6
 8001cc0:	d04f      	beq.n	8001d62 <__gnu_unwind_execute+0x1f2>
 8001cc2:	28c7      	cmp	r0, #199	; 0xc7
 8001cc4:	d061      	beq.n	8001d8a <__gnu_unwind_execute+0x21a>
 8001cc6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001cca:	2bc0      	cmp	r3, #192	; 0xc0
 8001ccc:	d070      	beq.n	8001db0 <__gnu_unwind_execute+0x240>
 8001cce:	28c8      	cmp	r0, #200	; 0xc8
 8001cd0:	d07c      	beq.n	8001dcc <__gnu_unwind_execute+0x25c>
 8001cd2:	28c9      	cmp	r0, #201	; 0xc9
 8001cd4:	f47f af79 	bne.w	8001bca <__gnu_unwind_execute+0x5a>
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f7ff ff1d 	bl	8001b18 <next_unwind_byte>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	0314      	lsls	r4, r2, #12
 8001ce8:	f002 020f 	and.w	r2, r2, #15
 8001cec:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001cf0:	440a      	add	r2, r1
 8001cf2:	4322      	orrs	r2, r4
 8001cf4:	f7ff fd00 	bl	80016f8 <_Unwind_VRS_Pop>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f43f af40 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001cfe:	e764      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001d00:	f1b8 0f00 	cmp.w	r8, #0
 8001d04:	d01c      	beq.n	8001d40 <__gnu_unwind_execute+0x1d0>
 8001d06:	2000      	movs	r0, #0
 8001d08:	e760      	b.n	8001bcc <__gnu_unwind_execute+0x5c>
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f7ff ff04 	bl	8001b18 <next_unwind_byte>
 8001d10:	4602      	mov	r2, r0
 8001d12:	2800      	cmp	r0, #0
 8001d14:	f43f af59 	beq.w	8001bca <__gnu_unwind_execute+0x5a>
 8001d18:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d1c:	f47f af55 	bne.w	8001bca <__gnu_unwind_execute+0x5a>
 8001d20:	4619      	mov	r1, r3
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff fce8 	bl	80016f8 <_Unwind_VRS_Pop>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	f43f af28 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001d2e:	e74c      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001d30:	4630      	mov	r0, r6
 8001d32:	f7ff fef1 	bl	8001b18 <next_unwind_byte>
 8001d36:	2301      	movs	r3, #1
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	e7d2      	b.n	8001ce6 <__gnu_unwind_execute+0x176>
 8001d40:	ac03      	add	r4, sp, #12
 8001d42:	4643      	mov	r3, r8
 8001d44:	220e      	movs	r2, #14
 8001d46:	4641      	mov	r1, r8
 8001d48:	4628      	mov	r0, r5
 8001d4a:	9400      	str	r4, [sp, #0]
 8001d4c:	f7ff faf0 	bl	8001330 <_Unwind_VRS_Get>
 8001d50:	4643      	mov	r3, r8
 8001d52:	220f      	movs	r2, #15
 8001d54:	4628      	mov	r0, r5
 8001d56:	4641      	mov	r1, r8
 8001d58:	9400      	str	r4, [sp, #0]
 8001d5a:	f7ff fb0f 	bl	800137c <_Unwind_VRS_Set>
 8001d5e:	4640      	mov	r0, r8
 8001d60:	e734      	b.n	8001bcc <__gnu_unwind_execute+0x5c>
 8001d62:	4630      	mov	r0, r6
 8001d64:	f7ff fed8 	bl	8001b18 <next_unwind_byte>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	0314      	lsls	r4, r2, #12
 8001d6e:	f002 020f 	and.w	r2, r2, #15
 8001d72:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001d76:	3201      	adds	r2, #1
 8001d78:	4628      	mov	r0, r5
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4322      	orrs	r2, r4
 8001d7e:	f7ff fcbb 	bl	80016f8 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f aefb 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001d88:	e71f      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff fec4 	bl	8001b18 <next_unwind_byte>
 8001d90:	4602      	mov	r2, r0
 8001d92:	2800      	cmp	r0, #0
 8001d94:	f43f af19 	beq.w	8001bca <__gnu_unwind_execute+0x5a>
 8001d98:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d9c:	f47f af15 	bne.w	8001bca <__gnu_unwind_execute+0x5a>
 8001da0:	2104      	movs	r1, #4
 8001da2:	4628      	mov	r0, r5
 8001da4:	f7ff fca8 	bl	80016f8 <_Unwind_VRS_Pop>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aee8 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001dae:	e70c      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001db0:	2303      	movs	r3, #3
 8001db2:	f000 020f 	and.w	r2, r0, #15
 8001db6:	3201      	adds	r2, #1
 8001db8:	4628      	mov	r0, r5
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001dc0:	f7ff fc9a 	bl	80016f8 <_Unwind_VRS_Pop>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aeda 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001dca:	e6fe      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f7ff fea3 	bl	8001b18 <next_unwind_byte>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001dda:	f002 020f 	and.w	r2, r2, #15
 8001dde:	3410      	adds	r4, #16
 8001de0:	440a      	add	r2, r1
 8001de2:	2305      	movs	r3, #5
 8001de4:	4628      	mov	r0, r5
 8001de6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001dea:	f7ff fc85 	bl	80016f8 <_Unwind_VRS_Pop>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	f43f aec5 	beq.w	8001b7e <__gnu_unwind_execute+0xe>
 8001df4:	e6e9      	b.n	8001bca <__gnu_unwind_execute+0x5a>
 8001df6:	2300      	movs	r3, #0
 8001df8:	f10d 090c 	add.w	r9, sp, #12
 8001dfc:	220d      	movs	r2, #13
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4628      	mov	r0, r5
 8001e02:	f8cd 9000 	str.w	r9, [sp]
 8001e06:	f7ff fa93 	bl	8001330 <_Unwind_VRS_Get>
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f7ff fe84 	bl	8001b18 <next_unwind_byte>
 8001e10:	0602      	lsls	r2, r0, #24
 8001e12:	f04f 0402 	mov.w	r4, #2
 8001e16:	d50c      	bpl.n	8001e32 <__gnu_unwind_execute+0x2c2>
 8001e18:	9b03      	ldr	r3, [sp, #12]
 8001e1a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e1e:	40a0      	lsls	r0, r4
 8001e20:	4418      	add	r0, r3
 8001e22:	9003      	str	r0, [sp, #12]
 8001e24:	4630      	mov	r0, r6
 8001e26:	f7ff fe77 	bl	8001b18 <next_unwind_byte>
 8001e2a:	0603      	lsls	r3, r0, #24
 8001e2c:	f104 0407 	add.w	r4, r4, #7
 8001e30:	d4f2      	bmi.n	8001e18 <__gnu_unwind_execute+0x2a8>
 8001e32:	9b03      	ldr	r3, [sp, #12]
 8001e34:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001e38:	40a2      	lsls	r2, r4
 8001e3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e3e:	441a      	add	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9203      	str	r2, [sp, #12]
 8001e44:	4628      	mov	r0, r5
 8001e46:	220d      	movs	r2, #13
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f8cd 9000 	str.w	r9, [sp]
 8001e4e:	f7ff fa95 	bl	800137c <_Unwind_VRS_Set>
 8001e52:	e694      	b.n	8001b7e <__gnu_unwind_execute+0xe>

08001e54 <__gnu_unwind_frame>:
 8001e54:	460b      	mov	r3, r1
 8001e56:	f04f 0c03 	mov.w	ip, #3
 8001e5a:	b500      	push	{lr}
 8001e5c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001e5e:	4618      	mov	r0, r3
 8001e60:	6853      	ldr	r3, [r2, #4]
 8001e62:	b085      	sub	sp, #20
 8001e64:	3208      	adds	r2, #8
 8001e66:	9202      	str	r2, [sp, #8]
 8001e68:	a901      	add	r1, sp, #4
 8001e6a:	0e1a      	lsrs	r2, r3, #24
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	f88d 200d 	strb.w	r2, [sp, #13]
 8001e78:	f7ff fe7a 	bl	8001b70 <__gnu_unwind_execute>
 8001e7c:	b005      	add	sp, #20
 8001e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e82:	bf00      	nop

08001e84 <_Unwind_GetRegionStart>:
 8001e84:	b508      	push	{r3, lr}
 8001e86:	f7ff fe71 	bl	8001b6c <unwind_UCB_from_context>
 8001e8a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001e8c:	bd08      	pop	{r3, pc}
 8001e8e:	bf00      	nop

08001e90 <_Unwind_GetLanguageSpecificData>:
 8001e90:	b508      	push	{r3, lr}
 8001e92:	f7ff fe6b 	bl	8001b6c <unwind_UCB_from_context>
 8001e96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001e98:	79c3      	ldrb	r3, [r0, #7]
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ea0:	bd08      	pop	{r3, pc}
 8001ea2:	bf00      	nop

08001ea4 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001ea4:	4613      	mov	r3, r2
	  if (_Num)
 8001ea6:	1a0a      	subs	r2, r1, r0
 8001ea8:	d003      	beq.n	8001eb2 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0+0xe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001eaa:	4601      	mov	r1, r0
 8001eac:	1a98      	subs	r0, r3, r2
 8001eae:	f004 bf4b 	b.w	8006d48 <memmove>
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
    }
 8001eb2:	4770      	bx	lr

08001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>:
	{
		// priority: {filter_match_index[7:6] | is_can2[:5] | is_fifo1[:4] | is_bit16[:3] | is_mask[:2] : index[1:0]}
		template<FilterWidth filter_width, FilterMode filter_mode>
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
		{
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8001eb4:	4281      	cmp	r1, r0
 8001eb6:	bf94      	ite	ls
 8001eb8:	2120      	movls	r1, #32
 8001eba:	2100      	movhi	r1, #0
 8001ebc:	2a01      	cmp	r2, #1
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2310      	moveq	r3, #16
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	4308      	orrs	r0, r1
		}
 8001ec6:	4318      	orrs	r0, r3
 8001ec8:	4770      	bx	lr

08001eca <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
 8001eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ecc:	460e      	mov	r6, r1
 8001ece:	a902      	add	r1, sp, #8
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
 8001ed0:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 8001ed8:	d018      	beq.n	8001f0c <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001eda:	1c41      	adds	r1, r0, #1
 8001edc:	42b1      	cmp	r1, r6
 8001ede:	d015      	beq.n	8001f0c <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>(
	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
	    return __x < __y;
	  }
	else
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 8001ee0:	460d      	mov	r5, r1
	{
	  if (__comp(__i, __first))
 8001ee2:	7823      	ldrb	r3, [r4, #0]
 8001ee4:	f815 7b01 	ldrb.w	r7, [r5], #1
 8001ee8:	42bb      	cmp	r3, r7
 8001eea:	d906      	bls.n	8001efa <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8001eec:	462a      	mov	r2, r5
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff ffd8 	bl	8001ea4 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8001ef4:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	e7f0      	b.n	8001edc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x12>
 8001efa:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 8001efe:	429f      	cmp	r7, r3
 8001f00:	d202      	bcs.n	8001f08 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x3e>
	  *__last = _GLIBCXX_MOVE(*__next);
 8001f02:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8001f06:	e7f8      	b.n	8001efa <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8001f08:	700f      	strb	r7, [r1, #0]
    }
 8001f0a:	e7f4      	b.n	8001ef6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x2c>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
 8001f0c:	b003      	add	sp, #12
 8001f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f10 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 8001f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f12:	460e      	mov	r6, r1
 8001f14:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 8001f16:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8001f18:	4604      	mov	r4, r0
 8001f1a:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 8001f1e:	d01e      	beq.n	8001f5e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001f20:	1c41      	adds	r1, r0, #1
 8001f22:	42b1      	cmp	r1, r6
 8001f24:	d01b      	beq.n	8001f5e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001f26:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 8001f28:	7823      	ldrb	r3, [r4, #0]
 8001f2a:	f815 7b01 	ldrb.w	r7, [r5], #1
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	f007 0203 	and.w	r2, r7, #3
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d206      	bcs.n	8001f48 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8001f3a:	462a      	mov	r2, r5
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff ffb1 	bl	8001ea4 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8001f42:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001f44:	4629      	mov	r1, r5
 8001f46:	e7ec      	b.n	8001f22 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 8001f48:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 8001f4c:	f003 0003 	and.w	r0, r3, #3
 8001f50:	4282      	cmp	r2, r0
 8001f52:	d202      	bcs.n	8001f5a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 8001f54:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8001f58:	e7f6      	b.n	8001f48 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 8001f5a:	700f      	strb	r7, [r1, #0]
    }
 8001f5c:	e7f2      	b.n	8001f44 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 8001f5e:	b003      	add	sp, #12
 8001f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f62 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8001f62:	b5f0      	push	{r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 8001f64:	1e54      	subs	r4, r2, #1
 8001f66:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001f6a:	1065      	asrs	r5, r4, #1
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	42a5      	cmp	r5, r4
 8001f70:	dd0f      	ble.n	8001f92 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x30>
	{
	  __secondChild = 2 * (__secondChild + 1);
 8001f72:	1c67      	adds	r7, r4, #1
 8001f74:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8001f78:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8001f7a:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 8001f7e:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8001f82:	45bc      	cmp	ip, r7
		     __first + (__secondChild - 1)))
	    __secondChild--;
 8001f84:	bf88      	it	hi
 8001f86:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8001f8a:	5d87      	ldrb	r7, [r0, r6]
 8001f8c:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 8001f8e:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 8001f90:	e7ed      	b.n	8001f6e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xc>
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8001f92:	07d5      	lsls	r5, r2, #31
 8001f94:	d40d      	bmi.n	8001fb2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
 8001f96:	3a02      	subs	r2, #2
 8001f98:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001f9c:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8001fa0:	d107      	bne.n	8001fb2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
	{
	  __secondChild = 2 * (__secondChild + 1);
 8001fa2:	1c62      	adds	r2, r4, #1
 8001fa4:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8001fa6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001faa:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8001fae:	5502      	strb	r2, [r0, r4]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
 8001fb0:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8001fb2:	1e62      	subs	r2, r4, #1
 8001fb4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001fb8:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8001fba:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8001fbc:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8001fc0:	da09      	bge.n	8001fd6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
 8001fc2:	5c84      	ldrb	r4, [r0, r2]
 8001fc4:	42a3      	cmp	r3, r4
 8001fc6:	d906      	bls.n	8001fd6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8001fc8:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 8001fca:	1e54      	subs	r4, r2, #1
 8001fcc:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8001fd0:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8001fd2:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8001fd4:	e7f1      	b.n	8001fba <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x58>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8001fd6:	702b      	strb	r3, [r5, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
 8001fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fda <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
 8001fda:	b082      	sub	sp, #8
 8001fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	460d      	mov	r5, r1
 8001fe4:	4617      	mov	r7, r2
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8001fea:	f100 0801 	add.w	r8, r0, #1
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 8001fee:	1b2e      	subs	r6, r5, r4
 8001ff0:	2e10      	cmp	r6, #16
 8001ff2:	dd29      	ble.n	8002048 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x6e>
	{
	  if (__depth_limit == 0)
 8001ff4:	bb6f      	cbnz	r7, 8002052 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x78>
 8001ff6:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8001ffa:	f10d 0808 	add.w	r8, sp, #8
 8001ffe:	f10d 0910 	add.w	r9, sp, #16
 8002002:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8002006:	e889 0003 	stmia.w	r9, {r0, r1}

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
 800200a:	1eb7      	subs	r7, r6, #2
 800200c:	107f      	asrs	r7, r7, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800200e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8002012:	4632      	mov	r2, r6
 8002014:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002018:	5de3      	ldrb	r3, [r4, r7]
 800201a:	4639      	mov	r1, r7
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ffa0 	bl	8001f62 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
			     __comp);
	  if (__parent == 0)
 8002022:	b10f      	cbz	r7, 8002028 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	    return;
	  __parent--;
 8002024:	3f01      	subs	r7, #1
      while (true)
 8002026:	e7f2      	b.n	800200e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8002028:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 800202c:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 800202e:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8002030:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8002034:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8002036:	e88d 0003 	stmia.w	sp, {r0, r1}
 800203a:	4632      	mov	r2, r6
 800203c:	2100      	movs	r1, #0
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff ff8f 	bl	8001f62 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8002044:	2e01      	cmp	r6, #1
 8002046:	dcef      	bgt.n	8002028 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
	  __last = __cut;
	}
    }
 8002048:	b007      	add	sp, #28
 800204a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800204e:	b002      	add	sp, #8
 8002050:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002052:	1076      	asrs	r6, r6, #1
 8002054:	7860      	ldrb	r0, [r4, #1]
 8002056:	5da1      	ldrb	r1, [r4, r6]
 8002058:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      if (__comp(__a, __b))
 800205c:	4288      	cmp	r0, r1
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800205e:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 8002060:	f107 37ff 	add.w	r7, r7, #4294967295
      if (__comp(__a, __b))
 8002064:	d224      	bcs.n	80020b0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xd6>
	  if (__comp(__b, __c))
 8002066:	428a      	cmp	r2, r1
 8002068:	d91c      	bls.n	80020a4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xca>
      __a = _GLIBCXX_MOVE(__b);
 800206a:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800206c:	55a3      	strb	r3, [r4, r6]
 800206e:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8002070:	462b      	mov	r3, r5
 8002072:	4616      	mov	r6, r2
 8002074:	f894 e000 	ldrb.w	lr, [r4]
 8002078:	f812 0b01 	ldrb.w	r0, [r2], #1
	  while (__comp(__first, __pivot))
 800207c:	4570      	cmp	r0, lr
 800207e:	d3f8      	bcc.n	8002072 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>
	  --__last;
 8002080:	1e59      	subs	r1, r3, #1
 8002082:	460b      	mov	r3, r1
 8002084:	f811 c901 	ldrb.w	ip, [r1], #-1
	  while (__comp(__pivot, __last))
 8002088:	45e6      	cmp	lr, ip
 800208a:	d3fa      	bcc.n	8002082 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xa8>
	  if (!(__first < __last))
 800208c:	429e      	cmp	r6, r3
 800208e:	d317      	bcc.n	80020c0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe6>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8002090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002092:	4629      	mov	r1, r5
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	463a      	mov	r2, r7
 8002098:	4630      	mov	r0, r6
 800209a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800209c:	f7ff ff9d 	bl	8001fda <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
      while (__last - __first > int(_S_threshold))
 80020a0:	4635      	mov	r5, r6
 80020a2:	e7a4      	b.n	8001fee <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x14>
	  else if (__comp(__a, __c))
 80020a4:	4282      	cmp	r2, r0
 80020a6:	d905      	bls.n	80020b4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xda>
      __a = _GLIBCXX_MOVE(__b);
 80020a8:	7022      	strb	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80020aa:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 80020ae:	e7de      	b.n	800206e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__a, __c))
 80020b0:	4282      	cmp	r2, r0
 80020b2:	d902      	bls.n	80020ba <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe0>
      __a = _GLIBCXX_MOVE(__b);
 80020b4:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80020b6:	7063      	strb	r3, [r4, #1]
 80020b8:	e7d9      	b.n	800206e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__b, __c))
 80020ba:	428a      	cmp	r2, r1
 80020bc:	d9d5      	bls.n	800206a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x90>
 80020be:	e7f3      	b.n	80020a8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xce>
      __a = _GLIBCXX_MOVE(__b);
 80020c0:	f802 cc01 	strb.w	ip, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 80020c4:	7018      	strb	r0, [r3, #0]
	  while (__comp(__first, __pivot))
 80020c6:	e7d4      	b.n	8002072 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>

080020c8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
  // sort

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	b087      	sub	sp, #28
 80020cc:	ae02      	add	r6, sp, #8
	   _Compare __comp)
    {
      if (__first != __last)
 80020ce:	4288      	cmp	r0, r1
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80020d0:	4604      	mov	r4, r0
 80020d2:	460d      	mov	r5, r1
 80020d4:	e886 000c 	stmia.w	r6, {r2, r3}
      if (__first != __last)
 80020d8:	d02a      	beq.n	8002130 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
	{
	  std::__introsort_loop(__first, __last,
				std::__lg(__last - __first) * 2,
 80020da:	1a0f      	subs	r7, r1, r0

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80020dc:	fab7 f287 	clz	r2, r7
 80020e0:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	0052      	lsls	r2, r2, #1
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	f7ff ff76 	bl	8001fda <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
 80020ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80020f2:	ab04      	add	r3, sp, #16
      if (__last - __first > int(_S_threshold))
 80020f4:	2f10      	cmp	r7, #16
 80020f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80020fa:	dd14      	ble.n	8002126 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80020fc:	cb0c      	ldmia	r3, {r2, r3}
 80020fe:	f104 0610 	add.w	r6, r4, #16
 8002102:	4631      	mov	r1, r6
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff fee0 	bl	8001eca <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800210a:	42b5      	cmp	r5, r6
 800210c:	d010      	beq.n	8002130 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800210e:	4633      	mov	r3, r6
	__val = _GLIBCXX_MOVE(*__last);
 8002110:	7832      	ldrb	r2, [r6, #0]
 8002112:	f813 1c01 	ldrb.w	r1, [r3, #-1]
      while (__comp(__val, __next))
 8002116:	428a      	cmp	r2, r1
 8002118:	d202      	bcs.n	8002120 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x58>
	  *__last = _GLIBCXX_MOVE(*__next);
 800211a:	f803 1901 	strb.w	r1, [r3], #-1
      while (__comp(__val, __next))
 800211e:	e7f8      	b.n	8002112 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x4a>
      *__last = _GLIBCXX_MOVE(__val);
 8002120:	701a      	strb	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002122:	3601      	adds	r6, #1
 8002124:	e7f1      	b.n	800210a <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	std::__insertion_sort(__first, __last, __comp);
 8002126:	4629      	mov	r1, r5
 8002128:	cb0c      	ldmia	r3, {r2, r3}
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff fecd 	bl	8001eca <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
				__comp);
	  std::__final_insertion_sort(__first, __last, __comp);
	}
    }
 8002130:	b007      	add	sp, #28
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002134 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8002134:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8002136:	1e54      	subs	r4, r2, #1
 8002138:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800213c:	1065      	asrs	r5, r4, #1
 800213e:	460c      	mov	r4, r1
 8002140:	42a5      	cmp	r5, r4
 8002142:	dd13      	ble.n	800216c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 8002144:	1c67      	adds	r7, r4, #1
 8002146:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 800214a:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 800214c:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 8002150:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8002154:	f00c 0c03 	and.w	ip, ip, #3
 8002158:	f007 0703 	and.w	r7, r7, #3
 800215c:	45bc      	cmp	ip, r7
	    __secondChild--;
 800215e:	bf88      	it	hi
 8002160:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8002164:	5d87      	ldrb	r7, [r0, r6]
 8002166:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 8002168:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 800216a:	e7e9      	b.n	8002140 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800216c:	07d5      	lsls	r5, r2, #31
 800216e:	d40d      	bmi.n	800218c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 8002170:	3a02      	subs	r2, #2
 8002172:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002176:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 800217a:	d107      	bne.n	800218c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 800217c:	1c62      	adds	r2, r4, #1
 800217e:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8002180:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002184:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8002188:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 800218a:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 800218c:	1e62      	subs	r2, r4, #1
 800218e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002192:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8002194:	f003 0603 	and.w	r6, r3, #3
 8002198:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800219a:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800219e:	da0b      	bge.n	80021b8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 80021a0:	5c84      	ldrb	r4, [r0, r2]
 80021a2:	f004 0703 	and.w	r7, r4, #3
 80021a6:	42b7      	cmp	r7, r6
 80021a8:	d206      	bcs.n	80021b8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80021aa:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 80021ac:	1e54      	subs	r4, r2, #1
 80021ae:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80021b2:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80021b4:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80021b6:	e7ef      	b.n	8002198 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80021b8:	702b      	strb	r3, [r5, #0]
    }
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021bc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80021bc:	b082      	sub	sp, #8
 80021be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
 80021c6:	4617      	mov	r7, r2
 80021c8:	b087      	sub	sp, #28
 80021ca:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80021cc:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 80021d0:	1b2e      	subs	r6, r5, r4
 80021d2:	2e10      	cmp	r6, #16
 80021d4:	dd29      	ble.n	800222a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 80021d6:	bb6f      	cbnz	r7, 8002234 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 80021d8:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80021dc:	f10d 0808 	add.w	r8, sp, #8
 80021e0:	f10d 0910 	add.w	r9, sp, #16
 80021e4:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 80021e8:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 80021ec:	1eb7      	subs	r7, r6, #2
 80021ee:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80021f0:	e899 0003 	ldmia.w	r9, {r0, r1}
 80021f4:	4632      	mov	r2, r6
 80021f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80021fa:	5de3      	ldrb	r3, [r4, r7]
 80021fc:	4639      	mov	r1, r7
 80021fe:	4620      	mov	r0, r4
 8002200:	f7ff ff98 	bl	8002134 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8002204:	b10f      	cbz	r7, 800220a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 8002206:	3f01      	subs	r7, #1
      while (true)
 8002208:	e7f2      	b.n	80021f0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800220a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 800220e:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8002210:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8002212:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8002216:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8002218:	e88d 0003 	stmia.w	sp, {r0, r1}
 800221c:	4632      	mov	r2, r6
 800221e:	2100      	movs	r1, #0
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff ff87 	bl	8002134 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 8002226:	2e01      	cmp	r6, #1
 8002228:	dcef      	bgt.n	800220a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 800222a:	b007      	add	sp, #28
 800222c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002230:	b002      	add	sp, #8
 8002232:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002234:	1076      	asrs	r6, r6, #1
 8002236:	f894 e001 	ldrb.w	lr, [r4, #1]
 800223a:	5da1      	ldrb	r1, [r4, r6]
 800223c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8002240:	f00e 0903 	and.w	r9, lr, #3
 8002244:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 8002248:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800224a:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 800224c:	f107 37ff 	add.w	r7, r7, #4294967295
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002250:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 8002254:	d229      	bcs.n	80022aa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 8002256:	4594      	cmp	ip, r2
 8002258:	d221      	bcs.n	800229e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 800225a:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800225c:	55a3      	strb	r3, [r4, r6]
 800225e:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8002260:	462b      	mov	r3, r5
 8002262:	4616      	mov	r6, r2
 8002264:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002266:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800226a:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 800226e:	f00c 0003 	and.w	r0, ip, #3
 8002272:	4288      	cmp	r0, r1
 8002274:	d3f5      	bcc.n	8002262 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800227a:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 800227e:	f00e 0903 	and.w	r9, lr, #3
 8002282:	4549      	cmp	r1, r9
 8002284:	d3f8      	bcc.n	8002278 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 8002286:	429e      	cmp	r6, r3
 8002288:	d318      	bcc.n	80022bc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800228a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800228c:	4629      	mov	r1, r5
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	463a      	mov	r2, r7
 8002292:	4630      	mov	r0, r6
 8002294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002296:	f7ff ff91 	bl	80021bc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 800229a:	4635      	mov	r5, r6
 800229c:	e798      	b.n	80021d0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 800229e:	4591      	cmp	r9, r2
 80022a0:	d205      	bcs.n	80022ae <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 80022a2:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80022a4:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 80022a8:	e7d9      	b.n	800225e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 80022aa:	4591      	cmp	r9, r2
 80022ac:	d203      	bcs.n	80022b6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 80022ae:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 80022b2:	7063      	strb	r3, [r4, #1]
 80022b4:	e7d3      	b.n	800225e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 80022b6:	4594      	cmp	ip, r2
 80022b8:	d2cf      	bcs.n	800225a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 80022ba:	e7f2      	b.n	80022a2 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 80022bc:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 80022c0:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 80022c4:	e7cd      	b.n	8002262 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

080022c6 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:

		template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 80022c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ca:	4604      	mov	r4, r0
 80022cc:	b099      	sub	sp, #100	; 0x64
 80022ce:	4617      	mov	r7, r2
 80022d0:	4688      	mov	r8, r1
		{
			std::array<u8, sizeof...(filter_widthes)> priorities;

			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80022d2:	688a      	ldr	r2, [r1, #8]
 80022d4:	4601      	mov	r1, r0
 80022d6:	2000      	movs	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 80022d8:	461e      	mov	r6, r3
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80022da:	f7ff fdeb 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4621      	mov	r1, r4
 80022e2:	9003      	str	r0, [sp, #12]
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7ff fde5 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 80022ea:	68b2      	ldr	r2, [r6, #8]
 80022ec:	4621      	mov	r1, r4
 80022ee:	9004      	str	r0, [sp, #16]
 80022f0:	2002      	movs	r0, #2
 80022f2:	f7ff fddf 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 80022f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80022f8:	4621      	mov	r1, r4
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	9005      	str	r0, [sp, #20]
 80022fe:	2003      	movs	r0, #3
 8002300:	f7ff fdd8 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002304:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002306:	4621      	mov	r1, r4
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	9006      	str	r0, [sp, #24]
 800230c:	2004      	movs	r0, #4
 800230e:	f7ff fdd1 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002312:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002314:	4621      	mov	r1, r4
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	9007      	str	r0, [sp, #28]
 800231a:	2005      	movs	r0, #5
 800231c:	f7ff fdca 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002320:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002322:	4621      	mov	r1, r4
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	900b      	str	r0, [sp, #44]	; 0x2c
 8002328:	2006      	movs	r0, #6
 800232a:	f7ff fdc3 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 800232e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002330:	4683      	mov	fp, r0
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4621      	mov	r1, r4
 8002336:	2007      	movs	r0, #7
 8002338:	f7ff fdbc 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 800233c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800233e:	4682      	mov	sl, r0
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	4621      	mov	r1, r4
 8002344:	2008      	movs	r0, #8
 8002346:	f7ff fdb5 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 800234a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800234c:	4681      	mov	r9, r0
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4621      	mov	r1, r4
 8002352:	2009      	movs	r0, #9
 8002354:	f7ff fdae 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002358:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800235a:	4621      	mov	r1, r4
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	9008      	str	r0, [sp, #32]
 8002360:	200a      	movs	r0, #10
 8002362:	f7ff fda7 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002366:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002368:	4621      	mov	r1, r4
 800236a:	9009      	str	r0, [sp, #36]	; 0x24
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	200b      	movs	r0, #11
 8002370:	f7ff fda0 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002374:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002376:	4621      	mov	r1, r4
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	900a      	str	r0, [sp, #40]	; 0x28
 800237c:	200c      	movs	r0, #12
 800237e:	f7ff fd99 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002382:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8002384:	4605      	mov	r5, r0
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4621      	mov	r1, r4
 800238a:	200d      	movs	r0, #13
 800238c:	f7ff fd92 	bl	8001eb4 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8002390:	9b03      	ldr	r3, [sp, #12]
 8002392:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
 8002396:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800239a:	9b04      	ldr	r3, [sp, #16]
 800239c:	f88d b056 	strb.w	fp, [sp, #86]	; 0x56
 80023a0:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 80023a4:	9b05      	ldr	r3, [sp, #20]
 80023a6:	f88d a057 	strb.w	sl, [sp, #87]	; 0x57
 80023aa:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 80023ae:	9b06      	ldr	r3, [sp, #24]
 80023b0:	f88d 9058 	strb.w	r9, [sp, #88]	; 0x58
 80023b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023b8:	9b07      	ldr	r3, [sp, #28]
 80023ba:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
 80023be:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80023c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 80023c4:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 80023c8:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
 80023cc:	9b08      	ldr	r3, [sp, #32]
 80023ce:	a814      	add	r0, sp, #80	; 0x50
 80023d0:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 80023d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023d6:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 80023da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023dc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80023e8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    {
      _Compare _M_comp;

      explicit _GLIBCXX14_CONSTEXPR
      _Iter_comp_iter(_Compare __comp)
	: _M_comp(_GLIBCXX_MOVE(__comp))
 80023ec:	ab12      	add	r3, sp, #72	; 0x48
 80023ee:	930e      	str	r3, [sp, #56]	; 0x38
 80023f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023f2:	ab10      	add	r3, sp, #64	; 0x40
 80023f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80023f6:	f7ff fe67 	bl	80020c8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
	     typename _Comp = ranges::less, typename _Proj = identity>
      requires sortable<iterator_t<_Range>, _Comp, _Proj>
      constexpr borrowed_iterator_t<_Range>
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
 80023fa:	2200      	movs	r2, #0
			
			std::ranges::sort(priorities);

			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
			{
				for(u32 i = 0; auto& priority : priorities)
 80023fc:	2100      	movs	r1, #0
 80023fe:	a814      	add	r0, sp, #80	; 0x50
				{
					priority |= (i << 6);
 8002400:	7803      	ldrb	r3, [r0, #0]
 8002402:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f800 3b01 	strb.w	r3, [r0], #1
					++i;

					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 800240c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002410:	4293      	cmp	r3, r2
					++i;
 8002412:	f101 0101 	add.w	r1, r1, #1
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8002416:	d001      	beq.n	800241c <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x156>
				for(u32 i = 0; auto& priority : priorities)
 8002418:	290e      	cmp	r1, #14
 800241a:	d1f1      	bne.n	8002400 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x13a>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 800241c:	3210      	adds	r2, #16
 800241e:	2a40      	cmp	r2, #64	; 0x40
 8002420:	d1ec      	bne.n	80023fc <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x136>
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8002422:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 8002426:	ad0d      	add	r5, sp, #52	; 0x34
 8002428:	ac0c      	add	r4, sp, #48	; 0x30
 800242a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800242e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002432:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8002436:	462b      	mov	r3, r5
 8002438:	a814      	add	r0, sp, #80	; 0x50
 800243a:	2206      	movs	r2, #6
 800243c:	9400      	str	r4, [sp, #0]
 800243e:	9510      	str	r5, [sp, #64]	; 0x40
 8002440:	9411      	str	r4, [sp, #68]	; 0x44
 8002442:	f7ff febb 	bl	80021bc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	std::__insertion_sort(__first, __last, __comp);
 8002446:	4623      	mov	r3, r4
 8002448:	462a      	mov	r2, r5
 800244a:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 800244e:	a814      	add	r0, sp, #80	; 0x50
 8002450:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
 8002454:	f7ff fd5c 	bl	8001f10 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>

			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});

			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002458:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800245c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	f8c8 300c 	str.w	r3, [r8, #12]
 8002464:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	60f3      	str	r3, [r6, #12]
 8002474:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8002480:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	60d3      	str	r3, [r2, #12]
 8002486:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
 800248a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	60d3      	str	r3, [r2, #12]
 8002490:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8002494:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	60d3      	str	r3, [r2, #12]
 800249a:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 800249e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	60d3      	str	r3, [r2, #12]
 80024a4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80024a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	60d3      	str	r3, [r2, #12]
 80024ae:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 80024b2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	60d3      	str	r3, [r2, #12]
 80024b8:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80024bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80024be:	099b      	lsrs	r3, r3, #6
 80024c0:	60d3      	str	r3, [r2, #12]
 80024c2:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80024c6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	60d3      	str	r3, [r2, #12]
 80024cc:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 80024d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	60d3      	str	r3, [r2, #12]
 80024d6:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 80024da:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	60d3      	str	r3, [r2, #12]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
		}
 80024e0:	b019      	add	sp, #100	; 0x64
 80024e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080024e8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
			clear_bit(bxcan->FA1R, bit_position);
		}
	}

	template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 80024e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ec:	460e      	mov	r6, r1
 80024ee:	b091      	sub	sp, #68	; 0x44
	requires (sizeof...(filter_args) <= Config::filter_bank_total_size)
	{
		// assign FMI.
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 80024f0:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 80024f4:	9f24      	ldr	r7, [sp, #144]	; 0x90
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 80024f6:	f8cd c014 	str.w	ip, [sp, #20]
 80024fa:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 80024fe:	e9dd ba20 	ldrd	fp, sl, [sp, #128]	; 0x80
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8002502:	f8cd c010 	str.w	ip, [sp, #16]
 8002506:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 800250a:	e9dd 9822 	ldrd	r9, r8, [sp, #136]	; 0x88
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 800250e:	f8cd c00c 	str.w	ip, [sp, #12]
 8002512:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8002516:	e9cd a907 	strd	sl, r9, [sp, #28]
 800251a:	f8cd c008 	str.w	ip, [sp, #8]
 800251e:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8002522:	f8cd b018 	str.w	fp, [sp, #24]
 8002526:	f8cd c004 	str.w	ip, [sp, #4]
 800252a:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 800252e:	4615      	mov	r5, r2
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8002530:	f8cd c000 	str.w	ip, [sp]
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8002534:	461c      	mov	r4, r3
 8002536:	900d      	str	r0, [sp, #52]	; 0x34
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8002538:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
 800253c:	f7ff fec3 	bl	80022c6 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		bit &= ~reg;
	}

	inline constexpr void set_bit(volatile auto& bit, const auto reg)
	{
		bit = bit | reg;
 8002540:	4bd1      	ldr	r3, [pc, #836]	; (8002888 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a0>)
 8002542:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit & ~reg;
 800254e:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8002552:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002556:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit | reg;
 800255a:	f8d3 0600 	ldr.w	r0, [r3, #1536]	; 0x600
 800255e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002560:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002564:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002568:	6871      	ldr	r1, [r6, #4]
 800256a:	6830      	ldr	r0, [r6, #0]
 800256c:	aa0e      	add	r2, sp, #56	; 0x38
 800256e:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002570:	4ac6      	ldr	r2, [pc, #792]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8002572:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002576:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002578:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 800257c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002588:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002594:	68b2      	ldr	r2, [r6, #8]
 8002596:	2a00      	cmp	r2, #0
 8002598:	f040 827d 	bne.w	8002a96 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ae>
		bit = bit & ~reg;
 800259c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80025a0:	f022 0201 	bic.w	r2, r2, #1
		bit = bit | reg;
 80025a4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80025a8:	7c32      	ldrb	r2, [r6, #16]
 80025aa:	2a00      	cmp	r2, #0
 80025ac:	f000 8278 	beq.w	8002aa0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5b8>
 80025b0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80025b4:	f042 0201 	orr.w	r2, r2, #1
		bit = bit & ~reg;
 80025b8:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80025bc:	6828      	ldr	r0, [r5, #0]
 80025be:	6869      	ldr	r1, [r5, #4]
 80025c0:	ab0e      	add	r3, sp, #56	; 0x38
 80025c2:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80025c4:	4bb1      	ldr	r3, [pc, #708]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 80025c6:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80025ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80025cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80025d0:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
 80025d4:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80025d8:	f042 0202 	orr.w	r2, r2, #2
 80025dc:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80025e0:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80025e4:	f042 0202 	orr.w	r2, r2, #2
 80025e8:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80025ec:	68aa      	ldr	r2, [r5, #8]
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	f040 825b 	bne.w	8002aaa <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5c2>
		bit = bit & ~reg;
 80025f4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80025f8:	f022 0202 	bic.w	r2, r2, #2
		bit = bit | reg;
 80025fc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002600:	7c2a      	ldrb	r2, [r5, #16]
 8002602:	2a00      	cmp	r2, #0
 8002604:	f000 8256 	beq.w	8002ab4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5cc>
 8002608:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800260c:	f042 0202 	orr.w	r2, r2, #2
		bit = bit & ~reg;
 8002610:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002614:	6820      	ldr	r0, [r4, #0]
 8002616:	6861      	ldr	r1, [r4, #4]
 8002618:	ab0e      	add	r3, sp, #56	; 0x38
 800261a:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800261c:	4b9b      	ldr	r3, [pc, #620]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 800261e:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002624:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002628:	f8c3 2654 	str.w	r2, [r3, #1620]	; 0x654
 800262c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002630:	f042 0204 	orr.w	r2, r2, #4
 8002634:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002638:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800263c:	f042 0204 	orr.w	r2, r2, #4
 8002640:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002644:	68a2      	ldr	r2, [r4, #8]
 8002646:	2a00      	cmp	r2, #0
 8002648:	f040 8239 	bne.w	8002abe <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5d6>
		bit = bit & ~reg;
 800264c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002650:	f022 0204 	bic.w	r2, r2, #4
		bit = bit | reg;
 8002654:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002658:	7c22      	ldrb	r2, [r4, #16]
 800265a:	2a00      	cmp	r2, #0
 800265c:	f000 8234 	beq.w	8002ac8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5e0>
 8002660:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002664:	f042 0204 	orr.w	r2, r2, #4
		bit = bit & ~reg;
 8002668:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800266c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800266e:	ab0e      	add	r3, sp, #56	; 0x38
 8002670:	6810      	ldr	r0, [r2, #0]
 8002672:	6851      	ldr	r1, [r2, #4]
 8002674:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8002678:	f8c3 0258 	str.w	r0, [r3, #600]	; 0x258
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800267c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800267e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002682:	f8c3 265c 	str.w	r2, [r3, #1628]	; 0x65c
 8002686:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800268a:	f042 0208 	orr.w	r2, r2, #8
 800268e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002692:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800269e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80026a0:	6892      	ldr	r2, [r2, #8]
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	f040 8215 	bne.w	8002ad2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ea>
		bit = bit & ~reg;
 80026a8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80026ac:	f022 0208 	bic.w	r2, r2, #8
		bit = bit | reg;
 80026b0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80026b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80026b6:	7c12      	ldrb	r2, [r2, #16]
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	f000 820f 	beq.w	8002adc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5f4>
 80026be:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80026c2:	f042 0208 	orr.w	r2, r2, #8
		bit = bit & ~reg;
 80026c6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80026ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80026cc:	ab0e      	add	r3, sp, #56	; 0x38
 80026ce:	6810      	ldr	r0, [r2, #0]
 80026d0:	6851      	ldr	r1, [r2, #4]
 80026d2:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80026d4:	4b6d      	ldr	r3, [pc, #436]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 80026d6:	f8c3 0260 	str.w	r0, [r3, #608]	; 0x260
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80026da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80026dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026e0:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
 80026e4:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80026e8:	f042 0210 	orr.w	r2, r2, #16
 80026ec:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80026f0:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80026f4:	f042 0210 	orr.w	r2, r2, #16
 80026f8:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80026fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80026fe:	6892      	ldr	r2, [r2, #8]
 8002700:	2a00      	cmp	r2, #0
 8002702:	f040 81f0 	bne.w	8002ae6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5fe>
		bit = bit & ~reg;
 8002706:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800270a:	f022 0210 	bic.w	r2, r2, #16
		bit = bit | reg;
 800270e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002712:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002714:	7c12      	ldrb	r2, [r2, #16]
 8002716:	2a00      	cmp	r2, #0
 8002718:	f000 81ea 	beq.w	8002af0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x608>
 800271c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002720:	f042 0210 	orr.w	r2, r2, #16
		bit = bit & ~reg;
 8002724:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002728:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800272a:	ab0e      	add	r3, sp, #56	; 0x38
 800272c:	6810      	ldr	r0, [r2, #0]
 800272e:	6851      	ldr	r1, [r2, #4]
 8002730:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002732:	4b56      	ldr	r3, [pc, #344]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8002734:	f8c3 0268 	str.w	r0, [r3, #616]	; 0x268
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800273a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800273e:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8002742:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800274e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002752:	f042 0220 	orr.w	r2, r2, #32
 8002756:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800275a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800275c:	6892      	ldr	r2, [r2, #8]
 800275e:	2a00      	cmp	r2, #0
 8002760:	f040 81cb 	bne.w	8002afa <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x612>
		bit = bit & ~reg;
 8002764:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002768:	f022 0220 	bic.w	r2, r2, #32
		bit = bit | reg;
 800276c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002770:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002772:	7c12      	ldrb	r2, [r2, #16]
 8002774:	2a00      	cmp	r2, #0
 8002776:	f000 81c5 	beq.w	8002b04 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x61c>
 800277a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800277e:	f042 0220 	orr.w	r2, r2, #32
		bit = bit & ~reg;
 8002782:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002786:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002788:	ab0e      	add	r3, sp, #56	; 0x38
 800278a:	6810      	ldr	r0, [r2, #0]
 800278c:	6851      	ldr	r1, [r2, #4]
 800278e:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002790:	4b3e      	ldr	r3, [pc, #248]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8002792:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002798:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800279c:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
 80027a0:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80027a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a8:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80027ac:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80027b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b4:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80027b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80027ba:	6892      	ldr	r2, [r2, #8]
 80027bc:	2a00      	cmp	r2, #0
 80027be:	f040 81a6 	bne.w	8002b0e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x626>
		bit = bit & ~reg;
 80027c2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		bit = bit | reg;
 80027ca:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80027ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80027d0:	7c12      	ldrb	r2, [r2, #16]
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	f000 81a0 	beq.w	8002b18 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x630>
 80027d8:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80027dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		bit = bit & ~reg;
 80027e0:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80027e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80027e6:	ab0e      	add	r3, sp, #56	; 0x38
 80027e8:	6810      	ldr	r0, [r2, #0]
 80027ea:	6851      	ldr	r1, [r2, #4]
 80027ec:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 80027f0:	f8c3 0278 	str.w	r0, [r3, #632]	; 0x278
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80027f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80027f6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80027fa:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 80027fe:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002806:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800280a:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800280e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002812:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002816:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002818:	6892      	ldr	r2, [r2, #8]
 800281a:	2a00      	cmp	r2, #0
 800281c:	f040 8181 	bne.w	8002b22 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x63a>
		bit = bit & ~reg;
 8002820:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
		bit = bit | reg;
 8002828:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 800282c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800282e:	7c12      	ldrb	r2, [r2, #16]
 8002830:	2a00      	cmp	r2, #0
 8002832:	f000 817b 	beq.w	8002b2c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x644>
 8002836:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800283a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
		bit = bit & ~reg;
 800283e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002842:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002844:	ab0e      	add	r3, sp, #56	; 0x38
 8002846:	6810      	ldr	r0, [r2, #0]
 8002848:	6851      	ldr	r1, [r2, #4]
 800284a:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 800284e:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002854:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002858:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
 800285c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002864:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002868:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800286c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002870:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002874:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002876:	6892      	ldr	r2, [r2, #8]
 8002878:	2a00      	cmp	r2, #0
 800287a:	f040 815c 	bne.w	8002b36 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x64e>
		bit = bit & ~reg;
 800287e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002886:	e003      	b.n	8002890 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
 8002888:	40006000 	.word	0x40006000
 800288c:	40006400 	.word	0x40006400
		bit = bit | reg;
 8002890:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002894:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002896:	7c12      	ldrb	r2, [r2, #16]
 8002898:	2a00      	cmp	r2, #0
 800289a:	f000 8151 	beq.w	8002b40 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x658>
 800289e:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		bit = bit & ~reg;
 80028a6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80028aa:	f8db 0000 	ldr.w	r0, [fp]
 80028ae:	f8db 1004 	ldr.w	r1, [fp, #4]
 80028b2:	ab0e      	add	r3, sp, #56	; 0x38
 80028b4:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80028b6:	4bbe      	ldr	r3, [pc, #760]	; (8002bb0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80028b8:	f8c3 0288 	str.w	r0, [r3, #648]	; 0x288
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80028bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80028be:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80028c2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
 80028c6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80028d2:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80028de:	f8db 2008 	ldr.w	r2, [fp, #8]
 80028e2:	2a00      	cmp	r2, #0
 80028e4:	f040 8131 	bne.w	8002b4a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x662>
		bit = bit & ~reg;
 80028e8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80028ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		bit = bit | reg;
 80028f0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80028f4:	f89b 2010 	ldrb.w	r2, [fp, #16]
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	f000 812b 	beq.w	8002b54 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x66c>
 80028fe:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		bit = bit & ~reg;
 8002906:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800290a:	f8da 0000 	ldr.w	r0, [sl]
 800290e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8002912:	ab0e      	add	r3, sp, #56	; 0x38
 8002914:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002916:	4ba6      	ldr	r3, [pc, #664]	; (8002bb0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002918:	f8c3 0290 	str.w	r0, [r3, #656]	; 0x290
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800291c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800291e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002922:	f8c3 2694 	str.w	r2, [r3, #1684]	; 0x694
 8002926:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800292a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800292e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002932:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800293a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800293e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8002942:	2a00      	cmp	r2, #0
 8002944:	f040 810b 	bne.w	8002b5e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x676>
		bit = bit & ~reg;
 8002948:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800294c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
		bit = bit | reg;
 8002950:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002954:	f89a 2010 	ldrb.w	r2, [sl, #16]
 8002958:	2a00      	cmp	r2, #0
 800295a:	f000 8105 	beq.w	8002b68 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x680>
 800295e:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002962:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
		bit = bit & ~reg;
 8002966:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800296a:	f8d9 0000 	ldr.w	r0, [r9]
 800296e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002972:	ab0e      	add	r3, sp, #56	; 0x38
 8002974:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002976:	4b8e      	ldr	r3, [pc, #568]	; (8002bb0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002978:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800297c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800297e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002982:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
 8002986:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002992:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800299e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80029a2:	2a00      	cmp	r2, #0
 80029a4:	f040 80e5 	bne.w	8002b72 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x68a>
		bit = bit & ~reg;
 80029a8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80029ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
		bit = bit | reg;
 80029b0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80029b4:	f899 2010 	ldrb.w	r2, [r9, #16]
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	f000 80df 	beq.w	8002b7c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x694>
 80029be:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
		bit = bit & ~reg;
 80029c6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80029ca:	f8d8 0000 	ldr.w	r0, [r8]
 80029ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80029d2:	ab0e      	add	r3, sp, #56	; 0x38
 80029d4:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80029d8:	f8c3 02a0 	str.w	r0, [r3, #672]	; 0x2a0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80029dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80029de:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80029e2:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
 80029e6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80029ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ee:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80029f2:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80029f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029fa:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80029fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	f040 80bf 	bne.w	8002b86 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x69e>
		bit = bit & ~reg;
 8002a08:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
		bit = bit | reg;
 8002a10:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002a14:	f898 2010 	ldrb.w	r2, [r8, #16]
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	f000 80b9 	beq.w	8002b90 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6a8>
 8002a1e:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
		bit = bit & ~reg;
 8002a26:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002a2a:	6838      	ldr	r0, [r7, #0]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	ab0e      	add	r3, sp, #56	; 0x38
 8002a30:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002a34:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002a3a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002a3e:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
 8002a42:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a4a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002a4e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002a52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a56:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	f040 809c 	bne.w	8002b9a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6b2>
		bit = bit & ~reg;
 8002a62:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
		bit = bit | reg;
 8002a6a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002a6e:	7c3a      	ldrb	r2, [r7, #16]
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	f000 8097 	beq.w	8002ba4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6bc>
 8002a76:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002a7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		bit = bit & ~reg;
 8002a7e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8002a82:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6cc>)
 8002a84:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);

		// clear FINIT
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
	}
 8002a90:	b011      	add	sp, #68	; 0x44
 8002a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bit = bit | reg;
 8002a96:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	e581      	b.n	80025a4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xbc>
		bit = bit & ~reg;
 8002aa0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	e586      	b.n	80025b8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>
		bit = bit | reg;
 8002aaa:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002aae:	f042 0202 	orr.w	r2, r2, #2
 8002ab2:	e5a3      	b.n	80025fc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x114>
		bit = bit & ~reg;
 8002ab4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002ab8:	f022 0202 	bic.w	r2, r2, #2
 8002abc:	e5a8      	b.n	8002610 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x128>
		bit = bit | reg;
 8002abe:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002ac2:	f042 0204 	orr.w	r2, r2, #4
 8002ac6:	e5c5      	b.n	8002654 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x16c>
		bit = bit & ~reg;
 8002ac8:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002acc:	f022 0204 	bic.w	r2, r2, #4
 8002ad0:	e5ca      	b.n	8002668 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x180>
		bit = bit | reg;
 8002ad2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	e5e9      	b.n	80026b0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c8>
		bit = bit & ~reg;
 8002adc:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002ae0:	f022 0208 	bic.w	r2, r2, #8
 8002ae4:	e5ef      	b.n	80026c6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1de>
		bit = bit | reg;
 8002ae6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002aea:	f042 0210 	orr.w	r2, r2, #16
 8002aee:	e60e      	b.n	800270e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x226>
		bit = bit & ~reg;
 8002af0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002af4:	f022 0210 	bic.w	r2, r2, #16
 8002af8:	e614      	b.n	8002724 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x23c>
		bit = bit | reg;
 8002afa:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002afe:	f042 0220 	orr.w	r2, r2, #32
 8002b02:	e633      	b.n	800276c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x284>
		bit = bit & ~reg;
 8002b04:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b08:	f022 0220 	bic.w	r2, r2, #32
 8002b0c:	e639      	b.n	8002782 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x29a>
		bit = bit | reg;
 8002b0e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b16:	e658      	b.n	80027ca <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2e2>
		bit = bit & ~reg;
 8002b18:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b20:	e65e      	b.n	80027e0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2f8>
		bit = bit | reg;
 8002b22:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b2a:	e67d      	b.n	8002828 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x340>
		bit = bit & ~reg;
 8002b2c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b34:	e683      	b.n	800283e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x356>
		bit = bit | reg;
 8002b36:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3e:	e6a7      	b.n	8002890 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
		bit = bit & ~reg;
 8002b40:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b48:	e6ad      	b.n	80028a6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3be>
		bit = bit | reg;
 8002b4a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b52:	e6cd      	b.n	80028f0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x408>
		bit = bit & ~reg;
 8002b54:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b5c:	e6d3      	b.n	8002906 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x41e>
		bit = bit | reg;
 8002b5e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b66:	e6f3      	b.n	8002950 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x468>
		bit = bit & ~reg;
 8002b68:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b70:	e6f9      	b.n	8002966 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x47e>
		bit = bit | reg;
 8002b72:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7a:	e719      	b.n	80029b0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4c8>
		bit = bit & ~reg;
 8002b7c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b84:	e71f      	b.n	80029c6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4de>
		bit = bit | reg;
 8002b86:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b8e:	e73f      	b.n	8002a10 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x528>
		bit = bit & ~reg;
 8002b90:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002b94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b98:	e745      	b.n	8002a26 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x53e>
		bit = bit | reg;
 8002b9a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002b9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba2:	e762      	b.n	8002a6a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x582>
		bit = bit & ~reg;
 8002ba4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bac:	e767      	b.n	8002a7e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x596>
 8002bae:	bf00      	nop
 8002bb0:	40006400 	.word	0x40006400
 8002bb4:	40006000 	.word	0x40006000

08002bb8 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_>:
				const auto&& expr = (n + end - begin) % n;
				return expr ? expr : n;
			}
		}

		constexpr void push(const Elem& x) noexcept override
 8002bb8:	b530      	push	{r4, r5, lr}
		{
			if(end == n) end = begin;
 8002bba:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74

			buffer[end] = x;
 8002bbe:	240b      	movs	r4, #11
			if(end == n) end = begin;
 8002bc0:	2b0a      	cmp	r3, #10
 8002bc2:	bf08      	it	eq
 8002bc4:	6782      	streq	r2, [r0, #120]	; 0x78
			buffer[end] = x;
 8002bc6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002bc8:	680d      	ldr	r5, [r1, #0]
			
			if(end == n - 1) end = 0;
 8002bca:	2b09      	cmp	r3, #9
			buffer[end] = x;
 8002bcc:	fb04 0403 	mla	r4, r4, r3, r0
			if(end == n - 1) end = 0;
 8002bd0:	bf08      	it	eq
 8002bd2:	2300      	moveq	r3, #0
			buffer[end] = x;
 8002bd4:	6065      	str	r5, [r4, #4]
 8002bd6:	684d      	ldr	r5, [r1, #4]
			else ++end;
 8002bd8:	bf18      	it	ne
 8002bda:	3301      	addne	r3, #1
			buffer[end] = x;
 8002bdc:	60a5      	str	r5, [r4, #8]
 8002bde:	890d      	ldrh	r5, [r1, #8]

			if(begin == end)
 8002be0:	429a      	cmp	r2, r3
			buffer[end] = x;
 8002be2:	81a5      	strh	r5, [r4, #12]
 8002be4:	7a89      	ldrb	r1, [r1, #10]
 8002be6:	73a1      	strb	r1, [r4, #14]
 8002be8:	6783      	str	r3, [r0, #120]	; 0x78
			if(begin == end)
 8002bea:	d105      	bne.n	8002bf8 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_+0x40>
			{
				if(begin == n - 1) begin = 0;
 8002bec:	2a09      	cmp	r2, #9
 8002bee:	bf0b      	itete	eq
 8002bf0:	2300      	moveq	r3, #0
				else ++begin;
 8002bf2:	3201      	addne	r2, #1
				if(begin == n - 1) begin = 0;
 8002bf4:	6743      	streq	r3, [r0, #116]	; 0x74
				else ++begin;
 8002bf6:	6742      	strne	r2, [r0, #116]	; 0x74
			}
		}
 8002bf8:	bd30      	pop	{r4, r5, pc}

08002bfa <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_>:
		constexpr void push(const Elem& x) noexcept override
 8002bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n) end = begin;
 8002bfc:	e9d0 c379 	ldrd	ip, r3, [r0, #484]	; 0x1e4
			buffer[end] = x;
 8002c00:	2418      	movs	r4, #24
			if(end == n) end = begin;
 8002c02:	2b14      	cmp	r3, #20
 8002c04:	bf08      	it	eq
 8002c06:	f8c0 c1e8 	streq.w	ip, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 8002c0a:	460d      	mov	r5, r1
			buffer[end] = x;
 8002c0c:	f8d0 71e8 	ldr.w	r7, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 8002c10:	4606      	mov	r6, r0
			if(end == n - 1) end = 0;
 8002c12:	2f13      	cmp	r7, #19
			buffer[end] = x;
 8002c14:	fb04 0407 	mla	r4, r4, r7, r0
 8002c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
			if(end == n - 1) end = 0;
 8002c1a:	bf08      	it	eq
 8002c1c:	2700      	moveq	r7, #0
			buffer[end] = x;
 8002c1e:	f104 0404 	add.w	r4, r4, #4
 8002c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			else ++end;
 8002c24:	bf18      	it	ne
 8002c26:	3701      	addne	r7, #1
			if(begin == end)
 8002c28:	45bc      	cmp	ip, r7
			buffer[end] = x;
 8002c2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c32:	f8c6 71e8 	str.w	r7, [r6, #488]	; 0x1e8
			if(begin == end)
 8002c36:	d107      	bne.n	8002c48 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_+0x4e>
				if(begin == n - 1) begin = 0;
 8002c38:	f1bc 0f13 	cmp.w	ip, #19
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2300      	moveq	r3, #0
				else ++begin;
 8002c40:	f10c 0301 	addne.w	r3, ip, #1
 8002c44:	f8c6 31e4 	str.w	r3, [r6, #484]	; 0x1e4
		}
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c4a <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv>:
			if(end == n) return 0;
 8002c4a:	f8d0 31e8 	ldr.w	r3, [r0, #488]	; 0x1e8
 8002c4e:	2b14      	cmp	r3, #20
 8002c50:	d00c      	beq.n	8002c6c <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv+0x22>
				const auto&& expr = (n + end - begin) % n;
 8002c52:	f8d0 01e4 	ldr.w	r0, [r0, #484]	; 0x1e4
 8002c56:	3314      	adds	r3, #20
 8002c58:	1a18      	subs	r0, r3, r0
 8002c5a:	2314      	movs	r3, #20
 8002c5c:	fbb0 f2f3 	udiv	r2, r0, r3
 8002c60:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 8002c64:	2800      	cmp	r0, #0
 8002c66:	bf08      	it	eq
 8002c68:	4618      	moveq	r0, r3
 8002c6a:	4770      	bx	lr
			if(end == n) return 0;
 8002c6c:	2000      	movs	r0, #0
		}
 8002c6e:	4770      	bx	lr

08002c70 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE5clearEv>:
		}

		constexpr void clear() noexcept
		{
			begin = 0;
			end = n;
 8002c70:	2200      	movs	r2, #0
 8002c72:	2314      	movs	r3, #20
 8002c74:	e9c0 2379 	strd	r2, r3, [r0, #484]	; 0x1e4
		}
 8002c78:	4770      	bx	lr

08002c7a <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv>:
			if(end == n) return 0;
 8002c7a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002c7c:	2b0a      	cmp	r3, #10
 8002c7e:	d00b      	beq.n	8002c98 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv+0x1e>
				const auto&& expr = (n + end - begin) % n;
 8002c80:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002c82:	330a      	adds	r3, #10
 8002c84:	1a18      	subs	r0, r3, r0
 8002c86:	230a      	movs	r3, #10
 8002c88:	fbb0 f2f3 	udiv	r2, r0, r3
 8002c8c:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 8002c90:	2800      	cmp	r0, #0
 8002c92:	bf08      	it	eq
 8002c94:	4618      	moveq	r0, r3
 8002c96:	4770      	bx	lr
			if(end == n) return 0;
 8002c98:	2000      	movs	r0, #0
		}
 8002c9a:	4770      	bx	lr

08002c9c <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE5clearEv>:
			end = n;
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	e9c0 231d 	strd	r2, r3, [r0, #116]	; 0x74
		}
 8002ca4:	4770      	bx	lr

08002ca6 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 8002ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 8002ca8:	f8d1 e1e8 	ldr.w	lr, [r1, #488]	; 0x1e8
		constexpr std::optional<Elem> pop() noexcept
 8002cac:	4684      	mov	ip, r0
			if(end == n)
 8002cae:	f1be 0f14 	cmp.w	lr, #20
		constexpr std::optional<Elem> pop() noexcept
 8002cb2:	460e      	mov	r6, r1
 8002cb4:	b087      	sub	sp, #28
			if(end == n)
 8002cb6:	d105      	bne.n	8002cc4 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x1e>
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 8002cb8:	2300      	movs	r3, #0
		}
 8002cba:	4660      	mov	r0, ip

      template<typename... _Args>
	constexpr
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
	  _M_engaged(true)
 8002cbc:	f88c 3018 	strb.w	r3, [ip, #24]
 8002cc0:	b007      	add	sp, #28
 8002cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 8002cc4:	2418      	movs	r4, #24
 8002cc6:	466d      	mov	r5, sp
 8002cc8:	f8d1 71e4 	ldr.w	r7, [r1, #484]	; 0x1e4
			if(begin == n - 1) begin = 0;
 8002ccc:	2f13      	cmp	r7, #19
			Elem ret = buffer[begin];
 8002cce:	fb04 1407 	mla	r4, r4, r7, r1
			if(begin == n - 1) begin = 0;
 8002cd2:	bf08      	it	eq
 8002cd4:	2700      	moveq	r7, #0
			Elem ret = buffer[begin];
 8002cd6:	f104 0404 	add.w	r4, r4, #4
 8002cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cde:	e894 0003 	ldmia.w	r4, {r0, r1}
			else ++begin;
 8002ce2:	bf18      	it	ne
 8002ce4:	3701      	addne	r7, #1
			if(begin == end)
 8002ce6:	45be      	cmp	lr, r7
			Elem ret = buffer[begin];
 8002ce8:	e885 0003 	stmia.w	r5, {r0, r1}
				end = n;
 8002cec:	bf08      	it	eq
 8002cee:	2314      	moveq	r3, #20
	  constexpr _Storage() noexcept : _M_empty() { }

	  template<typename... _Args>
	    constexpr
	    _Storage(in_place_t, _Args&&... __args)
	    : _M_value(std::forward<_Args>(__args)...)
 8002cf0:	4664      	mov	r4, ip
 8002cf2:	466d      	mov	r5, sp
 8002cf4:	bf08      	it	eq
 8002cf6:	f8c6 31e8 	streq.w	r3, [r6, #488]	; 0x1e8
 8002cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfe:	e895 0003 	ldmia.w	r5, {r0, r1}
	  _M_engaged(true)
 8002d02:	2301      	movs	r3, #1
	    : _M_value(std::forward<_Args>(__args)...)
 8002d04:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d08:	f8c6 71e4 	str.w	r7, [r6, #484]	; 0x1e4
 8002d0c:	e7d5      	b.n	8002cba <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x14>

08002d0e <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 8002d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 8002d10:	6f8f      	ldr	r7, [r1, #120]	; 0x78
		constexpr std::optional<Elem> pop() noexcept
 8002d12:	4603      	mov	r3, r0
			if(end == n)
 8002d14:	2f0a      	cmp	r7, #10
		constexpr std::optional<Elem> pop() noexcept
 8002d16:	460a      	mov	r2, r1
 8002d18:	b085      	sub	sp, #20
			if(end == n)
 8002d1a:	d104      	bne.n	8002d26 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x18>
      _Optional_payload_base() = default;
 8002d1c:	2200      	movs	r2, #0
		}
 8002d1e:	4618      	mov	r0, r3
	  _M_engaged(true)
 8002d20:	72da      	strb	r2, [r3, #11]
 8002d22:	b005      	add	sp, #20
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 8002d26:	260b      	movs	r6, #11
 8002d28:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8002d2a:	ad01      	add	r5, sp, #4
			if(begin == n - 1) begin = 0;
 8002d2c:	2c09      	cmp	r4, #9
			Elem ret = buffer[begin];
 8002d2e:	fb06 1604 	mla	r6, r6, r4, r1
			if(begin == n - 1) begin = 0;
 8002d32:	bf08      	it	eq
 8002d34:	2400      	moveq	r4, #0
			Elem ret = buffer[begin];
 8002d36:	6870      	ldr	r0, [r6, #4]
 8002d38:	68b1      	ldr	r1, [r6, #8]
			else ++begin;
 8002d3a:	bf18      	it	ne
 8002d3c:	3401      	addne	r4, #1
			Elem ret = buffer[begin];
 8002d3e:	c503      	stmia	r5!, {r0, r1}
 8002d40:	7bb1      	ldrb	r1, [r6, #14]
			if(begin == end)
 8002d42:	42a7      	cmp	r7, r4
			Elem ret = buffer[begin];
 8002d44:	70a9      	strb	r1, [r5, #2]
				end = n;
 8002d46:	bf08      	it	eq
 8002d48:	210a      	moveq	r1, #10
			Elem ret = buffer[begin];
 8002d4a:	89b0      	ldrh	r0, [r6, #12]
				end = n;
 8002d4c:	bf08      	it	eq
 8002d4e:	6791      	streq	r1, [r2, #120]	; 0x78
			Elem ret = buffer[begin];
 8002d50:	8028      	strh	r0, [r5, #0]
 8002d52:	6754      	str	r4, [r2, #116]	; 0x74
	    : _M_value(std::forward<_Args>(__args)...)
 8002d54:	aa01      	add	r2, sp, #4
 8002d56:	ca03      	ldmia	r2!, {r0, r1}
 8002d58:	6059      	str	r1, [r3, #4]
 8002d5a:	8811      	ldrh	r1, [r2, #0]
 8002d5c:	7892      	ldrb	r2, [r2, #2]
 8002d5e:	6018      	str	r0, [r3, #0]
 8002d60:	729a      	strb	r2, [r3, #10]
 8002d62:	8119      	strh	r1, [r3, #8]
	  _M_engaged(true)
 8002d64:	2201      	movs	r2, #1
 8002d66:	e7da      	b.n	8002d1e <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x10>

08002d68 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE>:
	public:
		TxUnit(const u32 base_id) noexcept:
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
		{}

		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			auto for_body_par_id = [this, &pillarbox]<std::underlying_type_t<OffsetIdsEnum> offset_id, std::underlying_type_t<OffsetIdsEnum> n>(CompileForIndex<offset_id, n>) noexcept
			{
				CompileForIndex<offset_id + 1, n> ret{};

				ret.is_breaked = std::get<offset_id>(tx_ids).transmit(pillarbox, this->base_id);
 8002d6c:	6885      	ldr	r5, [r0, #8]
		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 8002d6e:	460e      	mov	r6, r1
	{
		using Impl = TxIdImplInjectorAdaptor<offset_id>;
		SafeCircularQueue<MpuSpecific::TxFrame, Impl::queue_size()> queue{};

		// Mailboxが満杯になった(あるいはエラーが発生した)らfalse, そうでなければtrueを返す.
		bool transmit(MpuSpecific::Pillarbox& pillarbox, const u32 base_id) noexcept
 8002d70:	ea5f 28d5 	movs.w	r8, r5, lsr #11
 8002d74:	bf14      	ite	ne
 8002d76:	2704      	movne	r7, #4
 8002d78:	2700      	moveq	r7, #0
 8002d7a:	b08a      	sub	sp, #40	; 0x28
		{
			while(true)
			{
				if(pillarbox.not_full())
				{
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8002d7c:	f100 040c 	add.w	r4, r0, #12

		void post(const u32 id, TxFrame& frame) noexcept
		{
			CAN_TxHeaderTypeDef tx_header
			{
				.StdId = id & max_std_id,
 8002d80:	f3c5 050a 	ubfx	r5, r5, #0, #11
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
		}

		bool not_full() const noexcept
		{
			return HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0;
 8002d84:	6830      	ldr	r0, [r6, #0]
 8002d86:	f002 f8ae 	bl	8004ee6 <HAL_CAN_GetTxMailboxesFreeLevel>
				if(pillarbox.not_full())
 8002d8a:	b308      	cbz	r0, 8002dd0 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	a801      	add	r0, sp, #4
 8002d90:	f7ff ffbd 	bl	8002d0e <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>
 8002d94:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002d98:	b1d3      	cbz	r3, 8002dd0 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 8002d9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8002d9e:	6830      	ldr	r0, [r6, #0]
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2302      	movne	r3, #2
 8002da6:	2300      	moveq	r3, #0
			};
 8002da8:	9307      	str	r3, [sp, #28]
				.DLC = frame.header.dlc,
 8002daa:	f89d 3004 	ldrb.w	r3, [sp, #4]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8002dae:	f10d 0207 	add.w	r2, sp, #7
				.DLC = frame.header.dlc,
 8002db2:	9308      	str	r3, [sp, #32]
			};
 8002db4:	f89d 3006 	ldrb.w	r3, [sp, #6]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8002db8:	a904      	add	r1, sp, #16
			};
 8002dba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			u32 mailbox{};
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8002dc2:	466b      	mov	r3, sp
			};
 8002dc4:	e9cd 5804 	strd	r5, r8, [sp, #16]
 8002dc8:	9706      	str	r7, [sp, #24]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8002dca:	f002 f83e 	bl	8004e4a <HAL_CAN_AddTxMessage>
 8002dce:	e7d9      	b.n	8002d84 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x1c>
				return ret;
			};

			compile_for(for_body_par_id, CompileForIndex<static_cast<std::underlying_type_t<OffsetIdsEnum>>(0), to_underlying(OffsetIdsEnum::n)>{});
		}
 8002dd0:	b00a      	add	sp, #40	; 0x28
 8002dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002dd6 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>:
    __insertion_sort(_RandomAccessIterator __first,
 8002dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dd8:	460e      	mov	r6, r1
 8002dda:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 8002ddc:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8002dde:	4604      	mov	r4, r0
 8002de0:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 8002de4:	d01d      	beq.n	8002e22 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002de6:	1d05      	adds	r5, r0, #4
 8002de8:	42b5      	cmp	r5, r6
 8002dea:	d01a      	beq.n	8002e22 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
 8002dec:	682f      	ldr	r7, [r5, #0]
			}
		}

		void sort_tx_unit() noexcept
		{
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	68b9      	ldr	r1, [r7, #8]
	  if (__comp(__i, __first))
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4299      	cmp	r1, r3
 8002df6:	d209      	bcs.n	8002e0c <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x36>
	  if (_Num)
 8002df8:	42a5      	cmp	r5, r4
 8002dfa:	d004      	beq.n	8002e06 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x30>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	1b2a      	subs	r2, r5, r4
 8002e00:	1d20      	adds	r0, r4, #4
 8002e02:	f003 ffa1 	bl	8006d48 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 8002e06:	6027      	str	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002e08:	3504      	adds	r5, #4
 8002e0a:	e7ed      	b.n	8002de8 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x12>
	  if (__comp(__i, __first))
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	f853 2c04 	ldr.w	r2, [r3, #-4]
      while (__comp(__val, __next))
 8002e12:	6890      	ldr	r0, [r2, #8]
 8002e14:	4281      	cmp	r1, r0
 8002e16:	d202      	bcs.n	8002e1e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x48>
	  *__last = _GLIBCXX_MOVE(*__next);
 8002e18:	f843 2904 	str.w	r2, [r3], #-4
      while (__comp(__val, __next))
 8002e1c:	e7f7      	b.n	8002e0e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 8002e1e:	601f      	str	r7, [r3, #0]
    }
 8002e20:	e7f2      	b.n	8002e08 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x32>
    }
 8002e22:	b003      	add	sp, #12
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e26 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8002e26:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8002e28:	1e54      	subs	r4, r2, #1
 8002e2a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8002e2e:	1066      	asrs	r6, r4, #1
		     __first + (__secondChild - 1)))
 8002e30:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
      while (__secondChild < (__len - 1) / 2)
 8002e34:	460c      	mov	r4, r1
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	dd14      	ble.n	8002e64 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x3e>
	  __secondChild = 2 * (__secondChild + 1);
 8002e3a:	1c65      	adds	r5, r4, #1
 8002e3c:	006f      	lsls	r7, r5, #1
		     __first + (__secondChild - 1)))
 8002e3e:	eb0c 0545 	add.w	r5, ip, r5, lsl #1
 8002e42:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	  if (__comp(__first + __secondChild,
 8002e46:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002e4a:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8002e4e:	68ad      	ldr	r5, [r5, #8]
 8002e50:	45ae      	cmp	lr, r5
	    __secondChild--;
 8002e52:	bf88      	it	hi
 8002e54:	f107 37ff 	addhi.w	r7, r7, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8002e58:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8002e5c:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	  __holeIndex = __secondChild;
 8002e60:	463c      	mov	r4, r7
      while (__secondChild < (__len - 1) / 2)
 8002e62:	e7e8      	b.n	8002e36 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x10>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8002e64:	07d5      	lsls	r5, r2, #31
 8002e66:	d40e      	bmi.n	8002e86 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
 8002e68:	3a02      	subs	r2, #2
 8002e6a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002e6e:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8002e72:	d108      	bne.n	8002e86 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
	  __secondChild = 2 * (__secondChild + 1);
 8002e74:	1c62      	adds	r2, r4, #1
 8002e76:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8002e78:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002e7c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8002e80:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
	  __holeIndex = __secondChild - 1;
 8002e84:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8002e86:	1e62      	subs	r2, r4, #1
 8002e88:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002e8c:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8002e8e:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8002e90:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002e94:	eb00 0584 	add.w	r5, r0, r4, lsl #2
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8002e98:	da0d      	bge.n	8002eb6 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
 8002e9a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8002e9e:	689e      	ldr	r6, [r3, #8]
 8002ea0:	68a7      	ldr	r7, [r4, #8]
 8002ea2:	42b7      	cmp	r7, r6
 8002ea4:	d207      	bcs.n	8002eb6 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8002ea6:	f840 400c 	str.w	r4, [r0, ip]
	  __parent = (__holeIndex - 1) / 2;
 8002eaa:	1e54      	subs	r4, r2, #1
 8002eac:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8002eb0:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8002eb2:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8002eb4:	e7eb      	b.n	8002e8e <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x68>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8002eb6:	602b      	str	r3, [r5, #0]
    }
 8002eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eba <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8002eba:	b082      	sub	sp, #8
 8002ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	460d      	mov	r5, r1
 8002ec4:	4616      	mov	r6, r2
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8002eca:	1d07      	adds	r7, r0, #4
      while (__last - __first > int(_S_threshold))
 8002ecc:	1b2b      	subs	r3, r5, r4
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	dd2c      	ble.n	8002f2c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x72>
      const _DistanceType __len = __last - __first;
 8002ed2:	ea4f 08a3 	mov.w	r8, r3, asr #2
	  if (__depth_limit == 0)
 8002ed6:	bb76      	cbnz	r6, 8002f36 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x7c>
 8002ed8:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	f10d 0910 	add.w	r9, sp, #16
 8002ee2:	e887 0003 	stmia.w	r7, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8002ee6:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8002eea:	f1a8 0602 	sub.w	r6, r8, #2
 8002eee:	1076      	asrs	r6, r6, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8002ef0:	e899 0003 	ldmia.w	r9, {r0, r1}
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002efa:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8002efe:	4631      	mov	r1, r6
 8002f00:	4620      	mov	r0, r4
 8002f02:	f7ff ff90 	bl	8002e26 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
	  if (__parent == 0)
 8002f06:	b10e      	cbz	r6, 8002f0c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
	  __parent--;
 8002f08:	3e01      	subs	r6, #1
      while (true)
 8002f0a:	e7f1      	b.n	8002ef0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x36>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8002f0c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
      *__result = _GLIBCXX_MOVE(*__first);
 8002f10:	6822      	ldr	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8002f12:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8002f14:	e897 0003 	ldmia.w	r7, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8002f18:	602a      	str	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8002f1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002f1e:	10b2      	asrs	r2, r6, #2
 8002f20:	2100      	movs	r1, #0
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff ff7f 	bl	8002e26 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
      while (__last - __first > 1)
 8002f28:	2e04      	cmp	r6, #4
 8002f2a:	dcef      	bgt.n	8002f0c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
    }
 8002f2c:	b007      	add	sp, #28
 8002f2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f32:	b002      	add	sp, #8
 8002f34:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002f36:	10db      	asrs	r3, r3, #3
 8002f38:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002f3c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8002f40:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8002f44:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002f48:	f855 cc04 	ldr.w	ip, [r5, #-4]
      if (__comp(__a, __b))
 8002f4c:	45f1      	cmp	r9, lr
 8002f4e:	f8dc 1008 	ldr.w	r1, [ip, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002f52:	6822      	ldr	r2, [r4, #0]
	  --__depth_limit;
 8002f54:	f106 36ff 	add.w	r6, r6, #4294967295
      if (__comp(__a, __b))
 8002f58:	d22a      	bcs.n	8002fb0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xf6>
	  if (__comp(__b, __c))
 8002f5a:	458e      	cmp	lr, r1
 8002f5c:	d221      	bcs.n	8002fa2 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xe8>
      __a = _GLIBCXX_MOVE(__b);
 8002f5e:	6020      	str	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002f60:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8002f64:	463a      	mov	r2, r7
      while (__last - __first > int(_S_threshold))
 8002f66:	462b      	mov	r3, r5
 8002f68:	6820      	ldr	r0, [r4, #0]
 8002f6a:	4690      	mov	r8, r2
 8002f6c:	f852 1b04 	ldr.w	r1, [r2], #4
 8002f70:	f8d0 9008 	ldr.w	r9, [r0, #8]
	  while (__comp(__first, __pivot))
 8002f74:	6888      	ldr	r0, [r1, #8]
 8002f76:	4548      	cmp	r0, r9
 8002f78:	d3f6      	bcc.n	8002f68 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>
	  --__last;
 8002f7a:	1f18      	subs	r0, r3, #4
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f850 e904 	ldr.w	lr, [r0], #-4
	  while (__comp(__pivot, __last))
 8002f82:	f8de c008 	ldr.w	ip, [lr, #8]
 8002f86:	45e1      	cmp	r9, ip
 8002f88:	d3f8      	bcc.n	8002f7c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xc2>
	  if (!(__first < __last))
 8002f8a:	4598      	cmp	r8, r3
 8002f8c:	d318      	bcc.n	8002fc0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x106>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8002f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f90:	4629      	mov	r1, r5
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4632      	mov	r2, r6
 8002f96:	4640      	mov	r0, r8
 8002f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f9a:	f7ff ff8e 	bl	8002eba <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      while (__last - __first > int(_S_threshold))
 8002f9e:	4645      	mov	r5, r8
 8002fa0:	e794      	b.n	8002ecc <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x12>
	  else if (__comp(__a, __c))
 8002fa2:	4589      	cmp	r9, r1
 8002fa4:	d206      	bcs.n	8002fb4 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8002fa6:	f8c4 c000 	str.w	ip, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8002faa:	f845 2c04 	str.w	r2, [r5, #-4]
    }
 8002fae:	e7d9      	b.n	8002f64 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__a, __c))
 8002fb0:	4589      	cmp	r9, r1
 8002fb2:	d202      	bcs.n	8002fba <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x100>
 8002fb4:	e9c4 8200 	strd	r8, r2, [r4]
 8002fb8:	e7d4      	b.n	8002f64 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__b, __c))
 8002fba:	458e      	cmp	lr, r1
 8002fbc:	d2cf      	bcs.n	8002f5e <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xa4>
 8002fbe:	e7f2      	b.n	8002fa6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xec>
      __a = _GLIBCXX_MOVE(__b);
 8002fc0:	f842 ec04 	str.w	lr, [r2, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
 8002fc4:	6019      	str	r1, [r3, #0]
	  while (__comp(__first, __pivot))
 8002fc6:	e7cf      	b.n	8002f68 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>

08002fc8 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>:
		u32 base_id;

	public:
		UnitBase(const u32 id_num, const u32 base_id) noexcept:
			id_num{id_num},
			base_id{base_id}
 8002fc8:	2301      	movs	r3, #1
		Transmitter(const std::same_as<u32> auto ... args) noexcept:
 8002fca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fce:	4604      	mov	r4, r0
 8002fd0:	e9c0 3101 	strd	r3, r1, [r0, #4]
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xc8>)
 8002fd6:	b089      	sub	sp, #36	; 0x24

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8002fd8:	227c      	movs	r2, #124	; 0x7c
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f840 3b0c 	str.w	r3, [r0], #12
 8002fe0:	f003 fecc 	bl	8006d7c <memset>
	class SafeCircularQueue final : SafeCircularQueueEraseN<Elem>
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xcc>)
 8002fe6:	226e      	movs	r2, #110	; 0x6e
 8002fe8:	2100      	movs	r1, #0
 8002fea:	60e3      	str	r3, [r4, #12]
 8002fec:	f104 0010 	add.w	r0, r4, #16
 8002ff0:	f003 fec4 	bl	8006d7c <memset>
 8002ff4:	230a      	movs	r3, #10
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 8002ff6:	f104 0688 	add.w	r6, r4, #136	; 0x88
      { return iterator(data() + _Nm); }
 8002ffa:	f104 078c 	add.w	r7, r4, #140	; 0x8c
				std::__lg(__last - __first) * 2,
 8002ffe:	eba7 0806 	sub.w	r8, r7, r6
 8003002:	ea4f 02a8 	mov.w	r2, r8, asr #2
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8003006:	fab2 f282 	clz	r2, r2
			tx_units{args ...}
 800300a:	e9c4 3421 	strd	r3, r4, [r4, #132]	; 0x84
 800300e:	2300      	movs	r3, #0
	  std::__introsort_loop(__first, __last,
 8003010:	ad03      	add	r5, sp, #12
 8003012:	f10d 0908 	add.w	r9, sp, #8
 8003016:	f1c2 021f 	rsb	r2, r2, #31
 800301a:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
      end() noexcept
 800301e:	f88d 300c 	strb.w	r3, [sp, #12]
 8003022:	f88d 3008 	strb.w	r3, [sp, #8]
 8003026:	4639      	mov	r1, r7
 8003028:	462b      	mov	r3, r5
 800302a:	4630      	mov	r0, r6
 800302c:	f8cd 9000 	str.w	r9, [sp]
 8003030:	0052      	lsls	r2, r2, #1
 8003032:	9504      	str	r5, [sp, #16]
 8003034:	f8cd 9014 	str.w	r9, [sp, #20]
 8003038:	f7ff ff3f 	bl	8002eba <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      if (__last - __first > int(_S_threshold))
 800303c:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 8003040:	e9cd 5906 	strd	r5, r9, [sp, #24]
    __final_insertion_sort(_RandomAccessIterator __first,
 8003044:	ab06      	add	r3, sp, #24
      if (__last - __first > int(_S_threshold))
 8003046:	dd16      	ble.n	8003076 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xae>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8003048:	cb0c      	ldmia	r3, {r2, r3}
 800304a:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 800304e:	4629      	mov	r1, r5
 8003050:	4630      	mov	r0, r6
 8003052:	f7ff fec0 	bl	8002dd6 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8003056:	42bd      	cmp	r5, r7
 8003058:	d012      	beq.n	8003080 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xb8>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800305a:	462b      	mov	r3, r5
	__val = _GLIBCXX_MOVE(*__last);
 800305c:	682a      	ldr	r2, [r5, #0]
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 800305e:	6890      	ldr	r0, [r2, #8]
 8003060:	f853 1c04 	ldr.w	r1, [r3, #-4]
      while (__comp(__val, __next))
 8003064:	688e      	ldr	r6, [r1, #8]
 8003066:	42b0      	cmp	r0, r6
 8003068:	d202      	bcs.n	8003070 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xa8>
	  *__last = _GLIBCXX_MOVE(*__next);
 800306a:	f843 1904 	str.w	r1, [r3], #-4
      while (__comp(__val, __next))
 800306e:	e7f7      	b.n	8003060 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x98>
      *__last = _GLIBCXX_MOVE(__val);
 8003070:	601a      	str	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8003072:	3504      	adds	r5, #4
 8003074:	e7ef      	b.n	8003056 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x8e>
	std::__insertion_sort(__first, __last, __comp);
 8003076:	4639      	mov	r1, r7
 8003078:	cb0c      	ldmia	r3, {r2, r3}
 800307a:	4630      	mov	r0, r6
 800307c:	f7ff feab 	bl	8002dd6 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
			is_id_sorted = true;
 8003080:	2301      	movs	r3, #1
		}
 8003082:	4620      	mov	r0, r4
			is_id_sorted = true;
 8003084:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		}
 8003088:	b009      	add	sp, #36	; 0x24
 800308a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800308e:	bf00      	nop
 8003090:	08007244 	.word	0x08007244
 8003094:	0800722c 	.word	0x0800722c

08003098 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE>:

}

namespace Chibarobo2022
{
	inline CRSLib::Can::Transmitter<Chibarobo2022::SampleTx> transmitter{(u32)0x100};
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x58>)
			transmitter.transmit(can_manager.pillarbox);
			
			executor.run_once();
		}
	}
}
 800309a:	b510      	push	{r4, lr}
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	d104      	bne.n	80030b0 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x18>
 80030a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030aa:	4812      	ldr	r0, [pc, #72]	; (80030f4 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x5c>)
 80030ac:	f7ff ff8c 	bl	8002fc8 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>
	};
}

namespace Chibarobo2022
{
	inline CRSLib::Can::Receiver<Chibarobo2022::SampleRx> receiver{(u32)0x101};
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x60>)
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	d117      	bne.n	80030ec <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x54>
 80030bc:	4c0f      	ldr	r4, [pc, #60]	; (80030fc <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x64>)
 80030be:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 80030c2:	6023      	str	r3, [r4, #0]
 80030c4:	f240 1301 	movw	r3, #257	; 0x101
 80030c8:	2100      	movs	r1, #0
 80030ca:	f104 0008 	add.w	r0, r4, #8
 80030ce:	6063      	str	r3, [r4, #4]
 80030d0:	f003 fe54 	bl	8006d7c <memset>
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x68>)
 80030d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030da:	2100      	movs	r1, #0
 80030dc:	f104 000c 	add.w	r0, r4, #12
 80030e0:	60a3      	str	r3, [r4, #8]
 80030e2:	f003 fe4b 	bl	8006d7c <memset>
 80030e6:	2314      	movs	r3, #20
 80030e8:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 80030ec:	bd10      	pop	{r4, pc}
 80030ee:	bf00      	nop
 80030f0:	2000009c 	.word	0x2000009c
 80030f4:	20000294 	.word	0x20000294
 80030f8:	20000098 	.word	0x20000098
 80030fc:	200000a0 	.word	0x200000a0
 8003100:	08007250 	.word	0x08007250

08003104 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE9_M_invokeERKSt9_Any_dataOS0_Om>:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 8003104:	2000      	movs	r0, #0
 8003106:	4770      	bx	lr

08003108 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 8003108:	b11a      	cbz	r2, 8003112 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 800310a:	2a01      	cmp	r2, #1
 800310c:	d004      	beq.n	8003118 <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
      }
 800310e:	2000      	movs	r0, #0
 8003110:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8003112:	4b02      	ldr	r3, [pc, #8]	; (800311c <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>)
 8003114:	6003      	str	r3, [r0, #0]
	    break;
 8003116:	e7fa      	b.n	800310e <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003118:	6001      	str	r1, [r0, #0]
	    break;
 800311a:	e7f8      	b.n	800310e <_ZNSt17_Function_handlerIFiPhmEN11stepping_md13CanController8callbackMUlS0_mE_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
 800311c:	080072ac 	.word	0x080072ac

08003120 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>:
namespace stepping_md {
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController::rx_frames;

	std::list<CanController*> CanController::pInstances;

	CanController::CanController(CanManager& can_manager, Parameters& params, uint32_t offset_from_bid): can_manager(can_manager), params(params), offset_from_bid(offset_from_bid){
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	6001      	str	r1, [r0, #0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8003124:	490e      	ldr	r1, [pc, #56]	; (8003160 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x40>)
 8003126:	4604      	mov	r4, r0
 8003128:	6101      	str	r1, [r0, #16]
	    _M_manager = &_My_handler::_M_manager;
 800312a:	490e      	ldr	r1, [pc, #56]	; (8003164 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x44>)
 800312c:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8003130:	60c1      	str	r1, [r0, #12]
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003132:	200c      	movs	r0, #12
 8003134:	f003 fa39 	bl	80065aa <_Znwj>
 8003138:	e007      	b.n	800314a <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x2a>
      if (_M_manager)
 800313a:	68e3      	ldr	r3, [r4, #12]
    class function<_Res(_ArgTypes...)>
 800313c:	1d21      	adds	r1, r4, #4
      if (_M_manager)
 800313e:	b113      	cbz	r3, 8003146 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x26>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8003140:	2203      	movs	r2, #3
 8003142:	4608      	mov	r0, r1
 8003144:	4798      	blx	r3
 8003146:	f002 fed7 	bl	8005ef8 <__cxa_end_cleanup>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 800314a:	4d07      	ldr	r5, [pc, #28]	; (8003168 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x48>)
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800314c:	6084      	str	r4, [r0, #8]
 800314e:	4629      	mov	r1, r5
 8003150:	f003 fd0c 	bl	8006b6c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8003154:	68ab      	ldr	r3, [r5, #8]
		CanController::pInstances.push_back(this);
	}
 8003156:	4620      	mov	r0, r4
 8003158:	3301      	adds	r3, #1
 800315a:	60ab      	str	r3, [r5, #8]
 800315c:	bd38      	pop	{r3, r4, r5, pc}
 800315e:	bf00      	nop
 8003160:	08003105 	.word	0x08003105
 8003164:	08003109 	.word	0x08003109
 8003168:	20000324 	.word	0x20000324

0800316c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800316c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003170:	6843      	ldr	r3, [r0, #4]
 8003172:	f8d0 8000 	ldr.w	r8, [r0]
 8003176:	4c41      	ldr	r4, [pc, #260]	; (800327c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x110>)
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	eba3 0308 	sub.w	r3, r3, r8
 800317e:	10db      	asrs	r3, r3, #3
 8003180:	4363      	muls	r3, r4
 8003182:	4692      	mov	sl, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8003184:	4a3e      	ldr	r2, [pc, #248]	; (8003280 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 8003186:	4607      	mov	r7, r0
 8003188:	4293      	cmp	r3, r2
 800318a:	4689      	mov	r9, r1
 800318c:	d102      	bne.n	8003194 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
 800318e:	483d      	ldr	r0, [pc, #244]	; (8003284 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x118>)
 8003190:	f003 fcf3 	bl	8006b7a <_ZSt20__throw_length_errorPKc>
 8003194:	2b01      	cmp	r3, #1
 8003196:	461c      	mov	r4, r3
 8003198:	bf38      	it	cc
 800319a:	2401      	movcc	r4, #1
 800319c:	18e4      	adds	r4, r4, r3
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800319e:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80031a2:	d23b      	bcs.n	800321c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80031a4:	b3e4      	cbz	r4, 8003220 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb4>
 80031a6:	4294      	cmp	r4, r2
 80031a8:	bf28      	it	cs
 80031aa:	4614      	movcs	r4, r2
 80031ac:	2018      	movs	r0, #24
 80031ae:	4360      	muls	r0, r4
 80031b0:	f003 f9fb 	bl	80065aa <_Znwj>
 80031b4:	4606      	mov	r6, r0
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80031b6:	46d4      	mov	ip, sl
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
 80031b8:	46b3      	mov	fp, r6
 80031ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80031be:	46c2      	mov	sl, r8
 80031c0:	eb06 0e05 	add.w	lr, r6, r5
 80031c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80031c8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80031cc:	e88e 0003 	stmia.w	lr, {r0, r1}
      for (; __first != __last; ++__first, (void)++__cur)
 80031d0:	45d1      	cmp	r9, sl
 80031d2:	f10b 0b18 	add.w	fp, fp, #24
 80031d6:	d125      	bne.n	8003224 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb8>
 80031d8:	2318      	movs	r3, #24
 80031da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003288 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x11c>
 80031de:	08ed      	lsrs	r5, r5, #3
 80031e0:	fb0a f505 	mul.w	r5, sl, r5
 80031e4:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 80031e8:	fb03 8b05 	mla	fp, r3, r5, r8
 80031ec:	fb05 3303 	mla	r3, r5, r3, r3
 80031f0:	18f3      	adds	r3, r6, r3
 80031f2:	4699      	mov	r9, r3
 80031f4:	465d      	mov	r5, fp
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	9b01      	ldr	r3, [sp, #4]
 80031fa:	f109 0918 	add.w	r9, r9, #24
 80031fe:	429d      	cmp	r5, r3
 8003200:	d01e      	beq.n	8003240 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xd4>
 8003202:	46ae      	mov	lr, r5
 8003204:	f1a9 0c18 	sub.w	ip, r9, #24
 8003208:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800320c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003210:	3518      	adds	r5, #24
 8003212:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8003216:	e88c 0003 	stmia.w	ip, {r0, r1}
 800321a:	e7ed      	b.n	80031f8 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x8c>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800321c:	4614      	mov	r4, r2
 800321e:	e7c5      	b.n	80031ac <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003220:	4626      	mov	r6, r4
 8003222:	e7c8      	b.n	80031b6 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4a>
 8003224:	46d6      	mov	lr, sl
 8003226:	f1ab 0c18 	sub.w	ip, fp, #24
 800322a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800322e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003232:	f10a 0a18 	add.w	sl, sl, #24
 8003236:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800323a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800323e:	e7c7      	b.n	80031d0 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x64>
 8003240:	eba5 050b 	sub.w	r5, r5, fp
 8003244:	08ed      	lsrs	r5, r5, #3
 8003246:	fb0a fa05 	mul.w	sl, sl, r5
 800324a:	2518      	movs	r5, #24
 800324c:	9b00      	ldr	r3, [sp, #0]
 800324e:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
 8003252:	fb05 350a 	mla	r5, r5, sl, r3
	if (__p)
 8003256:	f1b8 0f00 	cmp.w	r8, #0
 800325a:	d005      	beq.n	8003268 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xfc>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 800325c:	68b9      	ldr	r1, [r7, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800325e:	4640      	mov	r0, r8
 8003260:	eba1 0108 	sub.w	r1, r1, r8
 8003264:	f002 fe46 	bl	8005ef4 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003268:	2018      	movs	r0, #24
 800326a:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
 800326e:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003272:	60bc      	str	r4, [r7, #8]
    }
 8003274:	b003      	add	sp, #12
 8003276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800327a:	bf00      	nop
 800327c:	aaaaaaab 	.word	0xaaaaaaab
 8003280:	05555555 	.word	0x05555555
 8003284:	08007260 	.word	0x08007260
 8003288:	0aaaaaab 	.word	0x0aaaaaab

0800328c <_ZN11stepping_md13CanController6updateEv>:

		can_manager.pillarbox.post(params.get_BID() + offset_from_bid, tx_frame);
	}
	*/

	void CanController::update(void){
 800328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if(!can_manager.letterbox0.empty()){
 8003290:	6803      	ldr	r3, [r0, #0]
	void CanController::update(void){
 8003292:	4605      	mov	r5, r0
			};
		}

		bool empty() const noexcept
		{
			return HAL_CAN_GetRxFifoFillLevel(hcan, to_underlying(fifo_index)) == 0;
 8003294:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8003298:	b090      	sub	sp, #64	; 0x40
 800329a:	f001 feaf 	bl	8004ffc <HAL_CAN_GetRxFifoFillLevel>
 800329e:	4e3a      	ldr	r6, [pc, #232]	; (8003388 <_ZN11stepping_md13CanController6updateEv+0xfc>)
		if(!can_manager.letterbox0.empty()){
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d034      	beq.n	800330e <_ZN11stepping_md13CanController6updateEv+0x82>
			RxFrame rx_frame;
 80032a4:	2218      	movs	r2, #24
 80032a6:	2100      	movs	r1, #0
 80032a8:	a802      	add	r0, sp, #8
 80032aa:	f003 fd67 	bl	8006d7c <memset>
			can_manager.letterbox0.receive(rx_frame);
 80032ae:	682c      	ldr	r4, [r5, #0]
			CAN_RxHeaderTypeDef rx_header{};
 80032b0:	221c      	movs	r2, #28
 80032b2:	2100      	movs	r1, #0
 80032b4:	a808      	add	r0, sp, #32
 80032b6:	f003 fd61 	bl	8006d7c <memset>
			HAL_CAN_GetRxMessage(hcan, to_underlying(fifo_index), &rx_header, frame.data.data());
 80032ba:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80032be:	ab06      	add	r3, sp, #24
 80032c0:	aa08      	add	r2, sp, #32
 80032c2:	f001 fe24 	bl	8004f0e <HAL_CAN_GetRxMessage>
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 80032c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			frame.header =
 80032c8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 80032cc:	1e9a      	subs	r2, r3, #2
 80032ce:	4253      	negs	r3, r2
 80032d0:	4153      	adcs	r3, r2
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
 80032d2:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
 80032d6:	ea42 22c0 	orr.w	r2, r2, r0, lsl #11
			frame.header =
 80032da:	9202      	str	r2, [sp, #8]
 80032dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80032de:	f88d 3015 	strb.w	r3, [sp, #21]
 80032e2:	9203      	str	r2, [sp, #12]
 80032e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80032e6:	e9d6 c301 	ldrd	ip, r3, [r6, #4]
 80032ea:	459c      	cmp	ip, r3
 80032ec:	9204      	str	r2, [sp, #16]
 80032ee:	f88d 1014 	strb.w	r1, [sp, #20]
 80032f2:	d025      	beq.n	8003340 <_ZN11stepping_md13CanController6updateEv+0xb4>
 80032f4:	4664      	mov	r4, ip
 80032f6:	af02      	add	r7, sp, #8
 80032f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80032fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032fc:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003300:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
 8003304:	f10c 0318 	add.w	r3, ip, #24
 8003308:	6073      	str	r3, [r6, #4]
			rx_frames.push_back(rx_frame);
			led_mgr::blink_can_led();
 800330a:	f000 fc51 	bl	8003bb0 <_ZN11stepping_md7led_mgr13blink_can_ledEv>
      : _M_current(__i) { }
 800330e:	6834      	ldr	r4, [r6, #0]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003310:	1d2f      	adds	r7, r5, #4
		}

		auto ite = rx_frames.begin();
		while(ite != rx_frames.end()){
 8003312:	6873      	ldr	r3, [r6, #4]
 8003314:	429c      	cmp	r4, r3
 8003316:	d034      	beq.n	8003382 <_ZN11stepping_md13CanController6updateEv+0xf6>
			if(ite->header.get_id() == (params.get_BID() + offset_from_bid)){
 8003318:	6968      	ldr	r0, [r5, #20]
			return id;
 800331a:	f8d4 8000 	ldr.w	r8, [r4]
 800331e:	f000 f979 	bl	8003614 <_ZN11stepping_md10Parameters7get_BIDEv>
 8003322:	69ab      	ldr	r3, [r5, #24]
 8003324:	4418      	add	r0, r3
 8003326:	4540      	cmp	r0, r8
 8003328:	d129      	bne.n	800337e <_ZN11stepping_md13CanController6updateEv+0xf2>
 800332a:	aa08      	add	r2, sp, #32
 800332c:	4611      	mov	r1, r2
				alignas(8) unsigned char tmp[CRSLib::Can::can_mtu];
				for(unsigned i = 0; i < ite->header.dlc; i++){
 800332e:	7b23      	ldrb	r3, [r4, #12]
 8003330:	4423      	add	r3, r4
 8003332:	42a3      	cmp	r3, r4
 8003334:	d00a      	beq.n	800334c <_ZN11stepping_md13CanController6updateEv+0xc0>
					tmp[i] = ite->data[ite->header.dlc - (i + 1)];
 8003336:	7bd8      	ldrb	r0, [r3, #15]
 8003338:	3b01      	subs	r3, #1
 800333a:	f802 0b01 	strb.w	r0, [r2], #1
				for(unsigned i = 0; i < ite->header.dlc; i++){
 800333e:	e7f8      	b.n	8003332 <_ZN11stepping_md13CanController6updateEv+0xa6>
	  _M_realloc_insert(end(), __x);
 8003340:	4661      	mov	r1, ip
 8003342:	4630      	mov	r0, r6
 8003344:	aa02      	add	r2, sp, #8
 8003346:	f7ff ff11 	bl	800316c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
 800334a:	e7de      	b.n	800330a <_ZN11stepping_md13CanController6updateEv+0x7e>
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	e9cd 1301 	strd	r1, r3, [sp, #4]
      if (_M_empty())
 8003352:	68eb      	ldr	r3, [r5, #12]
 8003354:	b90b      	cbnz	r3, 800335a <_ZN11stepping_md13CanController6updateEv+0xce>
	__throw_bad_function_call();
 8003356:	f003 fc13 	bl	8006b80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800335a:	aa02      	add	r2, sp, #8
 800335c:	a901      	add	r1, sp, #4
 800335e:	4638      	mov	r0, r7
 8003360:	692b      	ldr	r3, [r5, #16]
 8003362:	4798      	blx	r3
 8003364:	6872      	ldr	r2, [r6, #4]
      { return __normal_iterator(_M_current + __n); }
 8003366:	f104 0118 	add.w	r1, r4, #24
      if (__position + 1 != end())
 800336a:	4291      	cmp	r1, r2
 800336c:	d003      	beq.n	8003376 <_ZN11stepping_md13CanController6updateEv+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800336e:	4620      	mov	r0, r4
 8003370:	1a52      	subs	r2, r2, r1
 8003372:	f003 fce9 	bl	8006d48 <memmove>
      --this->_M_impl._M_finish;
 8003376:	6873      	ldr	r3, [r6, #4]
 8003378:	3b18      	subs	r3, #24
 800337a:	6073      	str	r3, [r6, #4]
				}
				callback(tmp, ite->header.get_id());
				ite = rx_frames.erase(ite);
				continue;
 800337c:	e7c9      	b.n	8003312 <_ZN11stepping_md13CanController6updateEv+0x86>
      { return __normal_iterator(_M_current++); }
 800337e:	3418      	adds	r4, #24
 8003380:	e7c7      	b.n	8003312 <_ZN11stepping_md13CanController6updateEv+0x86>
			}
			ite++;
		}
	}
 8003382:	b010      	add	sp, #64	; 0x40
 8003384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003388:	20000330 	.word	0x20000330

0800338c <_ZN11stepping_md13CanController14trigger_updateEv>:
			ite++;
		}
	}
	*/

	void CanController::trigger_update(void){
 800338c:	b538      	push	{r3, r4, r5, lr}
      { return iterator(this->_M_impl._M_node._M_next); }
 800338e:	4d05      	ldr	r5, [pc, #20]	; (80033a4 <_ZN11stepping_md13CanController14trigger_updateEv+0x18>)
 8003390:	682c      	ldr	r4, [r5, #0]
		for(CanController* pController : pInstances){
 8003392:	42ac      	cmp	r4, r5
 8003394:	d004      	beq.n	80033a0 <_ZN11stepping_md13CanController14trigger_updateEv+0x14>
			pController->update();
 8003396:	68a0      	ldr	r0, [r4, #8]
 8003398:	f7ff ff78 	bl	800328c <_ZN11stepping_md13CanController6updateEv>
	_M_node = _M_node->_M_next;
 800339c:	6824      	ldr	r4, [r4, #0]
	return *this;
 800339e:	e7f8      	b.n	8003392 <_ZN11stepping_md13CanController14trigger_updateEv+0x6>
		}
	}
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
 80033a2:	bf00      	nop
 80033a4:	20000324 	.word	0x20000324

080033a8 <_GLOBAL__sub_I__ZN11stepping_md13CanController9rx_framesE>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80033a8:	2200      	movs	r2, #0
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <_GLOBAL__sub_I__ZN11stepping_md13CanController9rx_framesE+0x14>)
 80033ac:	e9c3 2200 	strd	r2, r2, [r3]
 80033b0:	609a      	str	r2, [r3, #8]
	this->_M_next = this->_M_prev = this;
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <_GLOBAL__sub_I__ZN11stepping_md13CanController9rx_framesE+0x18>)
 80033b4:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 80033b8:	609a      	str	r2, [r3, #8]
}
 80033ba:	4770      	bx	lr
 80033bc:	20000330 	.word	0x20000330
 80033c0:	20000324 	.word	0x20000324

080033c4 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80033c6:	4c0a      	ldr	r4, [pc, #40]	; (80033f0 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x2c>)
 80033c8:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 80033ca:	42a0      	cmp	r0, r4
 80033cc:	d005      	beq.n	80033da <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x16>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 80033ce:	6805      	ldr	r5, [r0, #0]
 80033d0:	210c      	movs	r1, #12
 80033d2:	f002 fd8f 	bl	8005ef4 <_ZdlPvj>
 80033d6:	4628      	mov	r0, r5
 80033d8:	e7f7      	b.n	80033ca <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x6>
	_M_deallocate(_M_impl._M_start,
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x30>)
 80033dc:	6818      	ldr	r0, [r3, #0]
	if (__p)
 80033de:	b128      	cbz	r0, 80033ec <_GLOBAL__sub_D__ZN11stepping_md13CanController9rx_framesE+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033e6:	1a09      	subs	r1, r1, r0
 80033e8:	f002 bd84 	b.w	8005ef4 <_ZdlPvj>
 80033ec:	bd38      	pop	{r3, r4, r5, pc}
 80033ee:	bf00      	nop
 80033f0:	20000324 	.word	0x20000324
 80033f4:	20000330 	.word	0x20000330

080033f8 <_ZN11stepping_md15MotorController18DisableModeContext6onInitEv>:
				private:
					MotorController& parent;
				public:
					explicit DisableModeContext(MotorController& parent): parent(parent){}
					void update(void){}
					void onInit(void){
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4604      	mov	r4, r0

    GPIO_PIN MotorController::get_ena_pin(void) const{return ena_pin;}
    GPIO_Port MotorController::get_ena_port(void) const{return ena_port;}
    GPIO_PIN MotorController::get_dir_pin(void) const{return dir_pin;}
    GPIO_Port MotorController::get_dir_port(void) const{return dir_port;}
    TIM_HandleTypeDef* MotorController::get_pwm_tim(void){return pwm_tim;}
 80033fc:	6803      	ldr	r3, [r0, #0]
						HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
 80033fe:	2100      	movs	r1, #0
 8003400:	6918      	ldr	r0, [r3, #16]
 8003402:	f002 fcb1 	bl	8005d68 <HAL_TIM_PWM_Stop>
						HAL_GPIO_WritePin(parent.get_ena_port(), parent.get_ena_pin(), GPIO_PIN_RESET);
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	2200      	movs	r2, #0
					}
 800340a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						HAL_GPIO_WritePin(parent.get_ena_port(), parent.get_ena_pin(), GPIO_PIN_RESET);
 800340e:	8819      	ldrh	r1, [r3, #0]
 8003410:	6858      	ldr	r0, [r3, #4]
 8003412:	f001 bf45 	b.w	80052a0 <HAL_GPIO_WritePin>
	...

08003418 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm>:
    MotorController::MotorController
 8003418:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800341c:	4604      	mov	r4, r0
 800341e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
		dis_context(DisableModeContext(*this))
 8003422:	8103      	strh	r3, [r0, #8]
 8003424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003426:	f100 051c 	add.w	r5, r0, #28
 800342a:	e9c0 3703 	strd	r3, r7, [r0, #12]
 800342e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003430:	8001      	strh	r1, [r0, #0]
 8003432:	6183      	str	r3, [r0, #24]
 8003434:	4601      	mov	r1, r0
 8003436:	6042      	str	r2, [r0, #4]
 8003438:	f8c0 8014 	str.w	r8, [r0, #20]
 800343c:	f104 0620 	add.w	r6, r4, #32
 8003440:	4628      	mov	r0, r5
 8003442:	f000 faf4 	bl	8003a2e <_ZN11stepping_md15MotorController19VelocityModeContextC1ERS0_>
 8003446:	4621      	mov	r1, r4
 8003448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800344a:	4630      	mov	r0, r6
 800344c:	f000 fa3d 	bl	80038ca <_ZN11stepping_md15MotorController19PositionModeContextC1ERS0_f>
    	switch(params.get_motor_param().mode){
 8003450:	4641      	mov	r1, r8
 8003452:	4668      	mov	r0, sp
					explicit DisableModeContext(MotorController& parent): parent(parent){}
 8003454:	63a4      	str	r4, [r4, #56]	; 0x38
 8003456:	f000 f8cf 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 800345a:	f89d 3000 	ldrb.w	r3, [sp]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d009      	beq.n	8003476 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm+0x5e>
 8003462:	2b05      	cmp	r3, #5
 8003464:	d021      	beq.n	80034aa <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm+0x92>
    			current_mode = dis_context.description();
 8003466:	2301      	movs	r3, #1
    			dis_context.onInit();
 8003468:	f104 0038 	add.w	r0, r4, #56	; 0x38
    			current_mode = dis_context.description();
 800346c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    			dis_context.onInit();
 8003470:	f7ff ffc2 	bl	80033f8 <_ZN11stepping_md15MotorController18DisableModeContext6onInitEv>
 8003474:	e007      	b.n	8003486 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm+0x6e>
    			current_mode = pos_context.description();
 8003476:	4630      	mov	r0, r6
 8003478:	f000 fa3f 	bl	80038fa <_ZN11stepping_md15MotorController19PositionModeContext11descriptionEv>
 800347c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    			pos_context.onInit();
 8003480:	4630      	mov	r0, r6
 8003482:	f000 fa13 	bl	80038ac <_ZN11stepping_md15MotorController19PositionModeContext6onInitEv>
        pwm_tim->Instance->CCR1 =100;
 8003486:	2264      	movs	r2, #100	; 0x64
 8003488:	683b      	ldr	r3, [r7, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800348a:	200c      	movs	r0, #12
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
 800348e:	f003 f88c 	bl	80065aa <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 8003492:	4d0a      	ldr	r5, [pc, #40]	; (80034bc <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm+0xa4>)
 8003494:	6084      	str	r4, [r0, #8]
 8003496:	4629      	mov	r1, r5
 8003498:	f003 fb68 	bl	8006b6c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
    }
 800349c:	4620      	mov	r0, r4
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800349e:	68ab      	ldr	r3, [r5, #8]
 80034a0:	3301      	adds	r3, #1
 80034a2:	60ab      	str	r3, [r5, #8]
 80034a4:	b004      	add	sp, #16
 80034a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    			current_mode = vel_context.description();
 80034aa:	4628      	mov	r0, r5
 80034ac:	f000 fadc 	bl	8003a68 <_ZN11stepping_md15MotorController19VelocityModeContext11descriptionEv>
 80034b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    			vel_context.onInit();
 80034b4:	4628      	mov	r0, r5
 80034b6:	f000 faa4 	bl	8003a02 <_ZN11stepping_md15MotorController19VelocityModeContext6onInitEv>
    			break;
 80034ba:	e7e4      	b.n	8003486 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm+0x6e>
 80034bc:	2000033c 	.word	0x2000033c

080034c0 <_ZN11stepping_md15MotorController6updateEv>:
    void MotorController::update(){
 80034c0:	b530      	push	{r4, r5, lr}
 80034c2:	4604      	mov	r4, r0
 80034c4:	b085      	sub	sp, #20
    	const MotorParam motor_param = params.get_motor_param();
 80034c6:	6941      	ldr	r1, [r0, #20]
 80034c8:	4668      	mov	r0, sp
 80034ca:	f000 f895 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 80034ce:	f89d 5000 	ldrb.w	r5, [sp]
    	const bool mode_change_detected = motor_param.mode != current_mode;
 80034d2:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80034d6:	4628      	mov	r0, r5
 80034d8:	f000 f887 	bl	80035ea <_ZN11stepping_mdneENS_7MD_MODEES0_>
    	if(mode_change_detected){
 80034dc:	b328      	cbz	r0, 800352a <_ZN11stepping_md15MotorController6updateEv+0x6a>
			switch(current_mode){
 80034de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d00d      	beq.n	8003502 <_ZN11stepping_md15MotorController6updateEv+0x42>
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d010      	beq.n	800350c <_ZN11stepping_md15MotorController6updateEv+0x4c>
    		switch(motor_param.mode){
 80034ea:	2d04      	cmp	r5, #4
 80034ec:	d013      	beq.n	8003516 <_ZN11stepping_md15MotorController6updateEv+0x56>
 80034ee:	2d05      	cmp	r5, #5
 80034f0:	d023      	beq.n	800353a <_ZN11stepping_md15MotorController6updateEv+0x7a>
    				current_mode = dis_context.description();
 80034f2:	2301      	movs	r3, #1
    				dis_context.onInit();
 80034f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    				current_mode = dis_context.description();
 80034f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    				dis_context.onInit();
 80034fc:	f7ff ff7c 	bl	80033f8 <_ZN11stepping_md15MotorController18DisableModeContext6onInitEv>
 8003500:	e013      	b.n	800352a <_ZN11stepping_md15MotorController6updateEv+0x6a>
					pos_context.onExit();
 8003502:	f104 0020 	add.w	r0, r4, #32
 8003506:	f000 f9ef 	bl	80038e8 <_ZN11stepping_md15MotorController19PositionModeContext6onExitEv>
 800350a:	e7ee      	b.n	80034ea <_ZN11stepping_md15MotorController6updateEv+0x2a>
					vel_context.onExit();
 800350c:	f104 001c 	add.w	r0, r4, #28
 8003510:	f000 fa94 	bl	8003a3c <_ZN11stepping_md15MotorController19VelocityModeContext6onExitEv>
 8003514:	e7e9      	b.n	80034ea <_ZN11stepping_md15MotorController6updateEv+0x2a>
    				current_mode = pos_context.description();
 8003516:	f104 0520 	add.w	r5, r4, #32
 800351a:	4628      	mov	r0, r5
 800351c:	f000 f9ed 	bl	80038fa <_ZN11stepping_md15MotorController19PositionModeContext11descriptionEv>
 8003520:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    				pos_context.onInit();
 8003524:	4628      	mov	r0, r5
 8003526:	f000 f9c1 	bl	80038ac <_ZN11stepping_md15MotorController19PositionModeContext6onInitEv>
    	switch(current_mode){
 800352a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800352e:	2b04      	cmp	r3, #4
 8003530:	d00e      	beq.n	8003550 <_ZN11stepping_md15MotorController6updateEv+0x90>
 8003532:	2b05      	cmp	r3, #5
 8003534:	d013      	beq.n	800355e <_ZN11stepping_md15MotorController6updateEv+0x9e>
    }
 8003536:	b005      	add	sp, #20
 8003538:	bd30      	pop	{r4, r5, pc}
    				current_mode = vel_context.description();
 800353a:	f104 051c 	add.w	r5, r4, #28
 800353e:	4628      	mov	r0, r5
 8003540:	f000 fa92 	bl	8003a68 <_ZN11stepping_md15MotorController19VelocityModeContext11descriptionEv>
 8003544:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    				vel_context.onInit();
 8003548:	4628      	mov	r0, r5
 800354a:	f000 fa5a 	bl	8003a02 <_ZN11stepping_md15MotorController19VelocityModeContext6onInitEv>
 800354e:	e7ec      	b.n	800352a <_ZN11stepping_md15MotorController6updateEv+0x6a>
				pos_context.update();
 8003550:	f104 0020 	add.w	r0, r4, #32
    }
 8003554:	b005      	add	sp, #20
 8003556:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				pos_context.update();
 800355a:	f000 b979 	b.w	8003850 <_ZN11stepping_md15MotorController19PositionModeContext6updateEv>
				vel_context.update();
 800355e:	f104 001c 	add.w	r0, r4, #28
    }
 8003562:	b005      	add	sp, #20
 8003564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				vel_context.update();
 8003568:	f000 ba2e 	b.w	80039c8 <_ZN11stepping_md15MotorController19VelocityModeContext6updateEv>

0800356c <_ZNK11stepping_md15MotorController11get_ena_pinEv>:
    GPIO_PIN MotorController::get_ena_pin(void) const{return ena_pin;}
 800356c:	8800      	ldrh	r0, [r0, #0]
 800356e:	4770      	bx	lr

08003570 <_ZNK11stepping_md15MotorController12get_ena_portEv>:
    GPIO_Port MotorController::get_ena_port(void) const{return ena_port;}
 8003570:	6840      	ldr	r0, [r0, #4]
 8003572:	4770      	bx	lr

08003574 <_ZNK11stepping_md15MotorController11get_dir_pinEv>:
    GPIO_PIN MotorController::get_dir_pin(void) const{return dir_pin;}
 8003574:	8900      	ldrh	r0, [r0, #8]
 8003576:	4770      	bx	lr

08003578 <_ZNK11stepping_md15MotorController12get_dir_portEv>:
    GPIO_Port MotorController::get_dir_port(void) const{return dir_port;}
 8003578:	68c0      	ldr	r0, [r0, #12]
 800357a:	4770      	bx	lr

0800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>:
    TIM_HandleTypeDef* MotorController::get_pwm_tim(void){return pwm_tim;}
 800357c:	6900      	ldr	r0, [r0, #16]
 800357e:	4770      	bx	lr

08003580 <_ZN11stepping_md15MotorController10get_paramsEv>:
    Parameters& MotorController::get_params(void){return params;}
 8003580:	6940      	ldr	r0, [r0, #20]
 8003582:	4770      	bx	lr

08003584 <_ZNK11stepping_md15MotorController16get_source_clockEv>:
    unsigned long MotorController::get_source_clock(void) const{return source_clock;}
 8003584:	6980      	ldr	r0, [r0, #24]
 8003586:	4770      	bx	lr

08003588 <_ZN11stepping_md15MotorController14trigger_updateEv>:

    void MotorController::trigger_update(void){
 8003588:	b538      	push	{r3, r4, r5, lr}
      { return iterator(this->_M_impl._M_node._M_next); }
 800358a:	4d05      	ldr	r5, [pc, #20]	; (80035a0 <_ZN11stepping_md15MotorController14trigger_updateEv+0x18>)
 800358c:	682c      	ldr	r4, [r5, #0]
    	for(MotorController* pController : pInstances){
 800358e:	42ac      	cmp	r4, r5
 8003590:	d004      	beq.n	800359c <_ZN11stepping_md15MotorController14trigger_updateEv+0x14>
    		pController->update();
 8003592:	68a0      	ldr	r0, [r4, #8]
 8003594:	f7ff ff94 	bl	80034c0 <_ZN11stepping_md15MotorController6updateEv>
	_M_node = _M_node->_M_next;
 8003598:	6824      	ldr	r4, [r4, #0]
	return *this;
 800359a:	e7f8      	b.n	800358e <_ZN11stepping_md15MotorController14trigger_updateEv+0x6>
    	}
    }
 800359c:	bd38      	pop	{r3, r4, r5, pc}
 800359e:	bf00      	nop
 80035a0:	2000033c 	.word	0x2000033c

080035a4 <_GLOBAL__sub_I_param_mode>:
	this->_M_size = 0;
 80035a4:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 80035a6:	4b02      	ldr	r3, [pc, #8]	; (80035b0 <_GLOBAL__sub_I_param_mode+0xc>)
 80035a8:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 80035ac:	609a      	str	r2, [r3, #8]
} // namespace stapping_md
 80035ae:	4770      	bx	lr
 80035b0:	2000033c 	.word	0x2000033c

080035b4 <_GLOBAL__sub_D_param_mode>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80035b6:	4c05      	ldr	r4, [pc, #20]	; (80035cc <_GLOBAL__sub_D_param_mode+0x18>)
 80035b8:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 80035ba:	42a0      	cmp	r0, r4
 80035bc:	d005      	beq.n	80035ca <_GLOBAL__sub_D_param_mode+0x16>
	  __cur = __tmp->_M_next;
 80035be:	6805      	ldr	r5, [r0, #0]
	::operator delete(__p
 80035c0:	210c      	movs	r1, #12
 80035c2:	f002 fc97 	bl	8005ef4 <_ZdlPvj>
 80035c6:	4628      	mov	r0, r5
 80035c8:	e7f7      	b.n	80035ba <_GLOBAL__sub_D_param_mode+0x6>
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	2000033c 	.word	0x2000033c

080035d0 <_ZN11stepping_mdeqENS_7MD_MODEES0_>:

namespace stepping_md{
	bool operator ==(MD_MODE left_val, MD_MODE right_val){
		const bool is_left_disabled = static_cast<uint8_t>(left_val) == static_cast<uint8_t>(MD_MODE::DEFAULT) || static_cast<uint8_t>(left_val) == static_cast<uint8_t>(MD_MODE::DISABLE);
		const bool is_right_disabled = static_cast<uint8_t>(right_val) == static_cast<uint8_t>(MD_MODE::DEFAULT) || static_cast<uint8_t>(right_val) == static_cast<uint8_t>(MD_MODE::DISABLE);
		return static_cast<uint8_t>(left_val) == static_cast<uint8_t>(right_val) || (is_left_disabled && is_right_disabled);
 80035d0:	4288      	cmp	r0, r1
 80035d2:	d006      	beq.n	80035e2 <_ZN11stepping_mdeqENS_7MD_MODEES0_+0x12>
 80035d4:	2801      	cmp	r0, #1
 80035d6:	d806      	bhi.n	80035e6 <_ZN11stepping_mdeqENS_7MD_MODEES0_+0x16>
 80035d8:	2901      	cmp	r1, #1
 80035da:	bf8c      	ite	hi
 80035dc:	2000      	movhi	r0, #0
 80035de:	2001      	movls	r0, #1
 80035e0:	4770      	bx	lr
 80035e2:	2001      	movs	r0, #1
 80035e4:	4770      	bx	lr
 80035e6:	2000      	movs	r0, #0
	}
 80035e8:	4770      	bx	lr

080035ea <_ZN11stepping_mdneENS_7MD_MODEES0_>:
	bool operator !=(MD_MODE left_val, MD_MODE right_val){
 80035ea:	b508      	push	{r3, lr}
		return !(left_val == right_val);
 80035ec:	f7ff fff0 	bl	80035d0 <_ZN11stepping_mdeqENS_7MD_MODEES0_>
 80035f0:	f080 0001 	eor.w	r0, r0, #1
	}
 80035f4:	b2c0      	uxtb	r0, r0
 80035f6:	bd08      	pop	{r3, pc}

080035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>:
	std::list<Parameters*> Parameters::pInstances;

    //パラメータを取得する関数
	//第1引数は結果を格納する構造体オブジェクトへのポインタ
	MotorParam Parameters::get_motor_param()
    {
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4604      	mov	r4, r0
        return SMParam;
 80035fc:	3104      	adds	r1, #4
 80035fe:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8003600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
 8003604:	4620      	mov	r0, r4
 8003606:	bd10      	pop	{r4, pc}

08003608 <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>:

	//パラメータを設定する関数
	//第1引数は設定内容が書かれた構造体オブジェクト
	void Parameters::set_motor_param(const MotorParam& param)
    {
 8003608:	b510      	push	{r4, lr}
        SMParam = param;
 800360a:	1d04      	adds	r4, r0, #4
 800360c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800360e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
 8003612:	bd10      	pop	{r4, pc}

08003614 <_ZN11stepping_md10Parameters7get_BIDEv>:

	//BIDを取得する関数
	uint16_t Parameters::get_BID()
    {
        return BID;
    }
 8003614:	8800      	ldrh	r0, [r0, #0]
 8003616:	4770      	bx	lr

08003618 <_ZN11stepping_md10Parameters7set_BIDEt>:

	//BIDを設定する関数
	void Parameters::set_BID(const uint16_t bid)
    {
        BID = bid;
 8003618:	8001      	strh	r1, [r0, #0]
    }
 800361a:	4770      	bx	lr

0800361c <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv>:

	void Parameters::trigger_emergency_callback(void){
 800361c:	b510      	push	{r4, lr}
			//Emergencyボタンが押されたときに呼ばれるコールバック関数
			//emergency_callbackはパラメーターのうちmodeをMD_MODE::DEFAULTにする関数
			void emergency_callback(void)
			{
				SMParam.mode = MD_MODE::DEFAULT;
				SMParam.target = 0;
 800361e:	2000      	movs	r0, #0
				SMParam.mode = MD_MODE::DEFAULT;
 8003620:	2400      	movs	r4, #0
      { return iterator(this->_M_impl._M_node._M_next); }
 8003622:	4905      	ldr	r1, [pc, #20]	; (8003638 <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv+0x1c>)
 8003624:	680b      	ldr	r3, [r1, #0]
		for(Parameters* pParameters : pInstances){
 8003626:	428b      	cmp	r3, r1
 8003628:	d004      	beq.n	8003634 <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv+0x18>
 800362a:	689a      	ldr	r2, [r3, #8]
	_M_node = _M_node->_M_next;
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	7114      	strb	r4, [r2, #4]
				SMParam.target = 0;
 8003630:	60d0      	str	r0, [r2, #12]
	return *this;
 8003632:	e7f8      	b.n	8003626 <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv+0xa>
			pParameters->emergency_callback();
		}
	}
 8003634:	bd10      	pop	{r4, pc}
 8003636:	bf00      	nop
 8003638:	20000348 	.word	0x20000348

0800363c <_GLOBAL__sub_I__ZN11stepping_mdeqENS_7MD_MODEES0_>:
	this->_M_size = 0;
 800363c:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 800363e:	4b02      	ldr	r3, [pc, #8]	; (8003648 <_GLOBAL__sub_I__ZN11stepping_mdeqENS_7MD_MODEES0_+0xc>)
 8003640:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	4770      	bx	lr
 8003648:	20000348 	.word	0x20000348

0800364c <_GLOBAL__sub_D__ZN11stepping_mdeqENS_7MD_MODEES0_>:
 800364c:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800364e:	4c05      	ldr	r4, [pc, #20]	; (8003664 <_GLOBAL__sub_D__ZN11stepping_mdeqENS_7MD_MODEES0_+0x18>)
 8003650:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 8003652:	42a0      	cmp	r0, r4
 8003654:	d005      	beq.n	8003662 <_GLOBAL__sub_D__ZN11stepping_mdeqENS_7MD_MODEES0_+0x16>
	  __cur = __tmp->_M_next;
 8003656:	6805      	ldr	r5, [r0, #0]
 8003658:	210c      	movs	r1, #12
 800365a:	f002 fc4b 	bl	8005ef4 <_ZdlPvj>
 800365e:	4628      	mov	r0, r5
 8003660:	e7f7      	b.n	8003652 <_GLOBAL__sub_D__ZN11stepping_mdeqENS_7MD_MODEES0_+0x6>
 8003662:	bd38      	pop	{r3, r4, r5, pc}
 8003664:	20000348 	.word	0x20000348

08003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>:
namespace stepping_md{
	MotorController::PositionModeContext::PositionModeContext(MotorController& parent, const float error_threshold): parent(parent), error_threshold(error_threshold){
		onInit();
	};

	void MotorController::PositionModeContext::update_position(void){
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4604      	mov	r4, r0
		//現在の位置を更新する
		//開始時間から計算する
		int time_diff = HAL_GetTick() - start_time;//ms
 800366c:	f001 fb3e 	bl	8004cec <HAL_GetTick>
 8003670:	6865      	ldr	r5, [r4, #4]
 8003672:	1b45      	subs	r5, r0, r5
		start_time = HAL_GetTick();
 8003674:	f001 fb3a 	bl	8004cec <HAL_GetTick>
 8003678:	6060      	str	r0, [r4, #4]
		position +=direction * time_diff * current_speed / 1000;
 800367a:	68a0      	ldr	r0, [r4, #8]
 800367c:	4368      	muls	r0, r5
 800367e:	f7fd fa49 	bl	8000b14 <__aeabi_i2f>
 8003682:	68e1      	ldr	r1, [r4, #12]
 8003684:	f7fd fa9a 	bl	8000bbc <__aeabi_fmul>
 8003688:	4904      	ldr	r1, [pc, #16]	; (800369c <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv+0x34>)
 800368a:	f7fd fb4b 	bl	8000d24 <__aeabi_fdiv>
 800368e:	4601      	mov	r1, r0
 8003690:	6920      	ldr	r0, [r4, #16]
 8003692:	f7fd f98b 	bl	80009ac <__addsf3>
 8003696:	6120      	str	r0, [r4, #16]
	}
 8003698:	bd38      	pop	{r3, r4, r5, pc}
 800369a:	bf00      	nop
 800369c:	447a0000 	.word	0x447a0000

080036a0 <_ZN11stepping_md15MotorController19PositionModeContext13set_directionEf>:

	//方向を設定する。引数が正のとき正転、負のとき逆転
	void MotorController::PositionModeContext::set_direction(float _direction){
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	4604      	mov	r4, r0
		const GPIO_PIN dir_pin = parent.get_dir_pin();
 80036a4:	6800      	ldr	r0, [r0, #0]
	void MotorController::PositionModeContext::set_direction(float _direction){
 80036a6:	460f      	mov	r7, r1
		const GPIO_PIN dir_pin = parent.get_dir_pin();
 80036a8:	f7ff ff64 	bl	8003574 <_ZNK11stepping_md15MotorController11get_dir_pinEv>
 80036ac:	4606      	mov	r6, r0
		const GPIO_Port dir_port = parent.get_dir_port();
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	f7ff ff62 	bl	8003578 <_ZNK11stepping_md15MotorController12get_dir_portEv>
 80036b4:	4605      	mov	r5, r0

		//変更前に現在の位置を更新する
		update_position();
 80036b6:	4620      	mov	r0, r4
 80036b8:	f7ff ffd6 	bl	8003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>

		//設定の取得
		if(_direction > 0){
 80036bc:	2100      	movs	r1, #0
 80036be:	4638      	mov	r0, r7
 80036c0:	f7fd fc38 	bl	8000f34 <__aeabi_fcmpgt>
 80036c4:	4602      	mov	r2, r0
 80036c6:	b138      	cbz	r0, 80036d8 <_ZN11stepping_md15MotorController19PositionModeContext13set_directionEf+0x38>
			direction = 1;
 80036c8:	2201      	movs	r2, #1
 80036ca:	60a2      	str	r2, [r4, #8]
			HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_SET);
		}else{
			direction = -1;
			HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 80036cc:	4631      	mov	r1, r6
 80036ce:	4628      	mov	r0, r5
		}
	}
 80036d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 80036d4:	f001 bde4 	b.w	80052a0 <HAL_GPIO_WritePin>
			direction = -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	60a3      	str	r3, [r4, #8]
 80036de:	e7f5      	b.n	80036cc <_ZN11stepping_md15MotorController19PositionModeContext13set_directionEf+0x2c>

080036e0 <_ZN11stepping_md15MotorController19PositionModeContext5startEv>:

		update_position();
		stop();
		HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
	}
	void MotorController::PositionModeContext::start(void){
 80036e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036e2:	4604      	mov	r4, r0
		update_position();
 80036e4:	f7ff ffc0 	bl	8003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>
		HAL_TIM_PWM_Start(parent.get_pwm_tim(), TIM_CHANNEL_1);
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	f7ff ff47 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 80036ee:	2100      	movs	r1, #0
 80036f0:	f002 fafc 	bl	8005cec <HAL_TIM_PWM_Start>
		current_speed = parent.get_params().get_motor_param().pos_vel;
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	f7ff ff43 	bl	8003580 <_ZN11stepping_md15MotorController10get_paramsEv>
 80036fa:	4601      	mov	r1, r0
 80036fc:	4668      	mov	r0, sp
 80036fe:	f7ff ff7b 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 8003702:	9b03      	ldr	r3, [sp, #12]
 8003704:	60e3      	str	r3, [r4, #12]
	}
 8003706:	b004      	add	sp, #16
 8003708:	bd10      	pop	{r4, pc}

0800370a <_ZN11stepping_md15MotorController19PositionModeContext4stopEv>:
	void MotorController::PositionModeContext::stop(){
 800370a:	b510      	push	{r4, lr}
 800370c:	4604      	mov	r4, r0
		update_position();
 800370e:	f7ff ffab 	bl	8003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>
		HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	f7ff ff32 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 8003718:	2100      	movs	r1, #0
 800371a:	f002 fb25 	bl	8005d68 <HAL_TIM_PWM_Stop>
		current_speed = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60e3      	str	r3, [r4, #12]
	}
 8003722:	bd10      	pop	{r4, pc}

08003724 <_ZN11stepping_md15MotorController19PositionModeContext6enableEv>:
	void MotorController::PositionModeContext::enable(void){
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4604      	mov	r4, r0
		const GPIO_PIN ena_pin = parent.get_ena_pin();
 8003728:	6800      	ldr	r0, [r0, #0]
 800372a:	f7ff ff1f 	bl	800356c <_ZNK11stepping_md15MotorController11get_ena_pinEv>
 800372e:	4606      	mov	r6, r0
		const GPIO_Port ena_port = parent.get_ena_port();
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	f7ff ff1d 	bl	8003570 <_ZNK11stepping_md15MotorController12get_ena_portEv>
 8003736:	4605      	mov	r5, r0
		update_position();
 8003738:	4620      	mov	r0, r4
 800373a:	f7ff ff95 	bl	8003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>
		stop();
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff ffe3 	bl	800370a <_ZN11stepping_md15MotorController19PositionModeContext4stopEv>
		HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_SET);
 8003744:	4631      	mov	r1, r6
 8003746:	4628      	mov	r0, r5
	}
 8003748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_SET);
 800374c:	2201      	movs	r2, #1
 800374e:	f001 bda7 	b.w	80052a0 <HAL_GPIO_WritePin>

08003752 <_ZN11stepping_md15MotorController19PositionModeContext7disableEv>:
	void MotorController::PositionModeContext::disable(void){
 8003752:	b570      	push	{r4, r5, r6, lr}
 8003754:	4604      	mov	r4, r0
		const GPIO_PIN ena_pin = parent.get_ena_pin();
 8003756:	6800      	ldr	r0, [r0, #0]
 8003758:	f7ff ff08 	bl	800356c <_ZNK11stepping_md15MotorController11get_ena_pinEv>
 800375c:	4606      	mov	r6, r0
		const GPIO_Port ena_port = parent.get_ena_port();
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	f7ff ff06 	bl	8003570 <_ZNK11stepping_md15MotorController12get_ena_portEv>
 8003764:	4605      	mov	r5, r0
		update_position();
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff ff7e 	bl	8003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>
		stop();
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff ffcc 	bl	800370a <_ZN11stepping_md15MotorController19PositionModeContext4stopEv>
		HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
 8003772:	4631      	mov	r1, r6
 8003774:	4628      	mov	r0, r5
	}
 8003776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
 800377a:	2200      	movs	r2, #0
 800377c:	f001 bd90 	b.w	80052a0 <HAL_GPIO_WritePin>

08003780 <_ZN11stepping_md15MotorController19PositionModeContext14move_to_targetEv>:
	void MotorController::PositionModeContext::move_to_target(void){
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	4604      	mov	r4, r0
 8003784:	b085      	sub	sp, #20
		const MotorParam motor_param = parent.get_params().get_motor_param();
 8003786:	6800      	ldr	r0, [r0, #0]
 8003788:	f7ff fefa 	bl	8003580 <_ZN11stepping_md15MotorController10get_paramsEv>
 800378c:	4601      	mov	r1, r0
 800378e:	4668      	mov	r0, sp
 8003790:	f7ff ff32 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>

		update_position();
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff ff67 	bl	8003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>

		//方向を決める
		set_direction(motor_param.target - position);
 800379a:	6921      	ldr	r1, [r4, #16]
 800379c:	9802      	ldr	r0, [sp, #8]
 800379e:	f7fd f903 	bl	80009a8 <__aeabi_fsub>
 80037a2:	4601      	mov	r1, r0
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff ff7b 	bl	80036a0 <_ZN11stepping_md15MotorController19PositionModeContext13set_directionEf>
		//速度を変える
		const float rotate_per_second = current_speed / 2.0f / std::numbers::pi;
 80037aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80037ae:	68e0      	ldr	r0, [r4, #12]
 80037b0:	f7fd fa04 	bl	8000bbc <__aeabi_fmul>
 80037b4:	f7fc fe3a 	bl	800042c <__aeabi_f2d>
 80037b8:	a323      	add	r3, pc, #140	; (adr r3, 8003848 <_ZN11stepping_md15MotorController19PositionModeContext14move_to_targetEv+0xc8>)
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f7fc ffb7 	bl	8000730 <__aeabi_ddiv>
 80037c2:	f7fd f89d 	bl	8000900 <__aeabi_d2f>
		const uint16_t arr_val = (rotate_per_second != 0)? static_cast<uint16_t>(parent.get_source_clock() / (parent.get_pwm_tim()->Instance->PSC + 1) / motor_param.ppr / rotate_per_second - 1.0f) : 0;
 80037c6:	2100      	movs	r1, #0
		const float rotate_per_second = current_speed / 2.0f / std::numbers::pi;
 80037c8:	4606      	mov	r6, r0
		const uint16_t arr_val = (rotate_per_second != 0)? static_cast<uint16_t>(parent.get_source_clock() / (parent.get_pwm_tim()->Instance->PSC + 1) / motor_param.ppr / rotate_per_second - 1.0f) : 0;
 80037ca:	f7fd fb8b 	bl	8000ee4 <__aeabi_fcmpeq>
 80037ce:	4605      	mov	r5, r0
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d133      	bne.n	800383c <_ZN11stepping_md15MotorController19PositionModeContext14move_to_targetEv+0xbc>
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	f7ff fed5 	bl	8003584 <_ZNK11stepping_md15MotorController16get_source_clockEv>
 80037da:	4607      	mov	r7, r0
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	f7ff fecd 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 80037e2:	6803      	ldr	r3, [r0, #0]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	3301      	adds	r3, #1
 80037e8:	fbb7 f0f3 	udiv	r0, r7, r3
 80037ec:	f7fd f98e 	bl	8000b0c <__aeabi_ui2f>
 80037f0:	9901      	ldr	r1, [sp, #4]
 80037f2:	f7fd fa97 	bl	8000d24 <__aeabi_fdiv>
 80037f6:	4631      	mov	r1, r6
 80037f8:	f7fd fa94 	bl	8000d24 <__aeabi_fdiv>
 80037fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003800:	f7fd f8d2 	bl	80009a8 <__aeabi_fsub>
 8003804:	f7fd fba0 	bl	8000f48 <__aeabi_f2uiz>
 8003808:	b286      	uxth	r6, r0
		const uint16_t ccr_val = (arr_val >= 2)? arr_val / 2 - 1 : 0;
 800380a:	2e01      	cmp	r6, #1
 800380c:	d902      	bls.n	8003814 <_ZN11stepping_md15MotorController19PositionModeContext14move_to_targetEv+0x94>
 800380e:	0875      	lsrs	r5, r6, #1
 8003810:	3d01      	subs	r5, #1
 8003812:	b2ad      	uxth	r5, r5
		__HAL_TIM_SET_AUTORELOAD(parent.get_pwm_tim(), arr_val);
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	f7ff feb1 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 800381a:	6803      	ldr	r3, [r0, #0]
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	62de      	str	r6, [r3, #44]	; 0x2c
 8003820:	f7ff feac 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 8003824:	60c6      	str	r6, [r0, #12]
		__HAL_TIM_SET_COMPARE(parent.get_pwm_tim(), TIM_CHANNEL_1, ccr_val);
 8003826:	6820      	ldr	r0, [r4, #0]
 8003828:	f7ff fea8 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 800382c:	6803      	ldr	r3, [r0, #0]

		start();
 800382e:	4620      	mov	r0, r4
		__HAL_TIM_SET_COMPARE(parent.get_pwm_tim(), TIM_CHANNEL_1, ccr_val);
 8003830:	635d      	str	r5, [r3, #52]	; 0x34
	}
 8003832:	b005      	add	sp, #20
 8003834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		start();
 8003838:	f7ff bf52 	b.w	80036e0 <_ZN11stepping_md15MotorController19PositionModeContext5startEv>
		const uint16_t arr_val = (rotate_per_second != 0)? static_cast<uint16_t>(parent.get_source_clock() / (parent.get_pwm_tim()->Instance->PSC + 1) / motor_param.ppr / rotate_per_second - 1.0f) : 0;
 800383c:	2600      	movs	r6, #0
		const uint16_t ccr_val = (arr_val >= 2)? arr_val / 2 - 1 : 0;
 800383e:	4635      	mov	r5, r6
 8003840:	e7e8      	b.n	8003814 <_ZN11stepping_md15MotorController19PositionModeContext14move_to_targetEv+0x94>
 8003842:	bf00      	nop
 8003844:	f3af 8000 	nop.w
 8003848:	54442d18 	.word	0x54442d18
 800384c:	400921fb 	.word	0x400921fb

08003850 <_ZN11stepping_md15MotorController19PositionModeContext6updateEv>:
	void MotorController::PositionModeContext::update(void){
 8003850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003852:	4604      	mov	r4, r0
		//現在の位置を更新する
		update_position();
 8003854:	f7ff ff08 	bl	8003668 <_ZN11stepping_md15MotorController19PositionModeContext15update_positionEv>

		current_target = parent.get_params().get_motor_param().target;
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	f7ff fe91 	bl	8003580 <_ZN11stepping_md15MotorController10get_paramsEv>
 800385e:	4601      	mov	r1, r0
 8003860:	4668      	mov	r0, sp
 8003862:	f7ff fec9 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 8003866:	9a02      	ldr	r2, [sp, #8]
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <_ZN11stepping_md15MotorController19PositionModeContext6updateEv+0x58>)

		stepping_md::MotorParam motor_param = parent.get_params().get_motor_param();
 800386a:	6820      	ldr	r0, [r4, #0]
		current_target = parent.get_params().get_motor_param().target;
 800386c:	601a      	str	r2, [r3, #0]
		stepping_md::MotorParam motor_param = parent.get_params().get_motor_param();
 800386e:	f7ff fe87 	bl	8003580 <_ZN11stepping_md15MotorController10get_paramsEv>
 8003872:	4601      	mov	r1, r0
 8003874:	4668      	mov	r0, sp
 8003876:	f7ff febf 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>

		//目標位置に到達しているか確認する
		if(std::abs(motor_param.target - position) < error_threshold){
 800387a:	6921      	ldr	r1, [r4, #16]
 800387c:	9802      	ldr	r0, [sp, #8]
 800387e:	f7fd f893 	bl	80009a8 <__aeabi_fsub>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003882:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8003886:	6960      	ldr	r0, [r4, #20]
 8003888:	f7fd fb54 	bl	8000f34 <__aeabi_fcmpgt>
 800388c:	b128      	cbz	r0, 800389a <_ZN11stepping_md15MotorController19PositionModeContext6updateEv+0x4a>
			//目標位置に到達している場合は停止する
			stop();
 800388e:	4620      	mov	r0, r4
		}
		else{
			//目標位置に到達していない場合は、目標位置に向かって動かす
			move_to_target();
		}
	}
 8003890:	b004      	add	sp, #16
 8003892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			stop();
 8003896:	f7ff bf38 	b.w	800370a <_ZN11stepping_md15MotorController19PositionModeContext4stopEv>
			move_to_target();
 800389a:	4620      	mov	r0, r4
	}
 800389c:	b004      	add	sp, #16
 800389e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			move_to_target();
 80038a2:	f7ff bf6d 	b.w	8003780 <_ZN11stepping_md15MotorController19PositionModeContext14move_to_targetEv>
 80038a6:	bf00      	nop
 80038a8:	20000354 	.word	0x20000354

080038ac <_ZN11stepping_md15MotorController19PositionModeContext6onInitEv>:
	void MotorController::PositionModeContext::onInit(void){
 80038ac:	b510      	push	{r4, lr}
 80038ae:	4604      	mov	r4, r0
		start_time = HAL_GetTick();
 80038b0:	f001 fa1c 	bl	8004cec <HAL_GetTick>
		direction = 1;
 80038b4:	2301      	movs	r3, #1
 80038b6:	60a3      	str	r3, [r4, #8]
		current_speed = 0;
 80038b8:	2300      	movs	r3, #0
		start_time = HAL_GetTick();
 80038ba:	6060      	str	r0, [r4, #4]
		current_speed = 0;
 80038bc:	60e3      	str	r3, [r4, #12]
		position = 0;
		enable();
 80038be:	4620      	mov	r0, r4
		position = 0;
 80038c0:	6123      	str	r3, [r4, #16]
	}
 80038c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		enable();
 80038c6:	f7ff bf2d 	b.w	8003724 <_ZN11stepping_md15MotorController19PositionModeContext6enableEv>

080038ca <_ZN11stepping_md15MotorController19PositionModeContextC1ERS0_f>:
	MotorController::PositionModeContext::PositionModeContext(MotorController& parent, const float error_threshold): parent(parent), error_threshold(error_threshold){
 80038ca:	b510      	push	{r4, lr}
 80038cc:	2301      	movs	r3, #1
 80038ce:	6001      	str	r1, [r0, #0]
 80038d0:	2100      	movs	r1, #0
 80038d2:	e9c0 1301 	strd	r1, r3, [r0, #4]
 80038d6:	2300      	movs	r3, #0
 80038d8:	4604      	mov	r4, r0
 80038da:	60c3      	str	r3, [r0, #12]
 80038dc:	6103      	str	r3, [r0, #16]
 80038de:	6142      	str	r2, [r0, #20]
		onInit();
 80038e0:	f7ff ffe4 	bl	80038ac <_ZN11stepping_md15MotorController19PositionModeContext6onInitEv>
	};
 80038e4:	4620      	mov	r0, r4
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <_ZN11stepping_md15MotorController19PositionModeContext6onExitEv>:
	void MotorController::PositionModeContext::onExit(void){
 80038e8:	b510      	push	{r4, lr}
 80038ea:	4604      	mov	r4, r0
		stop();
 80038ec:	f7ff ff0d 	bl	800370a <_ZN11stepping_md15MotorController19PositionModeContext4stopEv>
		disable();
 80038f0:	4620      	mov	r0, r4
	}
 80038f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		disable();
 80038f6:	f7ff bf2c 	b.w	8003752 <_ZN11stepping_md15MotorController19PositionModeContext7disableEv>

080038fa <_ZN11stepping_md15MotorController19PositionModeContext11descriptionEv>:
	MD_MODE MotorController::PositionModeContext::description(void){return MD_MODE::POS;}
 80038fa:	2004      	movs	r0, #4
 80038fc:	4770      	bx	lr

080038fe <_ZN11stepping_md15MotorController19VelocityModeContext13set_directionEf>:

namespace stepping_md{
	MotorController::VelocityModeContext::VelocityModeContext(MotorController& parent): parent(parent){
		onInit();
	}
	void MotorController::VelocityModeContext::set_direction(float _direction){
 80038fe:	b570      	push	{r4, r5, r6, lr}
 8003900:	4604      	mov	r4, r0
		const GPIO_PIN dir_pin = parent.get_dir_pin();
 8003902:	6800      	ldr	r0, [r0, #0]
	void MotorController::VelocityModeContext::set_direction(float _direction){
 8003904:	460e      	mov	r6, r1
		const GPIO_PIN dir_pin = parent.get_dir_pin();
 8003906:	f7ff fe35 	bl	8003574 <_ZNK11stepping_md15MotorController11get_dir_pinEv>
 800390a:	4605      	mov	r5, r0
		const GPIO_Port dir_port = parent.get_dir_port();
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	f7ff fe33 	bl	8003578 <_ZNK11stepping_md15MotorController12get_dir_portEv>

		if(_direction > 0) HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_SET);
 8003912:	2100      	movs	r1, #0
		const GPIO_Port dir_port = parent.get_dir_port();
 8003914:	4604      	mov	r4, r0
		if(_direction > 0) HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_SET);
 8003916:	4630      	mov	r0, r6
 8003918:	f7fd fb0c 	bl	8000f34 <__aeabi_fcmpgt>
 800391c:	4602      	mov	r2, r0
 800391e:	b100      	cbz	r0, 8003922 <_ZN11stepping_md15MotorController19VelocityModeContext13set_directionEf+0x24>
 8003920:	2201      	movs	r2, #1
		else HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8003922:	4629      	mov	r1, r5
 8003924:	4620      	mov	r0, r4
	}
 8003926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		else HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 800392a:	f001 bcb9 	b.w	80052a0 <HAL_GPIO_WritePin>
	...

08003930 <_ZN11stepping_md15MotorController19VelocityModeContext11move_at_velEv>:
		const GPIO_Port ena_port = parent.get_ena_port();

		HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
		HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
	}
	void MotorController::VelocityModeContext::move_at_vel(void){
 8003930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003932:	4604      	mov	r4, r0
 8003934:	b085      	sub	sp, #20
		MotorParam motor_param = parent.get_params().get_motor_param();
 8003936:	6800      	ldr	r0, [r0, #0]
 8003938:	f7ff fe22 	bl	8003580 <_ZN11stepping_md15MotorController10get_paramsEv>
 800393c:	4601      	mov	r1, r0
 800393e:	4668      	mov	r0, sp
 8003940:	f7ff fe5a 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
		TIM_HandleTypeDef* pwm_tim = parent.get_pwm_tim();
 8003944:	6820      	ldr	r0, [r4, #0]
		MotorParam motor_param = parent.get_params().get_motor_param();
 8003946:	9e02      	ldr	r6, [sp, #8]
		TIM_HandleTypeDef* pwm_tim = parent.get_pwm_tim();
 8003948:	f7ff fe18 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 800394c:	4605      	mov	r5, r0

		set_direction(motor_param.target);
 800394e:	4631      	mov	r1, r6
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff ffd4 	bl	80038fe <_ZN11stepping_md15MotorController19VelocityModeContext13set_directionEf>
		const float rotate_per_second = std::abs(motor_param.target) / (2.0f * std::numbers::pi);
		const uint32_t arr_val = (uint32_t)(parent.get_source_clock()/(pwm_tim->Instance->PSC + 1)/rotate_per_second/motor_param.ppr) - 1;
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	f7ff fe14 	bl	8003584 <_ZNK11stepping_md15MotorController16get_source_clockEv>
 800395c:	682c      	ldr	r4, [r5, #0]
 800395e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003960:	3301      	adds	r3, #1
 8003962:	fbb0 f0f3 	udiv	r0, r0, r3
 8003966:	f7fd f8d1 	bl	8000b0c <__aeabi_ui2f>
 800396a:	4607      	mov	r7, r0
 800396c:	f026 4000 	bic.w	r0, r6, #2147483648	; 0x80000000
		const float rotate_per_second = std::abs(motor_param.target) / (2.0f * std::numbers::pi);
 8003970:	f7fc fd5c 	bl	800042c <__aeabi_f2d>
 8003974:	a312      	add	r3, pc, #72	; (adr r3, 80039c0 <_ZN11stepping_md15MotorController19VelocityModeContext11move_at_velEv+0x90>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f7fc fed9 	bl	8000730 <__aeabi_ddiv>
 800397e:	f7fc ffbf 	bl	8000900 <__aeabi_d2f>
 8003982:	4601      	mov	r1, r0
		const uint32_t arr_val = (uint32_t)(parent.get_source_clock()/(pwm_tim->Instance->PSC + 1)/rotate_per_second/motor_param.ppr) - 1;
 8003984:	4638      	mov	r0, r7
 8003986:	f7fd f9cd 	bl	8000d24 <__aeabi_fdiv>
 800398a:	9901      	ldr	r1, [sp, #4]
 800398c:	f7fd f9ca 	bl	8000d24 <__aeabi_fdiv>
 8003990:	f7fd fada 	bl	8000f48 <__aeabi_f2uiz>
 8003994:	1e43      	subs	r3, r0, #1
		pwm_tim->Instance->ARR = arr_val;
 8003996:	62e3      	str	r3, [r4, #44]	; 0x2c
		pwm_tim->Instance->CCR1 = (uint32_t)((arr_val + 1) / 2.0f) - 1;
 8003998:	f7fd f8b8 	bl	8000b0c <__aeabi_ui2f>
 800399c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80039a0:	f7fd f90c 	bl	8000bbc <__aeabi_fmul>
 80039a4:	f7fd fad0 	bl	8000f48 <__aeabi_f2uiz>
 80039a8:	3801      	subs	r0, #1
 80039aa:	6360      	str	r0, [r4, #52]	; 0x34
		HAL_TIM_PWM_Start(pwm_tim, TIM_CHANNEL_1);
 80039ac:	2100      	movs	r1, #0
 80039ae:	4628      	mov	r0, r5
	}
 80039b0:	b005      	add	sp, #20
 80039b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		HAL_TIM_PWM_Start(pwm_tim, TIM_CHANNEL_1);
 80039b6:	f002 b999 	b.w	8005cec <HAL_TIM_PWM_Start>
 80039ba:	bf00      	nop
 80039bc:	f3af 8000 	nop.w
 80039c0:	54442d18 	.word	0x54442d18
 80039c4:	401921fb 	.word	0x401921fb

080039c8 <_ZN11stepping_md15MotorController19VelocityModeContext6updateEv>:
	void MotorController::VelocityModeContext::update(void){
 80039c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039ca:	4604      	mov	r4, r0
		if(parent.get_params().get_motor_param().target != 0) move_at_vel();
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f7ff fdd7 	bl	8003580 <_ZN11stepping_md15MotorController10get_paramsEv>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4668      	mov	r0, sp
 80039d6:	f7ff fe0f 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 80039da:	2100      	movs	r1, #0
 80039dc:	9802      	ldr	r0, [sp, #8]
 80039de:	f7fd fa81 	bl	8000ee4 <__aeabi_fcmpeq>
 80039e2:	b928      	cbnz	r0, 80039f0 <_ZN11stepping_md15MotorController19VelocityModeContext6updateEv+0x28>
 80039e4:	4620      	mov	r0, r4
		else HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
	}
 80039e6:	b004      	add	sp, #16
 80039e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(parent.get_params().get_motor_param().target != 0) move_at_vel();
 80039ec:	f7ff bfa0 	b.w	8003930 <_ZN11stepping_md15MotorController19VelocityModeContext11move_at_velEv>
		else HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	f7ff fdc3 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 80039f6:	2100      	movs	r1, #0
	}
 80039f8:	b004      	add	sp, #16
 80039fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
 80039fe:	f002 b9b3 	b.w	8005d68 <HAL_TIM_PWM_Stop>

08003a02 <_ZN11stepping_md15MotorController19VelocityModeContext6onInitEv>:
	void MotorController::VelocityModeContext::onInit(void){
 8003a02:	b538      	push	{r3, r4, r5, lr}
 8003a04:	4604      	mov	r4, r0
		HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
 8003a06:	6800      	ldr	r0, [r0, #0]
 8003a08:	f7ff fdb8 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f002 f9ab 	bl	8005d68 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(parent.get_ena_port(), parent.get_ena_pin(), GPIO_PIN_SET);
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	f7ff fdac 	bl	8003570 <_ZNK11stepping_md15MotorController12get_ena_portEv>
 8003a18:	4605      	mov	r5, r0
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	f7ff fda6 	bl	800356c <_ZNK11stepping_md15MotorController11get_ena_pinEv>
 8003a20:	2201      	movs	r2, #1
 8003a22:	4601      	mov	r1, r0
 8003a24:	4628      	mov	r0, r5
	}
 8003a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(parent.get_ena_port(), parent.get_ena_pin(), GPIO_PIN_SET);
 8003a2a:	f001 bc39 	b.w	80052a0 <HAL_GPIO_WritePin>

08003a2e <_ZN11stepping_md15MotorController19VelocityModeContextC1ERS0_>:
	MotorController::VelocityModeContext::VelocityModeContext(MotorController& parent): parent(parent){
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	4604      	mov	r4, r0
 8003a32:	6001      	str	r1, [r0, #0]
		onInit();
 8003a34:	f7ff ffe5 	bl	8003a02 <_ZN11stepping_md15MotorController19VelocityModeContext6onInitEv>
	}
 8003a38:	4620      	mov	r0, r4
 8003a3a:	bd10      	pop	{r4, pc}

08003a3c <_ZN11stepping_md15MotorController19VelocityModeContext6onExitEv>:
	void MotorController::VelocityModeContext::onExit(void){
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4604      	mov	r4, r0
		HAL_TIM_PWM_Stop(parent.get_pwm_tim(), TIM_CHANNEL_1);
 8003a40:	6800      	ldr	r0, [r0, #0]
 8003a42:	f7ff fd9b 	bl	800357c <_ZN11stepping_md15MotorController11get_pwm_timEv>
 8003a46:	2100      	movs	r1, #0
 8003a48:	f002 f98e 	bl	8005d68 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(parent.get_ena_port(), parent.get_ena_pin(), GPIO_PIN_RESET);
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	f7ff fd8f 	bl	8003570 <_ZNK11stepping_md15MotorController12get_ena_portEv>
 8003a52:	4605      	mov	r5, r0
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	f7ff fd89 	bl	800356c <_ZNK11stepping_md15MotorController11get_ena_pinEv>
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4601      	mov	r1, r0
 8003a5e:	4628      	mov	r0, r5
	}
 8003a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(parent.get_ena_port(), parent.get_ena_pin(), GPIO_PIN_RESET);
 8003a64:	f001 bc1c 	b.w	80052a0 <HAL_GPIO_WritePin>

08003a68 <_ZN11stepping_md15MotorController19VelocityModeContext11descriptionEv>:
	MD_MODE MotorController::VelocityModeContext::description(void){return MD_MODE::VEL;}
 8003a68:	2005      	movs	r0, #5
 8003a6a:	4770      	bx	lr

08003a6c <_ZN11stepping_md7led_mgr11led_processEv>:
static bool is_yellow_led_on = false;
static uint8_t blink_num;
static uint8_t enabled_motor_num = 0;

namespace stepping_md::led_mgr{
	void led_process(void){
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		constexpr unsigned int green_led_on_time = 1900; //ms
		constexpr unsigned int green_led_off_time = 100; //ms
		constexpr unsigned int yellow_led_period = 2000; //ms
		constexpr unsigned int yellow_led_margin = 500; //ms
		constexpr unsigned int yellow_led_blink_period = yellow_led_period - yellow_led_margin;
		if(is_can_led_on && ((HAL_GetTick() - can_led_last_on) > can_led_on_time)){
 8003a70:	4c45      	ldr	r4, [pc, #276]	; (8003b88 <_ZN11stepping_md7led_mgr11led_processEv+0x11c>)
 8003a72:	7823      	ldrb	r3, [r4, #0]
 8003a74:	b173      	cbz	r3, 8003a94 <_ZN11stepping_md7led_mgr11led_processEv+0x28>
 8003a76:	f001 f939 	bl	8004cec <HAL_GetTick>
 8003a7a:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <_ZN11stepping_md7led_mgr11led_processEv+0x120>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1ac0      	subs	r0, r0, r3
 8003a80:	283c      	cmp	r0, #60	; 0x3c
 8003a82:	d907      	bls.n	8003a94 <_ZN11stepping_md7led_mgr11led_processEv+0x28>
			HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a8a:	4841      	ldr	r0, [pc, #260]	; (8003b90 <_ZN11stepping_md7led_mgr11led_processEv+0x124>)
 8003a8c:	f001 fc08 	bl	80052a0 <HAL_GPIO_WritePin>
			is_can_led_on = true;
 8003a90:	2301      	movs	r3, #1
 8003a92:	7023      	strb	r3, [r4, #0]
		}

		if(is_green_led_on && ((HAL_GetTick() - green_led_last_toggle) > green_led_on_time)){
 8003a94:	4d3f      	ldr	r5, [pc, #252]	; (8003b94 <_ZN11stepping_md7led_mgr11led_processEv+0x128>)
 8003a96:	4c40      	ldr	r4, [pc, #256]	; (8003b98 <_ZN11stepping_md7led_mgr11led_processEv+0x12c>)
 8003a98:	782b      	ldrb	r3, [r5, #0]
 8003a9a:	b14b      	cbz	r3, 8003ab0 <_ZN11stepping_md7led_mgr11led_processEv+0x44>
 8003a9c:	f001 f926 	bl	8004cec <HAL_GetTick>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	1ac0      	subs	r0, r0, r3
 8003aa4:	f240 736c 	movw	r3, #1900	; 0x76c
 8003aa8:	4298      	cmp	r0, r3
 8003aaa:	d80e      	bhi.n	8003aca <_ZN11stepping_md7led_mgr11led_processEv+0x5e>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
			is_green_led_on = false;
			green_led_last_toggle = HAL_GetTick();
		}else if((!is_green_led_on) && ((HAL_GetTick() - green_led_last_toggle) > green_led_off_time)){
 8003aac:	782b      	ldrb	r3, [r5, #0]
 8003aae:	b9b3      	cbnz	r3, 8003ade <_ZN11stepping_md7led_mgr11led_processEv+0x72>
 8003ab0:	f001 f91c 	bl	8004cec <HAL_GetTick>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	1ac0      	subs	r0, r0, r3
 8003ab8:	2864      	cmp	r0, #100	; 0x64
 8003aba:	d910      	bls.n	8003ade <_ZN11stepping_md7led_mgr11led_processEv+0x72>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8003abc:	2201      	movs	r2, #1
 8003abe:	4837      	ldr	r0, [pc, #220]	; (8003b9c <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	f001 fbed 	bl	80052a0 <HAL_GPIO_WritePin>
			is_green_led_on = true;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e005      	b.n	8003ad6 <_ZN11stepping_md7led_mgr11led_processEv+0x6a>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2101      	movs	r1, #1
 8003ace:	4833      	ldr	r0, [pc, #204]	; (8003b9c <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8003ad0:	f001 fbe6 	bl	80052a0 <HAL_GPIO_WritePin>
			is_green_led_on = false;
 8003ad4:	2300      	movs	r3, #0
			is_green_led_on = true;
 8003ad6:	702b      	strb	r3, [r5, #0]
			green_led_last_toggle = HAL_GetTick();
 8003ad8:	f001 f908 	bl	8004cec <HAL_GetTick>
 8003adc:	6020      	str	r0, [r4, #0]
		}

		if(enabled_motor_num != 0){
 8003ade:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003ba0 <_ZN11stepping_md7led_mgr11led_processEv+0x134>
 8003ae2:	4c30      	ldr	r4, [pc, #192]	; (8003ba4 <_ZN11stepping_md7led_mgr11led_processEv+0x138>)
 8003ae4:	f898 2000 	ldrb.w	r2, [r8]
 8003ae8:	2a00      	cmp	r2, #0
 8003aea:	d047      	beq.n	8003b7c <_ZN11stepping_md7led_mgr11led_processEv+0x110>
			int yellow_led_on_time, yellow_led_off_time;
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
			if(blink_num < enabled_motor_num){
 8003aec:	4e2e      	ldr	r6, [pc, #184]	; (8003ba8 <_ZN11stepping_md7led_mgr11led_processEv+0x13c>)
 8003aee:	7833      	ldrb	r3, [r6, #0]
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d231      	bcs.n	8003b58 <_ZN11stepping_md7led_mgr11led_processEv+0xec>
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
 8003af4:	f240 25ee 	movw	r5, #750	; 0x2ee
				if(is_yellow_led_on && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_on_time){
 8003af8:	4f2c      	ldr	r7, [pc, #176]	; (8003bac <_ZN11stepping_md7led_mgr11led_processEv+0x140>)
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
 8003afa:	fbb5 f5f2 	udiv	r5, r5, r2
				if(is_yellow_led_on && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_on_time){
 8003afe:	783b      	ldrb	r3, [r7, #0]
 8003b00:	b13b      	cbz	r3, 8003b12 <_ZN11stepping_md7led_mgr11led_processEv+0xa6>
 8003b02:	f001 f8f3 	bl	8004cec <HAL_GetTick>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	1ac0      	subs	r0, r0, r3
 8003b0a:	4285      	cmp	r5, r0
 8003b0c:	d318      	bcc.n	8003b40 <_ZN11stepping_md7led_mgr11led_processEv+0xd4>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
					is_yellow_led_on = false;
					yellow_led_last_toggle = HAL_GetTick();
				}else if((!is_yellow_led_on) && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_off_time){
 8003b0e:	783b      	ldrb	r3, [r7, #0]
 8003b10:	bb03      	cbnz	r3, 8003b54 <_ZN11stepping_md7led_mgr11led_processEv+0xe8>
 8003b12:	f001 f8eb 	bl	8004cec <HAL_GetTick>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	1ac0      	subs	r0, r0, r3
 8003b1a:	4285      	cmp	r5, r0
 8003b1c:	d21a      	bcs.n	8003b54 <_ZN11stepping_md7led_mgr11led_processEv+0xe8>
					if(blink_num < enabled_motor_num - 1){
 8003b1e:	f898 3000 	ldrb.w	r3, [r8]
 8003b22:	7832      	ldrb	r2, [r6, #0]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	429a      	cmp	r2, r3
 8003b28:	da06      	bge.n	8003b38 <_ZN11stepping_md7led_mgr11led_processEv+0xcc>
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	481b      	ldr	r0, [pc, #108]	; (8003b9c <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8003b30:	f001 fbb6 	bl	80052a0 <HAL_GPIO_WritePin>
						is_yellow_led_on = true;
 8003b34:	2301      	movs	r3, #1
 8003b36:	703b      	strb	r3, [r7, #0]
					}
					blink_num++;
 8003b38:	7833      	ldrb	r3, [r6, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	7033      	strb	r3, [r6, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8003b3e:	e006      	b.n	8003b4e <_ZN11stepping_md7led_mgr11led_processEv+0xe2>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2102      	movs	r1, #2
 8003b44:	4815      	ldr	r0, [pc, #84]	; (8003b9c <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8003b46:	f001 fbab 	bl	80052a0 <HAL_GPIO_WritePin>
					is_yellow_led_on = false;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	703b      	strb	r3, [r7, #0]
					yellow_led_last_toggle = HAL_GetTick();
				}
			}
		}else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			yellow_led_last_toggle = HAL_GetTick();
 8003b4e:	f001 f8cd 	bl	8004cec <HAL_GetTick>
 8003b52:	6020      	str	r0, [r4, #0]
		}
	}
 8003b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if((HAL_GetTick() - yellow_led_last_toggle) > yellow_led_margin){
 8003b58:	f001 f8c8 	bl	8004cec <HAL_GetTick>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	1ac0      	subs	r0, r0, r3
 8003b60:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003b64:	d9f6      	bls.n	8003b54 <_ZN11stepping_md7led_mgr11led_processEv+0xe8>
					blink_num = 0;
 8003b66:	2300      	movs	r3, #0
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	480b      	ldr	r0, [pc, #44]	; (8003b9c <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
					blink_num = 0;
 8003b6e:	7033      	strb	r3, [r6, #0]
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003b70:	f001 fb96 	bl	80052a0 <HAL_GPIO_WritePin>
					is_yellow_led_on = true;
 8003b74:	2201      	movs	r2, #1
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <_ZN11stepping_md7led_mgr11led_processEv+0x140>)
 8003b78:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8003b7a:	e7e8      	b.n	8003b4e <_ZN11stepping_md7led_mgr11led_processEv+0xe2>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4807      	ldr	r0, [pc, #28]	; (8003b9c <_ZN11stepping_md7led_mgr11led_processEv+0x130>)
 8003b80:	f001 fb8e 	bl	80052a0 <HAL_GPIO_WritePin>
 8003b84:	e7e3      	b.n	8003b4e <_ZN11stepping_md7led_mgr11led_processEv+0xe2>
 8003b86:	bf00      	nop
 8003b88:	20000358 	.word	0x20000358
 8003b8c:	2000035c 	.word	0x2000035c
 8003b90:	40011000 	.word	0x40011000
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000364 	.word	0x20000364
 8003b9c:	40010c00 	.word	0x40010c00
 8003ba0:	20000361 	.word	0x20000361
 8003ba4:	20000368 	.word	0x20000368
 8003ba8:	2000036c 	.word	0x2000036c
 8003bac:	20000360 	.word	0x20000360

08003bb0 <_ZN11stepping_md7led_mgr13blink_can_ledEv>:

	void blink_can_led(void){
 8003bb0:	b510      	push	{r4, lr}
		is_can_led_on = true;
 8003bb2:	2401      	movs	r4, #1
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <_ZN11stepping_md7led_mgr13blink_can_ledEv+0x20>)
 8003bb6:	701c      	strb	r4, [r3, #0]
		can_led_last_on = HAL_GetTick();
 8003bb8:	f001 f898 	bl	8004cec <HAL_GetTick>
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <_ZN11stepping_md7led_mgr13blink_can_ledEv+0x24>)
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_SET);
 8003bbe:	4622      	mov	r2, r4
	}
 8003bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		can_led_last_on = HAL_GetTick();
 8003bc4:	6018      	str	r0, [r3, #0]
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_SET);
 8003bc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bca:	4803      	ldr	r0, [pc, #12]	; (8003bd8 <_ZN11stepping_md7led_mgr13blink_can_ledEv+0x28>)
 8003bcc:	f001 bb68 	b.w	80052a0 <HAL_GPIO_WritePin>
 8003bd0:	20000358 	.word	0x20000358
 8003bd4:	2000035c 	.word	0x2000035c
 8003bd8:	40011000 	.word	0x40011000

08003bdc <_ZN11stepping_md7led_mgr22increase_enabled_motorEv>:

	void increase_enabled_motor(){
 8003bdc:	b510      	push	{r4, lr}
		if(enabled_motor_num == 0){
 8003bde:	4c07      	ldr	r4, [pc, #28]	; (8003bfc <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x20>)
 8003be0:	7823      	ldrb	r3, [r4, #0]
 8003be2:	b93b      	cbnz	r3, 8003bf4 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x18>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003be4:	2201      	movs	r2, #1
 8003be6:	2102      	movs	r1, #2
 8003be8:	4805      	ldr	r0, [pc, #20]	; (8003c00 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x24>)
 8003bea:	f001 fb59 	bl	80052a0 <HAL_GPIO_WritePin>
			is_yellow_led_on = true;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <_ZN11stepping_md7led_mgr22increase_enabled_motorEv+0x28>)
 8003bf2:	701a      	strb	r2, [r3, #0]
		}
		enabled_motor_num++;
 8003bf4:	7823      	ldrb	r3, [r4, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	7023      	strb	r3, [r4, #0]
	}
 8003bfa:	bd10      	pop	{r4, pc}
 8003bfc:	20000361 	.word	0x20000361
 8003c00:	40010c00 	.word	0x40010c00
 8003c04:	20000360 	.word	0x20000360

08003c08 <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv>:

	void decrease_enabled_motor(){
		enabled_motor_num = enabled_motor_num > 0? enabled_motor_num - 1 : 0;
 8003c08:	4a03      	ldr	r2, [pc, #12]	; (8003c18 <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv+0x10>)
 8003c0a:	7813      	ldrb	r3, [r2, #0]
 8003c0c:	b10b      	cbz	r3, 8003c12 <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv+0xa>
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	7013      	strb	r3, [r2, #0]
	}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000361 	.word	0x20000361

08003c1c <_ZN11stepping_md7led_mgr17disable_all_motorEv>:

	void disable_all_motor(){
		enabled_motor_num = 0;
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <_ZN11stepping_md7led_mgr17disable_all_motorEv+0x8>)
 8003c20:	701a      	strb	r2, [r3, #0]
	}
 8003c22:	4770      	bx	lr
 8003c24:	20000361 	.word	0x20000361

08003c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c2c:	2214      	movs	r2, #20
 8003c2e:	2100      	movs	r1, #0
 8003c30:	a808      	add	r0, sp, #32
 8003c32:	f003 f8a3 	bl	8006d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c36:	2214      	movs	r2, #20
 8003c38:	2100      	movs	r1, #0
 8003c3a:	a801      	add	r0, sp, #4
 8003c3c:	f003 f89e 	bl	8006d7c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c40:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c46:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c48:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c54:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c56:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c58:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c5a:	f001 fb33 	bl	80052c4 <HAL_RCC_OscConfig>
 8003c5e:	b108      	cbz	r0, 8003c64 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c60:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c62:	e7fe      	b.n	8003c62 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c64:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c66:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c6e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c70:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c74:	4621      	mov	r1, r4
 8003c76:	a801      	add	r0, sp, #4
 8003c78:	f001 fcfa 	bl	8005670 <HAL_RCC_ClockConfig>
 8003c7c:	b108      	cbz	r0, 8003c82 <SystemClock_Config+0x5a>
 8003c7e:	b672      	cpsid	i
  while (1)
 8003c80:	e7fe      	b.n	8003c80 <SystemClock_Config+0x58>
}
 8003c82:	b010      	add	sp, #64	; 0x40
 8003c84:	bd10      	pop	{r4, pc}
	...

08003c88 <main>:
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8003c8c:	f001 f810 	bl	8004cb0 <HAL_Init>
  SystemClock_Config();
 8003c90:	f7ff ffca 	bl	8003c28 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	2210      	movs	r2, #16
 8003c96:	2100      	movs	r1, #0
 8003c98:	a812      	add	r0, sp, #72	; 0x48
 8003c9a:	f003 f86f 	bl	8006d7c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c9e:	4b99      	ldr	r3, [pc, #612]	; (8003f04 <main+0x27c>)
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003ca6:	4898      	ldr	r0, [pc, #608]	; (8003f08 <main+0x280>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca8:	f042 0210 	orr.w	r2, r2, #16
 8003cac:	619a      	str	r2, [r3, #24]
 8003cae:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cb0:	2402      	movs	r4, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb2:	f002 0210 	and.w	r2, r2, #16
 8003cb6:	9201      	str	r2, [sp, #4]
 8003cb8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cba:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cbc:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	619a      	str	r2, [r3, #24]
 8003cc4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc8:	f002 0220 	and.w	r2, r2, #32
 8003ccc:	9202      	str	r2, [sp, #8]
 8003cce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	f042 0204 	orr.w	r2, r2, #4
 8003cd6:	619a      	str	r2, [r3, #24]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	f002 0204 	and.w	r2, r2, #4
 8003cde:	9203      	str	r2, [sp, #12]
 8003ce0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	f042 0208 	orr.w	r2, r2, #8
 8003ce8:	619a      	str	r2, [r3, #24]
 8003cea:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003cec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	9304      	str	r3, [sp, #16]
 8003cf4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003cf6:	f001 fad3 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f246 0103 	movw	r1, #24579	; 0x6003
 8003d00:	4882      	ldr	r0, [pc, #520]	; (8003f0c <main+0x284>)
 8003d02:	f001 facd 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ENAA_Pin|DIRA_Pin, GPIO_PIN_RESET);
 8003d06:	2200      	movs	r2, #0
 8003d08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d0c:	4880      	ldr	r0, [pc, #512]	; (8003f10 <main+0x288>)
 8003d0e:	f001 fac7 	bl	80052a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 8003d16:	487c      	ldr	r0, [pc, #496]	; (8003f08 <main+0x280>)
 8003d18:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d1a:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 8003d22:	f001 f9e1 	bl	80050e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin|ENAC_Pin|DIRC_Pin;
 8003d26:	f246 0301 	movw	r3, #24577	; 0x6001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2a:	4878      	ldr	r0, [pc, #480]	; (8003f0c <main+0x284>)
 8003d2c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2e:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d36:	f001 f9d7 	bl	80050e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003d3a:	4874      	ldr	r0, [pc, #464]	; (8003f0c <main+0x284>)
 8003d3c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d42:	e9cd 4612 	strd	r4, r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003d46:	f001 f9cf 	bl	80050e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d4e:	4b71      	ldr	r3, [pc, #452]	; (8003f14 <main+0x28c>)
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 8003d50:	486e      	ldr	r0, [pc, #440]	; (8003f0c <main+0x284>)
 8003d52:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d58:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 8003d5a:	f001 f9c5 	bl	80050e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAA_Pin|DIRA_Pin;
 8003d5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d62:	486b      	ldr	r0, [pc, #428]	; (8003f10 <main+0x288>)
 8003d64:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d66:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6e:	f001 f9bb 	bl	80050e8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d72:	462a      	mov	r2, r5
 8003d74:	4629      	mov	r1, r5
 8003d76:	2028      	movs	r0, #40	; 0x28
 8003d78:	f001 f962 	bl	8005040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d7c:	2028      	movs	r0, #40	; 0x28
 8003d7e:	f001 f991 	bl	80050a4 <HAL_NVIC_EnableIRQ>
  hcan.Instance = CAN1;
 8003d82:	4865      	ldr	r0, [pc, #404]	; (8003f18 <main+0x290>)
 8003d84:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <main+0x294>)
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003d86:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
  hcan.Init.Prescaler = 2;
 8003d8a:	e9c0 3400 	strd	r3, r4, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003d8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d92:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003d96:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003d9a:	8385      	strh	r5, [r0, #28]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003d9c:	6183      	str	r3, [r0, #24]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003d9e:	e9c0 5502 	strd	r5, r5, [r0, #8]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003da2:	f000 ffa9 	bl	8004cf8 <HAL_CAN_Init>
 8003da6:	4605      	mov	r5, r0
 8003da8:	b108      	cbz	r0, 8003dae <main+0x126>
 8003daa:	b672      	cpsid	i
  while (1)
 8003dac:	e7fe      	b.n	8003dac <main+0x124>
  htim1.Init.Prescaler = 71;
 8003dae:	2747      	movs	r7, #71	; 0x47
  htim1.Init.Period = 65535;
 8003db0:	f64f 76ff 	movw	r6, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003db4:	f04f 0880 	mov.w	r8, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db8:	4601      	mov	r1, r0
 8003dba:	2210      	movs	r2, #16
 8003dbc:	a807      	add	r0, sp, #28
 8003dbe:	f002 ffdd 	bl	8006d7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dc2:	221c      	movs	r2, #28
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	a80b      	add	r0, sp, #44	; 0x2c
  htim1.Instance = TIM1;
 8003dc8:	4c55      	ldr	r4, [pc, #340]	; (8003f20 <main+0x298>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dca:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dce:	f002 ffd5 	bl	8006d7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	a812      	add	r0, sp, #72	; 0x48
 8003dd8:	f002 ffd0 	bl	8006d7c <memset>
  htim1.Init.Prescaler = 71;
 8003ddc:	4b51      	ldr	r3, [pc, #324]	; (8003f24 <main+0x29c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003dde:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 71;
 8003de0:	e9c4 3700 	strd	r3, r7, [r4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de4:	e9c4 6503 	strd	r6, r5, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de8:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8003dea:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dec:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003df0:	f001 fda2 	bl	8005938 <HAL_TIM_Base_Init>
 8003df4:	b108      	cbz	r0, 8003dfa <main+0x172>
 8003df6:	b672      	cpsid	i
  while (1)
 8003df8:	e7fe      	b.n	8003df8 <main+0x170>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dfa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003dfe:	4620      	mov	r0, r4
 8003e00:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e02:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e04:	f001 fe81 	bl	8005b0a <HAL_TIM_ConfigClockSource>
 8003e08:	b108      	cbz	r0, 8003e0e <main+0x186>
 8003e0a:	b672      	cpsid	i
  while (1)
 8003e0c:	e7fe      	b.n	8003e0c <main+0x184>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f001 fdbe 	bl	8005990 <HAL_TIM_PWM_Init>
 8003e14:	b108      	cbz	r0, 8003e1a <main+0x192>
 8003e16:	b672      	cpsid	i
  while (1)
 8003e18:	e7fe      	b.n	8003e18 <main+0x190>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1a:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e1e:	a905      	add	r1, sp, #20
 8003e20:	4620      	mov	r0, r4
 8003e22:	f001 ffa3 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 8003e26:	4602      	mov	r2, r0
 8003e28:	b108      	cbz	r0, 8003e2e <main+0x1a6>
 8003e2a:	b672      	cpsid	i
  while (1)
 8003e2c:	e7fe      	b.n	8003e2c <main+0x1a4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e2e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e30:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003e34:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e38:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e3c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e3e:	a90b      	add	r1, sp, #44	; 0x2c
 8003e40:	4620      	mov	r0, r4
 8003e42:	f001 fdfd 	bl	8005a40 <HAL_TIM_PWM_ConfigChannel>
 8003e46:	b108      	cbz	r0, 8003e4c <main+0x1c4>
 8003e48:	b672      	cpsid	i
  while (1)
 8003e4a:	e7fe      	b.n	8003e4a <main+0x1c2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e50:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e54:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e58:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e5a:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e5c:	a912      	add	r1, sp, #72	; 0x48
 8003e5e:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e60:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e62:	f001 ffad 	bl	8005dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e66:	4681      	mov	r9, r0
 8003e68:	b108      	cbz	r0, 8003e6e <main+0x1e6>
 8003e6a:	b672      	cpsid	i
  while (1)
 8003e6c:	e7fe      	b.n	8003e6c <main+0x1e4>
  HAL_TIM_MspPostInit(&htim1);
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f000 f8e6 	bl	8004040 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e74:	2210      	movs	r2, #16
 8003e76:	4649      	mov	r1, r9
 8003e78:	a80b      	add	r0, sp, #44	; 0x2c
 8003e7a:	f002 ff7f 	bl	8006d7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e7e:	221c      	movs	r2, #28
 8003e80:	4649      	mov	r1, r9
 8003e82:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e84:	e9cd 9907 	strd	r9, r9, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e88:	f002 ff78 	bl	8006d7c <memset>
  htim2.Instance = TIM2;
 8003e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e90:	4c25      	ldr	r4, [pc, #148]	; (8003f28 <main+0x2a0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e92:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 71;
 8003e94:	e9c4 3700 	strd	r3, r7, [r4]
  htim2.Init.Period = 65535;
 8003e98:	e9c4 9602 	strd	r9, r6, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9c:	f8c4 9010 	str.w	r9, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ea0:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ea4:	f001 fd48 	bl	8005938 <HAL_TIM_Base_Init>
 8003ea8:	b108      	cbz	r0, 8003eae <main+0x226>
 8003eaa:	b672      	cpsid	i
  while (1)
 8003eac:	e7fe      	b.n	8003eac <main+0x224>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003eae:	4620      	mov	r0, r4
 8003eb0:	a90b      	add	r1, sp, #44	; 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eb2:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003eb4:	f001 fe29 	bl	8005b0a <HAL_TIM_ConfigClockSource>
 8003eb8:	b108      	cbz	r0, 8003ebe <main+0x236>
 8003eba:	b672      	cpsid	i
  while (1)
 8003ebc:	e7fe      	b.n	8003ebc <main+0x234>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f001 fd66 	bl	8005990 <HAL_TIM_PWM_Init>
 8003ec4:	b108      	cbz	r0, 8003eca <main+0x242>
 8003ec6:	b672      	cpsid	i
  while (1)
 8003ec8:	e7fe      	b.n	8003ec8 <main+0x240>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eca:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ecc:	4816      	ldr	r0, [pc, #88]	; (8003f28 <main+0x2a0>)
 8003ece:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ed4:	f001 ff4a 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	b108      	cbz	r0, 8003ee0 <main+0x258>
 8003edc:	b672      	cpsid	i
  while (1)
 8003ede:	e7fe      	b.n	8003ede <main+0x256>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ee0:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ee2:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 8003ee4:	e9cd 3012 	strd	r3, r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee8:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eea:	a912      	add	r1, sp, #72	; 0x48
 8003eec:	480e      	ldr	r0, [pc, #56]	; (8003f28 <main+0x2a0>)
 8003eee:	f001 fda7 	bl	8005a40 <HAL_TIM_PWM_ConfigChannel>
 8003ef2:	b108      	cbz	r0, 8003ef8 <main+0x270>
 8003ef4:	b672      	cpsid	i
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <main+0x26e>
  HAL_TIM_MspPostInit(&htim2);
 8003ef8:	480b      	ldr	r0, [pc, #44]	; (8003f28 <main+0x2a0>)
 8003efa:	f000 f8a1 	bl	8004040 <HAL_TIM_MspPostInit>
  wrapper_cpp();
 8003efe:	f000 fd33 	bl	8004968 <wrapper_cpp>
  while (1)
 8003f02:	e7fe      	b.n	8003f02 <main+0x27a>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40010c00 	.word	0x40010c00
 8003f10:	40010800 	.word	0x40010800
 8003f14:	10310000 	.word	0x10310000
 8003f18:	20000370 	.word	0x20000370
 8003f1c:	40006400 	.word	0x40006400
 8003f20:	20000398 	.word	0x20000398
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	200003e0 	.word	0x200003e0

08003f2c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <HAL_MspInit+0x3c>)
{
 8003f2e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	619a      	str	r2, [r3, #24]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	f002 0201 	and.w	r2, r2, #1
 8003f3e:	9200      	str	r2, [sp, #0]
 8003f40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f48:	61da      	str	r2, [r3, #28]
 8003f4a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f4c:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f56:	6853      	ldr	r3, [r2, #4]
 8003f58:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f62:	b002      	add	sp, #8
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40010000 	.word	0x40010000

08003f70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f70:	b510      	push	{r4, lr}
 8003f72:	4604      	mov	r4, r0
 8003f74:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f76:	2210      	movs	r2, #16
 8003f78:	2100      	movs	r1, #0
 8003f7a:	a802      	add	r0, sp, #8
 8003f7c:	f002 fefe 	bl	8006d7c <memset>
  if(hcan->Instance==CAN1)
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_CAN_MspInit+0x7c>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d12e      	bne.n	8003fe6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f88:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003f8c:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8e:	4818      	ldr	r0, [pc, #96]	; (8003ff0 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f90:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003f94:	61da      	str	r2, [r3, #28]
 8003f96:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f98:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f9a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003f9e:	9200      	str	r2, [sp, #0]
 8003fa0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	f042 0208 	orr.w	r2, r2, #8
 8003fa8:	619a      	str	r2, [r3, #24]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fba:	f001 f895 	bl	80050e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fc8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fca:	4809      	ldr	r0, [pc, #36]	; (8003ff0 <HAL_CAN_MspInit+0x80>)
 8003fcc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd0:	f001 f88a 	bl	80050e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003fd4:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_CAN_MspInit+0x84>)
 8003fd6:	6853      	ldr	r3, [r2, #4]
 8003fd8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003fdc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	bf00      	nop
 8003fec:	40006400 	.word	0x40006400
 8003ff0:	40010c00 	.word	0x40010c00
 8003ff4:	40010000 	.word	0x40010000

08003ff8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003ff8:	6803      	ldr	r3, [r0, #0]
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <HAL_TIM_Base_MspInit+0x40>)
{
 8003ffc:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10b      	bne.n	800401a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <HAL_TIM_Base_MspInit+0x44>)
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400a:	619a      	str	r2, [r3, #24]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004016:	b002      	add	sp, #8
 8004018:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d1fa      	bne.n	8004016 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004020:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	61da      	str	r2, [r3, #28]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	9b01      	ldr	r3, [sp, #4]
}
 8004036:	e7ee      	b.n	8004016 <HAL_TIM_Base_MspInit+0x1e>
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004040:	b510      	push	{r4, lr}
 8004042:	4604      	mov	r4, r0
 8004044:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004046:	2210      	movs	r2, #16
 8004048:	2100      	movs	r1, #0
 800404a:	a802      	add	r0, sp, #8
 800404c:	f002 fe96 	bl	8006d7c <memset>
  if(htim->Instance==TIM1)
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_TIM_MspPostInit+0x64>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d115      	bne.n	8004084 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HAL_TIM_MspPostInit+0x68>)
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	f042 0204 	orr.w	r2, r2, #4
 8004060:	619a      	str	r2, [r3, #24]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800406c:	f44f 7380 	mov.w	r3, #256	; 0x100

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004070:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004074:	480d      	ldr	r0, [pc, #52]	; (80040ac <HAL_TIM_MspPostInit+0x6c>)
 8004076:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407c:	f001 f834 	bl	80050e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004080:	b006      	add	sp, #24
 8004082:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d1fa      	bne.n	8004080 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	f042 0204 	orr.w	r2, r2, #4
 8004094:	619a      	str	r2, [r3, #24]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e7e5      	b.n	8004070 <HAL_TIM_MspPostInit+0x30>
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40010800 	.word	0x40010800

080040b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <NMI_Handler>

080040b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040b2:	e7fe      	b.n	80040b2 <HardFault_Handler>

080040b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b4:	e7fe      	b.n	80040b4 <MemManage_Handler>

080040b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040b6:	e7fe      	b.n	80040b6 <BusFault_Handler>

080040b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b8:	e7fe      	b.n	80040b8 <UsageFault_Handler>

080040ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ba:	4770      	bx	lr

080040bc <DebugMon_Handler>:
 80040bc:	4770      	bx	lr

080040be <PendSV_Handler>:
 80040be:	4770      	bx	lr

080040c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c0:	f000 be08 	b.w	8004cd4 <HAL_IncTick>

080040c4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 80040c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80040c8:	f001 b8f0 	b.w	80052ac <HAL_GPIO_EXTI_IRQHandler>

080040cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040cc:	2001      	movs	r0, #1
 80040ce:	4770      	bx	lr

080040d0 <_kill>:

int _kill(int pid, int sig)
{
 80040d0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040d2:	f002 fdf1 	bl	8006cb8 <__errno>
 80040d6:	2316      	movs	r3, #22
 80040d8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80040da:	f04f 30ff 	mov.w	r0, #4294967295
 80040de:	bd08      	pop	{r3, pc}

080040e0 <_exit>:

void _exit (int status)
{
 80040e0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040e2:	f002 fde9 	bl	8006cb8 <__errno>
 80040e6:	2316      	movs	r3, #22
 80040e8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80040ea:	e7fe      	b.n	80040ea <_exit+0xa>

080040ec <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <_sbrk+0x30>)
{
 80040ee:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80040f0:	6811      	ldr	r1, [r2, #0]
{
 80040f2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80040f4:	b909      	cbnz	r1, 80040fa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80040f6:	490a      	ldr	r1, [pc, #40]	; (8004120 <_sbrk+0x34>)
 80040f8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fa:	6810      	ldr	r0, [r2, #0]
 80040fc:	4909      	ldr	r1, [pc, #36]	; (8004124 <_sbrk+0x38>)
 80040fe:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <_sbrk+0x3c>)
 8004100:	4403      	add	r3, r0
 8004102:	1b09      	subs	r1, r1, r4
 8004104:	428b      	cmp	r3, r1
 8004106:	d906      	bls.n	8004116 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004108:	f002 fdd6 	bl	8006cb8 <__errno>
 800410c:	230c      	movs	r3, #12
 800410e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004110:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004114:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004116:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004118:	e7fc      	b.n	8004114 <_sbrk+0x28>
 800411a:	bf00      	nop
 800411c:	20000428 	.word	0x20000428
 8004120:	20000458 	.word	0x20000458
 8004124:	20002800 	.word	0x20002800
 8004128:	00000400 	.word	0x00000400

0800412c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800412c:	4770      	bx	lr
	...

08004130 <_ZL22common_target_callbackfRN11stepping_md10ParametersE>:
		current_param.target = 0;
		param.set_motor_param(current_param);
	}
}

void common_target_callback(float value, Parameters& param){
 8004130:	b530      	push	{r4, r5, lr}
 8004132:	b085      	sub	sp, #20
 8004134:	4605      	mov	r5, r0
	MotorParam current_param = param.get_motor_param();
 8004136:	4668      	mov	r0, sp
void common_target_callback(float value, Parameters& param){
 8004138:	460c      	mov	r4, r1
	MotorParam current_param = param.get_motor_param();
 800413a:	f7ff fa5d 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>

	if((!IS_EMERGENCY()) && current_param.mode != MD_MODE::DISABLE){
 800413e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004142:	4808      	ldr	r0, [pc, #32]	; (8004164 <_ZL22common_target_callbackfRN11stepping_md10ParametersE+0x34>)
 8004144:	f001 f8a6 	bl	8005294 <HAL_GPIO_ReadPin>
 8004148:	b150      	cbz	r0, 8004160 <_ZL22common_target_callbackfRN11stepping_md10ParametersE+0x30>
 800414a:	2101      	movs	r1, #1
 800414c:	f89d 0000 	ldrb.w	r0, [sp]
 8004150:	f7ff fa4b 	bl	80035ea <_ZN11stepping_mdneENS_7MD_MODEES0_>
 8004154:	b120      	cbz	r0, 8004160 <_ZL22common_target_callbackfRN11stepping_md10ParametersE+0x30>
		current_param.target = value;
		param.set_motor_param(current_param);
 8004156:	4669      	mov	r1, sp
 8004158:	4620      	mov	r0, r4
		current_param.target = value;
 800415a:	9502      	str	r5, [sp, #8]
		param.set_motor_param(current_param);
 800415c:	f7ff fa54 	bl	8003608 <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	}
}
 8004160:	b005      	add	sp, #20
 8004162:	bd30      	pop	{r4, r5, pc}
 8004164:	40010c00 	.word	0x40010c00

08004168 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E9_M_invokeERKSt9_Any_dataOfOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004168:	b508      	push	{r3, lr}
 800416a:	460b      	mov	r3, r1
				common_target_callback(value, parameters[A]);
 800416c:	6801      	ldr	r1, [r0, #0]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	f7ff ffde 	bl	8004130 <_ZL22common_target_callbackfRN11stepping_md10ParametersE>
      }
 8004174:	2000      	movs	r0, #0
 8004176:	bd08      	pop	{r3, pc}

08004178 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E9_M_invokeERKSt9_Any_dataOfOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004178:	b508      	push	{r3, lr}
 800417a:	460b      	mov	r3, r1
				common_target_callback(value, parameters[C]);
 800417c:	6801      	ldr	r1, [r0, #0]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	3114      	adds	r1, #20
 8004182:	f7ff ffd5 	bl	8004130 <_ZL22common_target_callbackfRN11stepping_md10ParametersE>
      }
 8004186:	2000      	movs	r0, #0
 8004188:	bd08      	pop	{r3, pc}
	...

0800418c <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0>:
void common_cmd_callback(uint8_t value, Parameters& param, MotorController& motor){
 800418c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800418e:	4604      	mov	r4, r0
	const bool is_same_mode = static_cast<MD_MODE>(value) == param.get_motor_param().mode;
 8004190:	4668      	mov	r0, sp
void common_cmd_callback(uint8_t value, Parameters& param, MotorController& motor){
 8004192:	460d      	mov	r5, r1
	const bool is_same_mode = static_cast<MD_MODE>(value) == param.get_motor_param().mode;
 8004194:	f7ff fa30 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 8004198:	f89d 1000 	ldrb.w	r1, [sp]
 800419c:	4620      	mov	r0, r4
 800419e:	f7ff fa17 	bl	80035d0 <_ZN11stepping_mdeqENS_7MD_MODEES0_>
	if(!IS_EMERGENCY() && is_appropriate_val && (!is_same_mode)){
 80041a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
	const bool is_same_mode = static_cast<MD_MODE>(value) == param.get_motor_param().mode;
 80041a6:	4606      	mov	r6, r0
	if(!IS_EMERGENCY() && is_appropriate_val && (!is_same_mode)){
 80041a8:	4818      	ldr	r0, [pc, #96]	; (800420c <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x80>)
 80041aa:	f001 f873 	bl	8005294 <HAL_GPIO_ReadPin>
 80041ae:	b358      	cbz	r0, 8004208 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x7c>
 80041b0:	f014 0ffa 	tst.w	r4, #250	; 0xfa
 80041b4:	d128      	bne.n	8004208 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x7c>
 80041b6:	bb3e      	cbnz	r6, 8004208 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x7c>
		MotorParam current_param = param.get_motor_param();
 80041b8:	4629      	mov	r1, r5
 80041ba:	4668      	mov	r0, sp
 80041bc:	f7ff fa1c 	bl	80035f8 <_ZN11stepping_md10Parameters15get_motor_paramEv>
		if(current_param.mode == MD_MODE::DISABLE && static_cast<MD_MODE>(value) != MD_MODE::DISABLE) led_mgr::increase_enabled_motor();
 80041c0:	2101      	movs	r1, #1
 80041c2:	f89d 0000 	ldrb.w	r0, [sp]
 80041c6:	f7ff fa03 	bl	80035d0 <_ZN11stepping_mdeqENS_7MD_MODEES0_>
 80041ca:	b968      	cbnz	r0, 80041e8 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x5c>
		else if(current_param.mode != MD_MODE::DISABLE && static_cast<MD_MODE>(value) == MD_MODE::DISABLE) led_mgr::decrease_enabled_motor();
 80041cc:	2101      	movs	r1, #1
 80041ce:	f89d 0000 	ldrb.w	r0, [sp]
 80041d2:	f7ff fa0a 	bl	80035ea <_ZN11stepping_mdneENS_7MD_MODEES0_>
 80041d6:	b178      	cbz	r0, 80041f8 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x6c>
 80041d8:	2101      	movs	r1, #1
 80041da:	4620      	mov	r0, r4
 80041dc:	f7ff f9f8 	bl	80035d0 <_ZN11stepping_mdeqENS_7MD_MODEES0_>
 80041e0:	b150      	cbz	r0, 80041f8 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x6c>
 80041e2:	f7ff fd11 	bl	8003c08 <_ZN11stepping_md7led_mgr22decrease_enabled_motorEv>
 80041e6:	e007      	b.n	80041f8 <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x6c>
		if(current_param.mode == MD_MODE::DISABLE && static_cast<MD_MODE>(value) != MD_MODE::DISABLE) led_mgr::increase_enabled_motor();
 80041e8:	2101      	movs	r1, #1
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7ff f9fd 	bl	80035ea <_ZN11stepping_mdneENS_7MD_MODEES0_>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d0eb      	beq.n	80041cc <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0+0x40>
 80041f4:	f7ff fcf2 	bl	8003bdc <_ZN11stepping_md7led_mgr22increase_enabled_motorEv>
		current_param.target = 0;
 80041f8:	2300      	movs	r3, #0
		param.set_motor_param(current_param);
 80041fa:	4669      	mov	r1, sp
 80041fc:	4628      	mov	r0, r5
		current_param.mode = static_cast<MD_MODE>(value);
 80041fe:	f88d 4000 	strb.w	r4, [sp]
		current_param.target = 0;
 8004202:	9302      	str	r3, [sp, #8]
		param.set_motor_param(current_param);
 8004204:	f7ff fa00 	bl	8003608 <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
}
 8004208:	b004      	add	sp, #16
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	40010c00 	.word	0x40010c00

08004210 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E9_M_invokeERKSt9_Any_dataOhOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004210:	b508      	push	{r3, lr}
 8004212:	460b      	mov	r3, r1
				common_cmd_callback(value, parameters[A], motors[A]);
 8004214:	6801      	ldr	r1, [r0, #0]
 8004216:	7818      	ldrb	r0, [r3, #0]
 8004218:	f7ff ffb8 	bl	800418c <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0>
      }
 800421c:	2000      	movs	r0, #0
 800421e:	bd08      	pop	{r3, pc}

08004220 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E9_M_invokeERKSt9_Any_dataOhOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004220:	b508      	push	{r3, lr}
 8004222:	460b      	mov	r3, r1
				common_cmd_callback(value, parameters[C], motors[C]);
 8004224:	6801      	ldr	r1, [r0, #0]
 8004226:	7818      	ldrb	r0, [r3, #0]
 8004228:	3114      	adds	r1, #20
 800422a:	f7ff ffaf 	bl	800418c <_ZL19common_cmd_callbackhRN11stepping_md10ParametersERNS_15MotorControllerE.constprop.0>
      }
 800422e:	2000      	movs	r0, #0
 8004230:	bd08      	pop	{r3, pc}

08004232 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004232:	4613      	mov	r3, r2
	  if (_Num)
 8004234:	1a0a      	subs	r2, r1, r0
 8004236:	d003      	beq.n	8004240 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0+0xe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004238:	4601      	mov	r1, r0
 800423a:	1a98      	subs	r0, r3, r2
 800423c:	f002 bd84 	b.w	8006d48 <memmove>
    }
 8004240:	4770      	bx	lr

08004242 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004242:	b507      	push	{r0, r1, r2, lr}
 8004244:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 8004246:	6800      	ldr	r0, [r0, #0]

			//Canからの受信があったときに呼ばれる関数を登録する関数
			template<typename T>
			void set_callback(const std::function<int(T, uint32_t)> callback){
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
					return callback(*reinterpret_cast<T*>(pValue), id);
 8004248:	680a      	ldr	r2, [r1, #0]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 800424e:	6883      	ldr	r3, [r0, #8]
 8004250:	9200      	str	r2, [sp, #0]
 8004252:	b90b      	cbnz	r3, 8004258 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om+0x16>
	__throw_bad_function_call();
 8004254:	f002 fc94 	bl	8006b80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004258:	4669      	mov	r1, sp
 800425a:	68c3      	ldr	r3, [r0, #12]
 800425c:	aa01      	add	r2, sp, #4
 800425e:	4798      	blx	r3
      }
 8004260:	b003      	add	sp, #12
 8004262:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004268 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 8004268:	b12a      	cbz	r2, 8004276 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 800426a:	2a01      	cmp	r2, #1
 800426c:	d006      	beq.n	800427c <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 800426e:	2a02      	cmp	r2, #2
 8004270:	d105      	bne.n	800427e <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 8004272:	680b      	ldr	r3, [r1, #0]
 8004274:	e000      	b.n	8004278 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8004276:	4b03      	ldr	r3, [pc, #12]	; (8004284 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 8004278:	6003      	str	r3, [r0, #0]
	      break;
 800427a:	e000      	b.n	800427e <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800427c:	6001      	str	r1, [r0, #0]
      }
 800427e:	2000      	movs	r0, #0
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	08007384 	.word	0x08007384

08004288 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 8004288:	b12a      	cbz	r2, 8004296 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 800428a:	2a01      	cmp	r2, #1
 800428c:	d006      	beq.n	800429c <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 800428e:	2a02      	cmp	r2, #2
 8004290:	d105      	bne.n	800429e <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 8004292:	680b      	ldr	r3, [r1, #0]
 8004294:	e000      	b.n	8004298 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8004296:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 8004298:	6003      	str	r3, [r0, #0]
	      break;
 800429a:	e000      	b.n	800429e <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800429c:	6001      	str	r1, [r0, #0]
      }
 800429e:	2000      	movs	r0, #0
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	0800737c 	.word	0x0800737c

080042a8 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80042a8:	4603      	mov	r3, r0
	switch (__op)
 80042aa:	b142      	cbz	r2, 80042be <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 80042ac:	2a01      	cmp	r2, #1
 80042ae:	d00a      	beq.n	80042c6 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1e>
	  switch (__op)
 80042b0:	2a02      	cmp	r2, #2
 80042b2:	bf04      	itt	eq
 80042b4:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 80042b8:	e9c3 0100 	strdeq	r0, r1, [r3]
	      break;
 80042bc:	e001      	b.n	80042c2 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80042be:	4a03      	ldr	r2, [pc, #12]	; (80042cc <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x24>)
 80042c0:	6002      	str	r2, [r0, #0]
      }
 80042c2:	2000      	movs	r0, #0
 80042c4:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80042c6:	6001      	str	r1, [r0, #0]
	    break;
 80042c8:	e7fb      	b.n	80042c2 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
 80042ca:	bf00      	nop
 80042cc:	0800738c 	.word	0x0800738c

080042d0 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80042d0:	4603      	mov	r3, r0
	switch (__op)
 80042d2:	b142      	cbz	r2, 80042e6 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 80042d4:	2a01      	cmp	r2, #1
 80042d6:	d00a      	beq.n	80042ee <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1e>
	  switch (__op)
 80042d8:	2a02      	cmp	r2, #2
 80042da:	bf04      	itt	eq
 80042dc:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 80042e0:	e9c3 0100 	strdeq	r0, r1, [r3]
	      break;
 80042e4:	e001      	b.n	80042ea <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80042e6:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x24>)
 80042e8:	6002      	str	r2, [r0, #0]
      }
 80042ea:	2000      	movs	r0, #0
 80042ec:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80042ee:	6001      	str	r1, [r0, #0]
	    break;
 80042f0:	e7fb      	b.n	80042ea <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1a>
 80042f2:	bf00      	nop
 80042f4:	08007394 	.word	0x08007394

080042f8 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80042f8:	b507      	push	{r0, r1, r2, lr}
 80042fa:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 80042fc:	6800      	ldr	r0, [r0, #0]
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80042fe:	680a      	ldr	r2, [r1, #0]
 8004300:	7812      	ldrb	r2, [r2, #0]
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
 8004302:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 8004304:	6883      	ldr	r3, [r0, #8]
 8004306:	f88d 2003 	strb.w	r2, [sp, #3]
 800430a:	b90b      	cbnz	r3, 8004310 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E9_M_invokeERKSt9_Any_dataOS0_Om+0x18>
	__throw_bad_function_call();
 800430c:	f002 fc38 	bl	8006b80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004310:	68c3      	ldr	r3, [r0, #12]
 8004312:	aa01      	add	r2, sp, #4
 8004314:	f10d 0103 	add.w	r1, sp, #3
 8004318:	4798      	blx	r3
      }
 800431a:	b003      	add	sp, #12
 800431c:	f85d fb04 	ldr.w	pc, [sp], #4

08004320 <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
 8004320:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8004322:	b510      	push	{r4, lr}
 8004324:	4604      	mov	r4, r0
      if (_M_manager)
 8004326:	b113      	cbz	r3, 800432e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8004328:	2203      	movs	r2, #3
 800432a:	4601      	mov	r1, r0
 800432c:	4798      	blx	r3
    }
 800432e:	4620      	mov	r0, r4
 8004330:	bd10      	pop	{r4, pc}
	...

08004334 <HAL_GPIO_EXTI_Callback>:
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
	return result;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == EMS_Pin){
 8004334:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004338:	4601      	mov	r1, r0
 800433a:	b508      	push	{r3, lr}
	if(GPIO_Pin == EMS_Pin){
 800433c:	d106      	bne.n	800434c <HAL_GPIO_EXTI_Callback+0x18>
		if(IS_EMERGENCY()) error_request_flag = true;
 800433e:	4804      	ldr	r0, [pc, #16]	; (8004350 <HAL_GPIO_EXTI_Callback+0x1c>)
 8004340:	f000 ffa8 	bl	8005294 <HAL_GPIO_ReadPin>
 8004344:	b910      	cbnz	r0, 800434c <HAL_GPIO_EXTI_Callback+0x18>
 8004346:	2201      	movs	r2, #1
 8004348:	4b02      	ldr	r3, [pc, #8]	; (8004354 <HAL_GPIO_EXTI_Callback+0x20>)
 800434a:	701a      	strb	r2, [r3, #0]
	}
}
 800434c:	bd08      	pop	{r3, pc}
 800434e:	bf00      	nop
 8004350:	40010c00 	.word	0x40010c00
 8004354:	2000042c 	.word	0x2000042c

08004358 <_ZNSt8functionIFihmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8004358:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 800435a:	2300      	movs	r3, #0
 800435c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 800435e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8004360:	4604      	mov	r4, r0
 8004362:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8004364:	b12b      	cbz	r3, 8004372 <_ZNSt8functionIFihmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8004366:	2202      	movs	r2, #2
 8004368:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800436a:	68eb      	ldr	r3, [r5, #12]
 800436c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 800436e:	68ab      	ldr	r3, [r5, #8]
 8004370:	60a3      	str	r3, [r4, #8]
    }
 8004372:	4620      	mov	r0, r4
 8004374:	bd38      	pop	{r3, r4, r5, pc}
    : _Function_base()
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff ffd2 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 800437c:	f001 fdbc 	bl	8005ef8 <__cxa_end_cleanup>

08004380 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4604      	mov	r4, r0
	switch (__op)
 8004384:	b17a      	cbz	r2, 80043a6 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x26>
 8004386:	2a01      	cmp	r2, #1
 8004388:	d011      	beq.n	80043ae <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
	  switch (__op)
 800438a:	2a02      	cmp	r2, #2
 800438c:	d011      	beq.n	80043b2 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
 800438e:	2a03      	cmp	r2, #3
 8004390:	d10b      	bne.n	80043aa <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8004392:	6804      	ldr	r4, [r0, #0]
 8004394:	b14c      	cbz	r4, 80043aa <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8004396:	4620      	mov	r0, r4
 8004398:	f7ff ffc2 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 800439c:	2110      	movs	r1, #16
 800439e:	4620      	mov	r0, r4
 80043a0:	f001 fda8 	bl	8005ef4 <_ZdlPvj>
 80043a4:	e001      	b.n	80043aa <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80043a8:	6023      	str	r3, [r4, #0]
      }
 80043aa:	2000      	movs	r0, #0
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 80043ae:	680b      	ldr	r3, [r1, #0]
 80043b0:	e7fa      	b.n	80043a8 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	    new _Functor(*__source._M_access<const _Functor*>());
 80043b2:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 80043b4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80043b6:	f002 f8f8 	bl	80065aa <_Znwj>
 80043ba:	4631      	mov	r1, r6
 80043bc:	4605      	mov	r5, r0
 80043be:	f7ff ffcb 	bl	8004358 <_ZNSt8functionIFihmEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 80043c2:	6025      	str	r5, [r4, #0]
	}
 80043c4:	e7f1      	b.n	80043aa <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    new _Functor(*__source._M_access<const _Functor*>());
 80043c6:	2110      	movs	r1, #16
 80043c8:	4628      	mov	r0, r5
 80043ca:	f001 fd93 	bl	8005ef4 <_ZdlPvj>
 80043ce:	f001 fd93 	bl	8005ef8 <__cxa_end_cleanup>
 80043d2:	bf00      	nop
 80043d4:	0800731c 	.word	0x0800731c

080043d8 <_ZNSt8functionIFifmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 80043d8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80043da:	2300      	movs	r3, #0
 80043dc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80043de:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80043e0:	4604      	mov	r4, r0
 80043e2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80043e4:	b12b      	cbz	r3, 80043f2 <_ZNSt8functionIFifmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80043e6:	2202      	movs	r2, #2
 80043e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80043ea:	68eb      	ldr	r3, [r5, #12]
 80043ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80043ee:	68ab      	ldr	r3, [r5, #8]
 80043f0:	60a3      	str	r3, [r4, #8]
    }
 80043f2:	4620      	mov	r0, r4
 80043f4:	bd38      	pop	{r3, r4, r5, pc}
    : _Function_base()
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7ff ff92 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 80043fc:	f001 fd7c 	bl	8005ef8 <__cxa_end_cleanup>

08004400 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4604      	mov	r4, r0
	switch (__op)
 8004404:	b17a      	cbz	r2, 8004426 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x26>
 8004406:	2a01      	cmp	r2, #1
 8004408:	d011      	beq.n	800442e <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
	  switch (__op)
 800440a:	2a02      	cmp	r2, #2
 800440c:	d011      	beq.n	8004432 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
 800440e:	2a03      	cmp	r2, #3
 8004410:	d10b      	bne.n	800442a <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8004412:	6804      	ldr	r4, [r0, #0]
 8004414:	b14c      	cbz	r4, 800442a <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8004416:	4620      	mov	r0, r4
 8004418:	f7ff ff82 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 800441c:	2110      	movs	r1, #16
 800441e:	4620      	mov	r0, r4
 8004420:	f001 fd68 	bl	8005ef4 <_ZdlPvj>
 8004424:	e001      	b.n	800442a <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004428:	6023      	str	r3, [r4, #0]
      }
 800442a:	2000      	movs	r0, #0
 800442c:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 800442e:	680b      	ldr	r3, [r1, #0]
 8004430:	e7fa      	b.n	8004428 <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	    new _Functor(*__source._M_access<const _Functor*>());
 8004432:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8004434:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8004436:	f002 f8b8 	bl	80065aa <_Znwj>
 800443a:	4631      	mov	r1, r6
 800443c:	4605      	mov	r5, r0
 800443e:	f7ff ffcb 	bl	80043d8 <_ZNSt8functionIFifmEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 8004442:	6025      	str	r5, [r4, #0]
	}
 8004444:	e7f1      	b.n	800442a <_ZNSt17_Function_handlerIFiPhmEZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEEEUlS0_mE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
	    new _Functor(*__source._M_access<const _Functor*>());
 8004446:	2110      	movs	r1, #16
 8004448:	4628      	mov	r0, r5
 800444a:	f001 fd53 	bl	8005ef4 <_ZdlPvj>
 800444e:	f001 fd53 	bl	8005ef8 <__cxa_end_cleanup>
 8004452:	bf00      	nop
 8004454:	08007374 	.word	0x08007374

08004458 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8004458:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800445a:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 800445c:	460b      	mov	r3, r1
 800445e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004460:	c803      	ldmia	r0, {r0, r1}
 8004462:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8004466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800446a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800446e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004472:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004476:	b002      	add	sp, #8
 8004478:	bd10      	pop	{r4, pc}
	...

0800447c <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE>:
			void set_callback(const std::function<int(T, uint32_t)> callback){
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4604      	mov	r4, r0
 8004480:	b08c      	sub	sp, #48	; 0x30
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
 8004482:	4668      	mov	r0, sp
 8004484:	f7ff ff68 	bl	8004358 <_ZNSt8functionIFihmEEC1ERKS1_>
 8004488:	4669      	mov	r1, sp
 800448a:	a808      	add	r0, sp, #32
 800448c:	1d26      	adds	r6, r4, #4
 800448e:	f7ff ff63 	bl	8004358 <_ZNSt8functionIFihmEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
 8004492:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8004494:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 8004496:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8004498:	f002 f887 	bl	80065aa <_Znwj>
 800449c:	a908      	add	r1, sp, #32
 800449e:	4605      	mov	r5, r0
 80044a0:	f7ff ff5a 	bl	8004358 <_ZNSt8functionIFihmEEC1ERKS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x84>)
	std::swap(_M_functor, __x._M_functor);
 80044a6:	4631      	mov	r1, r6
	    _M_invoker = &_My_handler::_M_invoke;
 80044a8:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80044aa:	4b16      	ldr	r3, [pc, #88]	; (8004504 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x88>)
	std::swap(_M_functor, __x._M_functor);
 80044ac:	a804      	add	r0, sp, #16
	    _M_manager = &_My_handler::_M_manager;
 80044ae:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80044b0:	9504      	str	r5, [sp, #16]
	std::swap(_M_functor, __x._M_functor);
 80044b2:	f7ff ffd1 	bl	8004458 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80044b6:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80044b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80044ba:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80044bc:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80044be:	9206      	str	r2, [sp, #24]
 80044c0:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 80044c2:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80044c4:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80044c6:	9207      	str	r2, [sp, #28]
 80044c8:	f7ff ff2a 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 80044cc:	a808      	add	r0, sp, #32
 80044ce:	f7ff ff27 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 80044d2:	4668      	mov	r0, sp
 80044d4:	f7ff ff24 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
				};
			}
 80044d8:	b00c      	add	sp, #48	; 0x30
 80044da:	bd70      	pop	{r4, r5, r6, pc}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80044dc:	2110      	movs	r1, #16
 80044de:	4628      	mov	r0, r5
 80044e0:	f001 fd08 	bl	8005ef4 <_ZdlPvj>
      : _Function_base()
 80044e4:	a804      	add	r0, sp, #16
 80044e6:	f7ff ff1b 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
    class function<_Res(_ArgTypes...)>
 80044ea:	a808      	add	r0, sp, #32
 80044ec:	f7ff ff18 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 80044f0:	4668      	mov	r0, sp
 80044f2:	f7ff ff15 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 80044f6:	f001 fcff 	bl	8005ef8 <__cxa_end_cleanup>
 80044fa:	e7f3      	b.n	80044e4 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x68>
 80044fc:	e7f8      	b.n	80044f0 <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE+0x74>
 80044fe:	bf00      	nop
 8004500:	080042f9 	.word	0x080042f9
 8004504:	08004381 	.word	0x08004381

08004508 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE>:
			void set_callback(const std::function<int(T, uint32_t)> callback){
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	4604      	mov	r4, r0
 800450c:	b08c      	sub	sp, #48	; 0x30
				this->callback = [callback](unsigned char* pValue, uint32_t id)->int{
 800450e:	4668      	mov	r0, sp
 8004510:	f7ff ff62 	bl	80043d8 <_ZNSt8functionIFifmEEC1ERKS1_>
 8004514:	4669      	mov	r1, sp
 8004516:	a808      	add	r0, sp, #32
 8004518:	1d26      	adds	r6, r4, #4
 800451a:	f7ff ff5d 	bl	80043d8 <_ZNSt8functionIFifmEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
 800451e:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8004520:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 8004522:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8004524:	f002 f841 	bl	80065aa <_Znwj>
 8004528:	a908      	add	r1, sp, #32
 800452a:	4605      	mov	r5, r0
 800452c:	f7ff ff54 	bl	80043d8 <_ZNSt8functionIFifmEEC1ERKS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x84>)
	std::swap(_M_functor, __x._M_functor);
 8004532:	4631      	mov	r1, r6
	    _M_invoker = &_My_handler::_M_invoke;
 8004534:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x88>)
	std::swap(_M_functor, __x._M_functor);
 8004538:	a804      	add	r0, sp, #16
	    _M_manager = &_My_handler::_M_manager;
 800453a:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800453c:	9504      	str	r5, [sp, #16]
	std::swap(_M_functor, __x._M_functor);
 800453e:	f7ff ff8b 	bl	8004458 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004542:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8004544:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8004546:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004548:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 800454a:	9206      	str	r2, [sp, #24]
 800454c:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 800454e:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8004550:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8004552:	9207      	str	r2, [sp, #28]
 8004554:	f7ff fee4 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 8004558:	a808      	add	r0, sp, #32
 800455a:	f7ff fee1 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 800455e:	4668      	mov	r0, sp
 8004560:	f7ff fede 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
			}
 8004564:	b00c      	add	sp, #48	; 0x30
 8004566:	bd70      	pop	{r4, r5, r6, pc}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8004568:	2110      	movs	r1, #16
 800456a:	4628      	mov	r0, r5
 800456c:	f001 fcc2 	bl	8005ef4 <_ZdlPvj>
      : _Function_base()
 8004570:	a804      	add	r0, sp, #16
 8004572:	f7ff fed5 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
    class function<_Res(_ArgTypes...)>
 8004576:	a808      	add	r0, sp, #32
 8004578:	f7ff fed2 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 800457c:	4668      	mov	r0, sp
 800457e:	f7ff fecf 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 8004582:	f001 fcb9 	bl	8005ef8 <__cxa_end_cleanup>
 8004586:	e7f3      	b.n	8004570 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x68>
 8004588:	e7f8      	b.n	800457c <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE+0x74>
 800458a:	bf00      	nop
 800458c:	08004243 	.word	0x08004243
 8004590:	08004401 	.word	0x08004401

08004594 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 8004594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004596:	460e      	mov	r6, r1
 8004598:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 800459a:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 800459c:	4604      	mov	r4, r0
 800459e:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 80045a2:	d01e      	beq.n	80045e2 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80045a4:	1c41      	adds	r1, r0, #1
 80045a6:	42b1      	cmp	r1, r6
 80045a8:	d01b      	beq.n	80045e2 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80045aa:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 80045ac:	7823      	ldrb	r3, [r4, #0]
 80045ae:	f815 7b01 	ldrb.w	r7, [r5], #1
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	f007 0203 	and.w	r2, r7, #3
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d206      	bcs.n	80045cc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 80045be:	462a      	mov	r2, r5
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff fe36 	bl	8004232 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 80045c6:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80045c8:	4629      	mov	r1, r5
 80045ca:	e7ec      	b.n	80045a6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 80045cc:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 80045d0:	f003 0003 	and.w	r0, r3, #3
 80045d4:	4282      	cmp	r2, r0
 80045d6:	d202      	bcs.n	80045de <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 80045d8:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 80045dc:	e7f6      	b.n	80045cc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 80045de:	700f      	strb	r7, [r1, #0]
    }
 80045e0:	e7f2      	b.n	80045c8 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 80045e2:	b003      	add	sp, #12
 80045e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045e6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80045e6:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 80045e8:	1e54      	subs	r4, r2, #1
 80045ea:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80045ee:	1065      	asrs	r5, r4, #1
 80045f0:	460c      	mov	r4, r1
 80045f2:	42a5      	cmp	r5, r4
 80045f4:	dd13      	ble.n	800461e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 80045f6:	1c67      	adds	r7, r4, #1
 80045f8:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 80045fc:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 80045fe:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 8004602:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8004606:	f00c 0c03 	and.w	ip, ip, #3
 800460a:	f007 0703 	and.w	r7, r7, #3
 800460e:	45bc      	cmp	ip, r7
	    __secondChild--;
 8004610:	bf88      	it	hi
 8004612:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8004616:	5d87      	ldrb	r7, [r0, r6]
 8004618:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 800461a:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 800461c:	e7e9      	b.n	80045f2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800461e:	07d5      	lsls	r5, r2, #31
 8004620:	d40d      	bmi.n	800463e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 8004622:	3a02      	subs	r2, #2
 8004624:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8004628:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 800462c:	d107      	bne.n	800463e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 800462e:	1c62      	adds	r2, r4, #1
 8004630:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8004632:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004636:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800463a:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 800463c:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 800463e:	1e62      	subs	r2, r4, #1
 8004640:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8004644:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8004646:	f003 0603 	and.w	r6, r3, #3
 800464a:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800464c:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8004650:	da0b      	bge.n	800466a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 8004652:	5c84      	ldrb	r4, [r0, r2]
 8004654:	f004 0703 	and.w	r7, r4, #3
 8004658:	42b7      	cmp	r7, r6
 800465a:	d206      	bcs.n	800466a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800465c:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 800465e:	1e54      	subs	r4, r2, #1
 8004660:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8004664:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8004666:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8004668:	e7ef      	b.n	800464a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800466a:	702b      	strb	r3, [r5, #0]
    }
 800466c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800466e:	b082      	sub	sp, #8
 8004670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	460d      	mov	r5, r1
 8004678:	4617      	mov	r7, r2
 800467a:	b087      	sub	sp, #28
 800467c:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800467e:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 8004682:	1b2e      	subs	r6, r5, r4
 8004684:	2e10      	cmp	r6, #16
 8004686:	dd29      	ble.n	80046dc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 8004688:	bb6f      	cbnz	r7, 80046e6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 800468a:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 800468e:	f10d 0808 	add.w	r8, sp, #8
 8004692:	f10d 0910 	add.w	r9, sp, #16
 8004696:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 800469a:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 800469e:	1eb7      	subs	r7, r6, #2
 80046a0:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80046a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80046a6:	4632      	mov	r2, r6
 80046a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80046ac:	5de3      	ldrb	r3, [r4, r7]
 80046ae:	4639      	mov	r1, r7
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ff98 	bl	80045e6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 80046b6:	b10f      	cbz	r7, 80046bc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 80046b8:	3f01      	subs	r7, #1
      while (true)
 80046ba:	e7f2      	b.n	80046a2 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80046bc:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 80046c0:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 80046c2:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 80046c4:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 80046c8:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 80046ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 80046ce:	4632      	mov	r2, r6
 80046d0:	2100      	movs	r1, #0
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff ff87 	bl	80045e6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 80046d8:	2e01      	cmp	r6, #1
 80046da:	dcef      	bgt.n	80046bc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 80046dc:	b007      	add	sp, #28
 80046de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046e2:	b002      	add	sp, #8
 80046e4:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80046e6:	1076      	asrs	r6, r6, #1
 80046e8:	f894 e001 	ldrb.w	lr, [r4, #1]
 80046ec:	5da1      	ldrb	r1, [r4, r6]
 80046ee:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 80046f2:	f00e 0903 	and.w	r9, lr, #3
 80046f6:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 80046fa:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80046fc:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 80046fe:	f107 37ff 	add.w	r7, r7, #4294967295
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004702:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 8004706:	d229      	bcs.n	800475c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 8004708:	4594      	cmp	ip, r2
 800470a:	d221      	bcs.n	8004750 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 800470c:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800470e:	55a3      	strb	r3, [r4, r6]
 8004710:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8004712:	462b      	mov	r3, r5
 8004714:	4616      	mov	r6, r2
 8004716:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004718:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800471c:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 8004720:	f00c 0003 	and.w	r0, ip, #3
 8004724:	4288      	cmp	r0, r1
 8004726:	d3f5      	bcc.n	8004714 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 8004728:	1e58      	subs	r0, r3, #1
 800472a:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800472c:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 8004730:	f00e 0903 	and.w	r9, lr, #3
 8004734:	4549      	cmp	r1, r9
 8004736:	d3f8      	bcc.n	800472a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 8004738:	429e      	cmp	r6, r3
 800473a:	d318      	bcc.n	800476e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800473c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800473e:	4629      	mov	r1, r5
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	463a      	mov	r2, r7
 8004744:	4630      	mov	r0, r6
 8004746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004748:	f7ff ff91 	bl	800466e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 800474c:	4635      	mov	r5, r6
 800474e:	e798      	b.n	8004682 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 8004750:	4591      	cmp	r9, r2
 8004752:	d205      	bcs.n	8004760 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 8004754:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004756:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 800475a:	e7d9      	b.n	8004710 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 800475c:	4591      	cmp	r9, r2
 800475e:	d203      	bcs.n	8004768 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8004760:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8004764:	7063      	strb	r3, [r4, #1]
 8004766:	e7d3      	b.n	8004710 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 8004768:	4594      	cmp	ip, r2
 800476a:	d2cf      	bcs.n	800470c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 800476c:	e7f2      	b.n	8004754 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 800476e:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 8004772:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 8004776:	e7cd      	b.n	8004714 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

08004778 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8004778:	688b      	ldr	r3, [r1, #8]
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 800477a:	b5f0      	push	{r4, r5, r6, r7, lr}
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 800477c:	2800      	cmp	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 800477e:	4614      	mov	r4, r2
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8004780:	bf0c      	ite	eq
 8004782:	2220      	moveq	r2, #32
 8004784:	2200      	movne	r2, #0
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf0c      	ite	eq
 800478a:	2310      	moveq	r3, #16
 800478c:	2300      	movne	r3, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 800478e:	460d      	mov	r5, r1
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8004790:	68a1      	ldr	r1, [r4, #8]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8004792:	2802      	cmp	r0, #2
 8004794:	ea42 0203 	orr.w	r2, r2, r3
 8004798:	bf34      	ite	cc
 800479a:	2320      	movcc	r3, #32
 800479c:	2300      	movcs	r3, #0
 800479e:	2901      	cmp	r1, #1
 80047a0:	bf0c      	ite	eq
 80047a2:	2110      	moveq	r1, #16
 80047a4:	2100      	movne	r1, #0
 80047a6:	430b      	orrs	r3, r1
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 80047a8:	b08d      	sub	sp, #52	; 0x34
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 80047aa:	f043 0305 	orr.w	r3, r3, #5
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80047ae:	f88d 3015 	strb.w	r3, [sp, #21]
 80047b2:	f04f 0300 	mov.w	r3, #0
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 80047b6:	f042 0204 	orr.w	r2, r2, #4
 80047ba:	ae0a      	add	r6, sp, #40	; 0x28
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80047bc:	f88d 2014 	strb.w	r2, [sp, #20]
 80047c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80047c4:	f88d 3020 	strb.w	r3, [sp, #32]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 80047c8:	a805      	add	r0, sp, #20
 80047ca:	ab08      	add	r3, sp, #32
 80047cc:	4632      	mov	r2, r6
 80047ce:	f10d 0116 	add.w	r1, sp, #22
 80047d2:	9307      	str	r3, [sp, #28]
 80047d4:	9606      	str	r6, [sp, #24]
 80047d6:	f7fd fc77 	bl	80020c8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 80047da:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80047de:	f89d 3015 	ldrb.w	r3, [sp, #21]
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80047e2:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 80047e6:	d003      	beq.n	80047f0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x78>
 80047e8:	2810      	cmp	r0, #16
					priority |= (i << 6);
 80047ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80047ee:	d003      	beq.n	80047f8 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x80>
 80047f0:	2820      	cmp	r0, #32
					priority |= (i << 6);
 80047f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80047f6:	d003      	beq.n	8004800 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x88>
 80047f8:	2830      	cmp	r0, #48	; 0x30
					priority |= (i << 6);
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80047fe:	d001      	beq.n	8004804 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x8c>
					priority |= (i << 6);
 8004800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8004804:	f88d 3015 	strb.w	r3, [sp, #21]
 8004808:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 800480c:	af03      	add	r7, sp, #12
 800480e:	f88d 3010 	strb.w	r3, [sp, #16]
 8004812:	f88d 300c 	strb.w	r3, [sp, #12]
 8004816:	f10d 0116 	add.w	r1, sp, #22
 800481a:	ab04      	add	r3, sp, #16
 800481c:	a805      	add	r0, sp, #20
 800481e:	2202      	movs	r2, #2
 8004820:	9700      	str	r7, [sp, #0]
 8004822:	9308      	str	r3, [sp, #32]
 8004824:	9709      	str	r7, [sp, #36]	; 0x24
 8004826:	f7ff ff22 	bl	800466e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
 800482a:	ab04      	add	r3, sp, #16
 800482c:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
	std::__insertion_sort(__first, __last, __comp);
 8004830:	f10d 0116 	add.w	r1, sp, #22
 8004834:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004838:	a805      	add	r0, sp, #20
 800483a:	f7ff feab 	bl	8004594 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 800483e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	60eb      	str	r3, [r5, #12]
 8004846:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	60e3      	str	r3, [r4, #12]
		}
 800484e:	b00d      	add	sp, #52	; 0x34
 8004850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004854 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8004854:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004856:	4606      	mov	r6, r0
 8004858:	460d      	mov	r5, r1
 800485a:	4614      	mov	r4, r2
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 800485c:	f7ff ff8c 	bl	8004778 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		bit = bit | reg;
 8004860:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x10c>)
 8004862:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit & ~reg;
 800486e:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8004872:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004876:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit | reg;
 800487a:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 800487e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8004882:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8004886:	466a      	mov	r2, sp
 8004888:	6869      	ldr	r1, [r5, #4]
 800488a:	6828      	ldr	r0, [r5, #0]
 800488c:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800488e:	4a35      	ldr	r2, [pc, #212]	; (8004964 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x110>)
 8004890:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8004894:	9901      	ldr	r1, [sp, #4]
 8004896:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 800489a:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
		bit = bit & ~reg;
 80048a6:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80048b2:	68aa      	ldr	r2, [r5, #8]
 80048b4:	2a00      	cmp	r2, #0
 80048b6:	d13f      	bne.n	8004938 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xe4>
 80048b8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80048bc:	f022 0201 	bic.w	r2, r2, #1
		bit = bit | reg;
 80048c0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80048c4:	7c2a      	ldrb	r2, [r5, #16]
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	d03b      	beq.n	8004942 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xee>
 80048ca:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80048ce:	f042 0201 	orr.w	r2, r2, #1
		bit = bit & ~reg;
 80048d2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80048d6:	466b      	mov	r3, sp
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	6861      	ldr	r1, [r4, #4]
 80048dc:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80048de:	4b21      	ldr	r3, [pc, #132]	; (8004964 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x110>)
 80048e0:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80048e4:	9a01      	ldr	r2, [sp, #4]
		bit = bit | reg;
 80048e6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80048ea:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
 80048ee:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80048f2:	f042 0202 	orr.w	r2, r2, #2
 80048f6:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
		bit = bit & ~reg;
 80048fa:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80048fe:	f022 0202 	bic.w	r2, r2, #2
 8004902:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8004906:	68a2      	ldr	r2, [r4, #8]
 8004908:	bb02      	cbnz	r2, 800494c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xf8>
 800490a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800490e:	f022 0202 	bic.w	r2, r2, #2
		bit = bit | reg;
 8004912:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8004916:	7c22      	ldrb	r2, [r4, #16]
 8004918:	b1ea      	cbz	r2, 8004956 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x102>
 800491a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800491e:	f042 0202 	orr.w	r2, r2, #2
		bit = bit & ~reg;
 8004922:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x10c>)
 8004928:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
	}
 8004934:	b002      	add	sp, #8
 8004936:	bd70      	pop	{r4, r5, r6, pc}
		bit = bit | reg;
 8004938:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	e7be      	b.n	80048c0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c>
		bit = bit & ~reg;
 8004942:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	e7c2      	b.n	80048d2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x7e>
		bit = bit | reg;
 800494c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8004950:	f042 0202 	orr.w	r2, r2, #2
 8004954:	e7dd      	b.n	8004912 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xbe>
		bit = bit & ~reg;
 8004956:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800495a:	f022 0202 	bic.w	r2, r2, #2
 800495e:	e7e0      	b.n	8004922 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xce>
 8004960:	40006000 	.word	0x40006000
 8004964:	40006400 	.word	0x40006400

08004968 <wrapper_cpp>:
			fifo_index{fifo_index}
 8004968:	2200      	movs	r2, #0
void wrapper_cpp(void){
 800496a:	b5f0      	push	{r4, r5, r6, r7, lr}
			hcan{hcan}
 800496c:	4b97      	ldr	r3, [pc, #604]	; (8004bcc <wrapper_cpp+0x264>)
 800496e:	b0e7      	sub	sp, #412	; 0x19c
 8004970:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
 8004974:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8004978:	2301      	movs	r3, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800497a:	200c      	movs	r0, #12
 800497c:	9315      	str	r3, [sp, #84]	; 0x54
 800497e:	f001 fe14 	bl	80065aa <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 8004982:	4c93      	ldr	r4, [pc, #588]	; (8004bd0 <wrapper_cpp+0x268>)
 8004984:	ae20      	add	r6, sp, #128	; 0x80
 8004986:	4621      	mov	r1, r4
 8004988:	6086      	str	r6, [r0, #8]
 800498a:	f002 f8ef 	bl	8006b6c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800498e:	68a3      	ldr	r3, [r4, #8]
 8004990:	200c      	movs	r0, #12
 8004992:	3301      	adds	r3, #1
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	f001 fe08 	bl	80065aa <_Znwj>
 800499a:	ab25      	add	r3, sp, #148	; 0x94
	 __tmp->_M_hook(__position._M_node);
 800499c:	4621      	mov	r1, r4
 800499e:	6083      	str	r3, [r0, #8]
 80049a0:	f002 f8e4 	bl	8006b6c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80049a4:	68a3      	ldr	r3, [r4, #8]
	parameters[A].set_BID(bida);
 80049a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80049aa:	3301      	adds	r3, #1
 80049ac:	60a3      	str	r3, [r4, #8]
 80049ae:	4630      	mov	r0, r6
			MotorParam{
 80049b0:	4c88      	ldr	r4, [pc, #544]	; (8004bd4 <wrapper_cpp+0x26c>)
	parameters[A].set_BID(bida);
 80049b2:	f7fe fe31 	bl	8003618 <_ZN11stepping_md10Parameters7set_BIDEt>
			MotorParam{
 80049b6:	ad46      	add	r5, sp, #280	; 0x118
	parameters[C].set_BID(bida + 4);
 80049b8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80049bc:	a825      	add	r0, sp, #148	; 0x94
 80049be:	f7fe fe2b 	bl	8003618 <_ZN11stepping_md10Parameters7set_BIDEt>
			MotorParam{
 80049c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	parameters[A].set_motor_param(
 80049ca:	4629      	mov	r1, r5
 80049cc:	4630      	mov	r0, r6
 80049ce:	f7fe fe1b 	bl	8003608 <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
			MotorParam{
 80049d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	parameters[C].set_motor_param(
 80049da:	4629      	mov	r1, r5
 80049dc:	a825      	add	r0, sp, #148	; 0x94
 80049de:	f7fe fe13 	bl	8003608 <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	result = HAL_RCC_GetPCLK2Freq();
 80049e2:	f000 fef1 	bl	80057c8 <HAL_RCC_GetPCLK2Freq>
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 80049e6:	4f7c      	ldr	r7, [pc, #496]	; (8004bd8 <wrapper_cpp+0x270>)
	};
 80049e8:	4c7c      	ldr	r4, [pc, #496]	; (8004bdc <wrapper_cpp+0x274>)
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 80049ea:	687b      	ldr	r3, [r7, #4]
	};
 80049ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 80049f0:	049a      	lsls	r2, r3, #18
	};
 80049f2:	4a7b      	ldr	r2, [pc, #492]	; (8004be0 <wrapper_cpp+0x278>)
 80049f4:	4b7b      	ldr	r3, [pc, #492]	; (8004be4 <wrapper_cpp+0x27c>)
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 80049f6:	bf48      	it	mi
 80049f8:	0040      	lslmi	r0, r0, #1
	};
 80049fa:	9200      	str	r2, [sp, #0]
 80049fc:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	4628      	mov	r0, r5
 8004a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a08:	9401      	str	r4, [sp, #4]
 8004a0a:	f7fe fd05 	bl	8003418 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm>
	result = HAL_RCC_GetPCLK1Freq();
 8004a0e:	f000 fecb 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 8004a12:	687b      	ldr	r3, [r7, #4]
	};
 8004a14:	4a74      	ldr	r2, [pc, #464]	; (8004be8 <wrapper_cpp+0x280>)
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 8004a16:	055b      	lsls	r3, r3, #21
	};
 8004a18:	ab25      	add	r3, sp, #148	; 0x94
 8004a1a:	9303      	str	r3, [sp, #12]
 8004a1c:	4b73      	ldr	r3, [pc, #460]	; (8004bec <wrapper_cpp+0x284>)
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 8004a1e:	bf48      	it	mi
 8004a20:	0040      	lslmi	r0, r0, #1
	};
 8004a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a26:	9004      	str	r0, [sp, #16]
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	9200      	str	r2, [sp, #0]
 8004a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a30:	9401      	str	r4, [sp, #4]
 8004a32:	a856      	add	r0, sp, #344	; 0x158
	};
 8004a34:	af2a      	add	r7, sp, #168	; 0xa8
	};
 8004a36:	f7fe fcef 	bl	8003418 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersEm>
	};
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	4638      	mov	r0, r7
 8004a40:	a911      	add	r1, sp, #68	; 0x44
 8004a42:	f7fe fb6d 	bl	8003120 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004a46:	e00d      	b.n	8004a64 <wrapper_cpp+0xfc>
 8004a48:	2401      	movs	r4, #1
 8004a4a:	2338      	movs	r3, #56	; 0x38
 8004a4c:	f1c4 0401 	rsb	r4, r4, #1
 8004a50:	fb03 7404 	mla	r4, r3, r4, r7
 8004a54:	42bc      	cmp	r4, r7
 8004a56:	f000 80b2 	beq.w	8004bbe <wrapper_cpp+0x256>
 8004a5a:	3c1c      	subs	r4, #28
 8004a5c:	1d20      	adds	r0, r4, #4
 8004a5e:	f7ff fc5f 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	class CanController{
 8004a62:	e7f7      	b.n	8004a54 <wrapper_cpp+0xec>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4632      	mov	r2, r6
 8004a68:	a911      	add	r1, sp, #68	; 0x44
 8004a6a:	a831      	add	r0, sp, #196	; 0xc4
 8004a6c:	f7fe fb58 	bl	8003120 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004a70:	e000      	b.n	8004a74 <wrapper_cpp+0x10c>
 8004a72:	e7e9      	b.n	8004a48 <wrapper_cpp+0xe0>
 8004a74:	2300      	movs	r3, #0
 8004a76:	aa25      	add	r2, sp, #148	; 0x94
 8004a78:	a911      	add	r1, sp, #68	; 0x44
 8004a7a:	a838      	add	r0, sp, #224	; 0xe0
 8004a7c:	f7fe fb50 	bl	8003120 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004a80:	2301      	movs	r3, #1
 8004a82:	aa25      	add	r2, sp, #148	; 0x94
 8004a84:	a911      	add	r1, sp, #68	; 0x44
 8004a86:	a83f      	add	r0, sp, #252	; 0xfc
 8004a88:	f7fe fb4a 	bl	8003120 <_ZN11stepping_md13CanControllerC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004a8c:	e001      	b.n	8004a92 <wrapper_cpp+0x12a>
 8004a8e:	2400      	movs	r4, #0
 8004a90:	e7db      	b.n	8004a4a <wrapper_cpp+0xe2>
	inline void dynamic_initialize() noexcept
	{
		[]<u8 ... indices>(std::integer_sequence<u8, indices ...>)
		{
			constexpr FrameFeature<FilterWidth::bit32> null_feature{.std_id = max_std_id, .ext_id = max_ext_id};
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8004a92:	ac1b      	add	r4, sp, #108	; 0x6c
 8004a94:	46a4      	mov	ip, r4
 8004a96:	f8df e158 	ldr.w	lr, [pc, #344]	; 8004bf0 <wrapper_cpp+0x288>
 8004a9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004a9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004aa2:	f8de 3000 	ldr.w	r3, [lr]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8004aa6:	4622      	mov	r2, r4
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8004aa8:	f8cc 3000 	str.w	r3, [ip]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8004aac:	4621      	mov	r1, r4
 8004aae:	4623      	mov	r3, r4
 8004ab0:	200e      	movs	r0, #14
 8004ab2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004ab6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004aba:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004abe:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004ac2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004ac6:	9400      	str	r4, [sp, #0]
 8004ac8:	f7fd fd0e 	bl	80024e8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterA{
 8004acc:	2214      	movs	r2, #20
 8004ace:	2100      	movs	r1, #0
 8004ad0:	a816      	add	r0, sp, #88	; 0x58
 8004ad2:	f002 f953 	bl	8006d7c <memset>
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <wrapper_cpp+0x28c>)
	};
 8004ad8:	4630      	mov	r0, r6
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterA{
 8004ada:	9317      	str	r3, [sp, #92]	; 0x5c
 8004adc:	2301      	movs	r3, #1
 8004ade:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
	};
 8004ae2:	f7fe fd97 	bl	8003614 <_ZN11stepping_md10Parameters7get_BIDEv>
			bool rtr;
		};

		constexpr FrameFeature(const u16 std_id = max_std_id, const u32 ext_id = max_ext_id, const bool ide = false, const bool rtr = false) noexcept:
			//value{(u16)(std_id << (u16)21 | ext_id << (u32)3 | (u8)ide << 2 | (u8)rtr << 1)}
			value{(u32)(std_id << (u16)21 | ext_id << (u32)3 | (u8)ide << 2 | (u8)rtr << 1)}
 8004ae6:	0540      	lsls	r0, r0, #21
 8004ae8:	9016      	str	r0, [sp, #88]	; 0x58
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterC{
 8004aea:	2214      	movs	r2, #20
 8004aec:	2100      	movs	r1, #0
 8004aee:	4620      	mov	r0, r4
 8004af0:	f002 f944 	bl	8006d7c <memset>
 8004af4:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <wrapper_cpp+0x28c>)
	};
 8004af6:	a825      	add	r0, sp, #148	; 0x94
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterC{
 8004af8:	6063      	str	r3, [r4, #4]
 8004afa:	2301      	movs	r3, #1
 8004afc:	7423      	strb	r3, [r4, #16]
	};
 8004afe:	f7fe fd89 	bl	8003614 <_ZN11stepping_md10Parameters7get_BIDEv>
 8004b02:	0540      	lsls	r0, r0, #21
 8004b04:	6020      	str	r0, [r4, #0]
		config_filter_bank(28, filter_args ...);
 8004b06:	a916      	add	r1, sp, #88	; 0x58
 8004b08:	201c      	movs	r0, #28
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	f7ff fea2 	bl	8004854 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
	    _M_invoker = &_My_handler::_M_invoke;
 8004b10:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <wrapper_cpp+0x290>)
	cancontrollers[A][cmd].set_callback<uint8_t>(
 8004b12:	4638      	mov	r0, r7
 8004b14:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <wrapper_cpp+0x294>)
 8004b18:	a90d      	add	r1, sp, #52	; 0x34
 8004b1a:	e9cd 650d 	strd	r6, r5, [sp, #52]	; 0x34
 8004b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b20:	f7ff fcac 	bl	800447c <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 8004b24:	a80d      	add	r0, sp, #52	; 0x34
 8004b26:	f7ff fbfb 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 8004b2a:	4b35      	ldr	r3, [pc, #212]	; (8004c00 <wrapper_cpp+0x298>)
	cancontrollers[C][cmd].set_callback<uint8_t>(
 8004b2c:	a90d      	add	r1, sp, #52	; 0x34
 8004b2e:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8004b30:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <wrapper_cpp+0x29c>)
 8004b32:	a838      	add	r0, sp, #224	; 0xe0
 8004b34:	e9cd 650d 	strd	r6, r5, [sp, #52]	; 0x34
 8004b38:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b3a:	f7ff fc9f 	bl	800447c <_ZN11stepping_md13CanController12set_callbackIhEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 8004b3e:	a80d      	add	r0, sp, #52	; 0x34
 8004b40:	f7ff fbee 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 8004b44:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <wrapper_cpp+0x2a0>)
	cancontrollers[A][target].set_callback<float>(
 8004b46:	a90d      	add	r1, sp, #52	; 0x34
 8004b48:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <wrapper_cpp+0x2a4>)
 8004b4c:	a831      	add	r0, sp, #196	; 0xc4
 8004b4e:	960d      	str	r6, [sp, #52]	; 0x34
 8004b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b52:	f7ff fcd9 	bl	8004508 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 8004b56:	a80d      	add	r0, sp, #52	; 0x34
 8004b58:	f7ff fbe2 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <wrapper_cpp+0x2a8>)
	cancontrollers[C][target].set_callback<float>(
 8004b5e:	a90d      	add	r1, sp, #52	; 0x34
 8004b60:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_manager = &_My_handler::_M_manager;
 8004b62:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <wrapper_cpp+0x2ac>)
 8004b64:	a83f      	add	r0, sp, #252	; 0xfc
 8004b66:	960d      	str	r6, [sp, #52]	; 0x34
 8004b68:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b6a:	f7ff fccd 	bl	8004508 <_ZN11stepping_md13CanController12set_callbackIfEEvSt8functionIFiT_mEE>
    class function<_Res(_ArgTypes...)>
 8004b6e:	a80d      	add	r0, sp, #52	; 0x34
 8004b70:	f7ff fbd6 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	HAL_CAN_Start(&hcan);
 8004b74:	4815      	ldr	r0, [pc, #84]	; (8004bcc <wrapper_cpp+0x264>)
 8004b76:	f000 f93a 	bl	8004dee <HAL_CAN_Start>
	if(IS_EMERGENCY()) error_request_flag = true;
 8004b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b7e:	481a      	ldr	r0, [pc, #104]	; (8004be8 <wrapper_cpp+0x280>)
 8004b80:	f000 fb88 	bl	8005294 <HAL_GPIO_ReadPin>
 8004b84:	4c24      	ldr	r4, [pc, #144]	; (8004c18 <wrapper_cpp+0x2b0>)
 8004b86:	b908      	cbnz	r0, 8004b8c <wrapper_cpp+0x224>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	7023      	strb	r3, [r4, #0]
			error_request_flag = false;
 8004b8c:	2600      	movs	r6, #0
		if(error_request_flag){
 8004b8e:	7823      	ldrb	r3, [r4, #0]
 8004b90:	b123      	cbz	r3, 8004b9c <wrapper_cpp+0x234>
			Parameters::trigger_emergency_callback();
 8004b92:	f7fe fd43 	bl	800361c <_ZN11stepping_md10Parameters26trigger_emergency_callbackEv>
			led_mgr::disable_all_motor();
 8004b96:	f7ff f841 	bl	8003c1c <_ZN11stepping_md7led_mgr17disable_all_motorEv>
			error_request_flag = false;
 8004b9a:	7026      	strb	r6, [r4, #0]
		CanController::trigger_update();
 8004b9c:	f7fe fbf6 	bl	800338c <_ZN11stepping_md13CanController14trigger_updateEv>
		MotorController::trigger_update();
 8004ba0:	f7fe fcf2 	bl	8003588 <_ZN11stepping_md15MotorController14trigger_updateEv>
		led_mgr::led_process();
 8004ba4:	f7fe ff62 	bl	8003a6c <_ZN11stepping_md7led_mgr11led_processEv>
 8004ba8:	e7f1      	b.n	8004b8e <wrapper_cpp+0x226>
 8004baa:	e770      	b.n	8004a8e <wrapper_cpp+0x126>
 8004bac:	a80d      	add	r0, sp, #52	; 0x34
 8004bae:	f7ff fbb7 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
	};
 8004bb2:	3d1c      	subs	r5, #28
 8004bb4:	1d28      	adds	r0, r5, #4
 8004bb6:	f7ff fbb3 	bl	8004320 <_ZNSt14_Function_baseD1Ev>
 8004bba:	42bd      	cmp	r5, r7
 8004bbc:	d1f9      	bne.n	8004bb2 <wrapper_cpp+0x24a>
 8004bbe:	f001 f99b 	bl	8005ef8 <__cxa_end_cleanup>
 8004bc2:	e7f3      	b.n	8004bac <wrapper_cpp+0x244>
 8004bc4:	e7f2      	b.n	8004bac <wrapper_cpp+0x244>
 8004bc6:	e7f1      	b.n	8004bac <wrapper_cpp+0x244>
 8004bc8:	e7f3      	b.n	8004bb2 <wrapper_cpp+0x24a>
 8004bca:	bf00      	nop
 8004bcc:	20000370 	.word	0x20000370
 8004bd0:	20000348 	.word	0x20000348
 8004bd4:	0800702c 	.word	0x0800702c
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	3db2b8c2 	.word	0x3db2b8c2
 8004be0:	40010800 	.word	0x40010800
 8004be4:	20000398 	.word	0x20000398
 8004be8:	40010c00 	.word	0x40010c00
 8004bec:	200003e0 	.word	0x200003e0
 8004bf0:	0800703c 	.word	0x0800703c
 8004bf4:	ff9ffffe 	.word	0xff9ffffe
 8004bf8:	08004211 	.word	0x08004211
 8004bfc:	080042d1 	.word	0x080042d1
 8004c00:	08004221 	.word	0x08004221
 8004c04:	080042a9 	.word	0x080042a9
 8004c08:	08004169 	.word	0x08004169
 8004c0c:	08004289 	.word	0x08004289
 8004c10:	08004179 	.word	0x08004179
 8004c14:	08004269 	.word	0x08004269
 8004c18:	2000042c 	.word	0x2000042c

08004c1c <Reset_Handler>:
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <LoopFillZerobss+0x12>)
 8004c1e:	490d      	ldr	r1, [pc, #52]	; (8004c54 <LoopFillZerobss+0x16>)
 8004c20:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <LoopFillZerobss+0x1a>)
 8004c22:	2300      	movs	r3, #0
 8004c24:	e002      	b.n	8004c2c <LoopCopyDataInit>

08004c26 <CopyDataInit>:
 8004c26:	58d4      	ldr	r4, [r2, r3]
 8004c28:	50c4      	str	r4, [r0, r3]
 8004c2a:	3304      	adds	r3, #4

08004c2c <LoopCopyDataInit>:
 8004c2c:	18c4      	adds	r4, r0, r3
 8004c2e:	428c      	cmp	r4, r1
 8004c30:	d3f9      	bcc.n	8004c26 <CopyDataInit>
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <LoopFillZerobss+0x1e>)
 8004c34:	4c0a      	ldr	r4, [pc, #40]	; (8004c60 <LoopFillZerobss+0x22>)
 8004c36:	2300      	movs	r3, #0
 8004c38:	e001      	b.n	8004c3e <LoopFillZerobss>

08004c3a <FillZerobss>:
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	3204      	adds	r2, #4

08004c3e <LoopFillZerobss>:
 8004c3e:	42a2      	cmp	r2, r4
 8004c40:	d3fb      	bcc.n	8004c3a <FillZerobss>
 8004c42:	f7ff fa73 	bl	800412c <SystemInit>
 8004c46:	f002 f83d 	bl	8006cc4 <__libc_init_array>
 8004c4a:	f7ff f81d 	bl	8003c88 <main>
 8004c4e:	4770      	bx	lr
 8004c50:	20000000 	.word	0x20000000
 8004c54:	2000007c 	.word	0x2000007c
 8004c58:	080079a4 	.word	0x080079a4
 8004c5c:	2000007c 	.word	0x2000007c
 8004c60:	20000454 	.word	0x20000454

08004c64 <ADC1_2_IRQHandler>:
 8004c64:	e7fe      	b.n	8004c64 <ADC1_2_IRQHandler>
	...

08004c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <HAL_InitTick+0x3c>)
{
 8004c6c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c6e:	7818      	ldrb	r0, [r3, #0]
 8004c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c74:	fbb3 f3f0 	udiv	r3, r3, r0
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <HAL_InitTick+0x40>)
 8004c7a:	6810      	ldr	r0, [r2, #0]
 8004c7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c80:	f000 fa1e 	bl	80050c0 <HAL_SYSTICK_Config>
 8004c84:	4604      	mov	r4, r0
 8004c86:	b958      	cbnz	r0, 8004ca0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c88:	2d0f      	cmp	r5, #15
 8004c8a:	d809      	bhi.n	8004ca0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4629      	mov	r1, r5
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	f000 f9d4 	bl	8005040 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <HAL_InitTick+0x44>)
 8004c9c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e7fc      	b.n	8004c9e <HAL_InitTick+0x36>
 8004ca4:	20000008 	.word	0x20000008
 8004ca8:	20000004 	.word	0x20000004
 8004cac:	2000000c 	.word	0x2000000c

08004cb0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <HAL_Init+0x20>)
{
 8004cb2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cb4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cb6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cb8:	f043 0310 	orr.w	r3, r3, #16
 8004cbc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cbe:	f000 f9ad 	bl	800501c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cc2:	200f      	movs	r0, #15
 8004cc4:	f7ff ffd0 	bl	8004c68 <HAL_InitTick>
  HAL_MspInit();
 8004cc8:	f7ff f930 	bl	8003f2c <HAL_MspInit>
}
 8004ccc:	2000      	movs	r0, #0
 8004cce:	bd08      	pop	{r3, pc}
 8004cd0:	40022000 	.word	0x40022000

08004cd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004cd4:	4a03      	ldr	r2, [pc, #12]	; (8004ce4 <HAL_IncTick+0x10>)
 8004cd6:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <HAL_IncTick+0x14>)
 8004cd8:	6811      	ldr	r1, [r2, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	440b      	add	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000430 	.word	0x20000430
 8004ce8:	20000008 	.word	0x20000008

08004cec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004cec:	4b01      	ldr	r3, [pc, #4]	; (8004cf4 <HAL_GetTick+0x8>)
 8004cee:	6818      	ldr	r0, [r3, #0]
}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000430 	.word	0x20000430

08004cf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004cf8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d06e      	beq.n	8004dde <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d00:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004d04:	b90b      	cbnz	r3, 8004d0a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d06:	f7ff f933 	bl	8003f70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d14:	f7ff ffea 	bl	8004cec <HAL_GetTick>
 8004d18:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	07d1      	lsls	r1, r2, #31
 8004d20:	d551      	bpl.n	8004dc6 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f022 0202 	bic.w	r2, r2, #2
 8004d28:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d2a:	f7ff ffdf 	bl	8004cec <HAL_GetTick>
 8004d2e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	0792      	lsls	r2, r2, #30
 8004d36:	d454      	bmi.n	8004de2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d38:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d3a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d3c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	bf0c      	ite	eq
 8004d42:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d46:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8004d4a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d4c:	7e62      	ldrb	r2, [r4, #25]
 8004d4e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	bf0c      	ite	eq
 8004d54:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d58:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8004d5c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d5e:	7ea2      	ldrb	r2, [r4, #26]
 8004d60:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	bf0c      	ite	eq
 8004d66:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d6a:	f022 0220 	bicne.w	r2, r2, #32
 8004d6e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d70:	7ee2      	ldrb	r2, [r4, #27]
 8004d72:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	bf0c      	ite	eq
 8004d78:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d7c:	f042 0210 	orrne.w	r2, r2, #16
 8004d80:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d82:	7f22      	ldrb	r2, [r4, #28]
 8004d84:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	bf0c      	ite	eq
 8004d8a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d8e:	f022 0208 	bicne.w	r2, r2, #8
 8004d92:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d94:	7f62      	ldrb	r2, [r4, #29]
 8004d96:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	bf0c      	ite	eq
 8004d9c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004da0:	f022 0204 	bicne.w	r2, r2, #4
 8004da4:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004da6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	6961      	ldr	r1, [r4, #20]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	6861      	ldr	r1, [r4, #4]
 8004db6:	3901      	subs	r1, #1
 8004db8:	430a      	orrs	r2, r1
 8004dba:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004dbc:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004dbe:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8004dc0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004dc6:	f7ff ff91 	bl	8004cec <HAL_GetTick>
 8004dca:	1b40      	subs	r0, r0, r5
 8004dcc:	280a      	cmp	r0, #10
 8004dce:	d9a4      	bls.n	8004d1a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004dd8:	2305      	movs	r3, #5
 8004dda:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8004dde:	2001      	movs	r0, #1
 8004de0:	e7f0      	b.n	8004dc4 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004de2:	f7ff ff83 	bl	8004cec <HAL_GetTick>
 8004de6:	1b40      	subs	r0, r0, r5
 8004de8:	280a      	cmp	r0, #10
 8004dea:	d9a1      	bls.n	8004d30 <HAL_CAN_Init+0x38>
 8004dec:	e7f0      	b.n	8004dd0 <HAL_CAN_Init+0xd8>

08004dee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004dee:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004df0:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8004df4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	b2dd      	uxtb	r5, r3
 8004dfa:	d120      	bne.n	8004e3e <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004dfc:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004dfe:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e00:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e04:	6813      	ldr	r3, [r2, #0]
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0c:	f7ff ff6e 	bl	8004cec <HAL_GetTick>
 8004e10:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f013 0301 	ands.w	r3, r3, #1
 8004e1a:	d102      	bne.n	8004e22 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 8004e1c:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e1e:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8004e20:	e00b      	b.n	8004e3a <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e22:	f7ff ff63 	bl	8004cec <HAL_GetTick>
 8004e26:	1b80      	subs	r0, r0, r6
 8004e28:	280a      	cmp	r0, #10
 8004e2a:	d9f2      	bls.n	8004e12 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e32:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e34:	2305      	movs	r3, #5
 8004e36:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004e40:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e46:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004e48:	e7f7      	b.n	8004e3a <HAL_CAN_Start+0x4c>

08004e4a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e4c:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e50:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e52:	3d01      	subs	r5, #1
 8004e54:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e56:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8004e58:	d841      	bhi.n	8004ede <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e5a:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8004e5e:	d03a      	beq.n	8004ed6 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e60:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004e64:	2c03      	cmp	r4, #3
 8004e66:	f04f 0501 	mov.w	r5, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004e6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e72:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004e74:	2001      	movs	r0, #1
 8004e76:	e028      	b.n	8004eca <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e78:	40a5      	lsls	r5, r4
 8004e7a:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8004e7c:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8004e80:	f104 0318 	add.w	r3, r4, #24
 8004e84:	bb10      	cbnz	r0, 8004ecc <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e86:	6808      	ldr	r0, [r1, #0]
 8004e88:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e90:	0120      	lsls	r0, r4, #4
 8004e92:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004e96:	4406      	add	r6, r0
      return HAL_OK;
 8004e98:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e9a:	690d      	ldr	r5, [r1, #16]
 8004e9c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004ea0:	7d09      	ldrb	r1, [r1, #20]
 8004ea2:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004ea4:	bf02      	ittt	eq
 8004ea6:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8004eaa:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8004eae:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004eb2:	6851      	ldr	r1, [r2, #4]
 8004eb4:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004ebe:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ecc:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8004ece:	4338      	orrs	r0, r7
 8004ed0:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8004ed4:	e7da      	b.n	8004e8c <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ed6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004edc:	e7c9      	b.n	8004e72 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ede:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee4:	e7c5      	b.n	8004e72 <HAL_CAN_AddTxMessage+0x28>

08004ee6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ee6:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8004eea:	3b01      	subs	r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d80c      	bhi.n	8004f0a <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004ef0:	6803      	ldr	r3, [r0, #0]
 8004ef2:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004ef4:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004ef6:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004ef8:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004efa:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 8004efe:	bf48      	it	mi
 8004f00:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	d502      	bpl.n	8004f0c <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 8004f06:	3001      	adds	r0, #1
 8004f08:	4770      	bx	lr
  uint32_t freelevel = 0U;
 8004f0a:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8004f0c:	4770      	bx	lr

08004f0e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f10:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f14:	3c01      	subs	r4, #1
 8004f16:	2c01      	cmp	r4, #1
 8004f18:	d86c      	bhi.n	8004ff4 <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f1a:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f1c:	b941      	cbnz	r1, 8004f30 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f1e:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f20:	07a4      	lsls	r4, r4, #30
 8004f22:	d107      	bne.n	8004f34 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f2a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	e056      	b.n	8004fde <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f30:	6934      	ldr	r4, [r6, #16]
 8004f32:	e7f5      	b.n	8004f20 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004f34:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8004f38:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004f3c:	010c      	lsls	r4, r1, #4
 8004f3e:	f007 0704 	and.w	r7, r7, #4
 8004f42:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004f44:	2f00      	cmp	r7, #0
 8004f46:	d14b      	bne.n	8004fe0 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004f48:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004f4c:	0d7f      	lsrs	r7, r7, #21
 8004f4e:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004f50:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f54:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004f56:	f007 0702 	and.w	r7, r7, #2
 8004f5a:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004f5c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8004f60:	f007 070f 	and.w	r7, r7, #15
 8004f64:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f66:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f6a:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f6e:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f72:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f74:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f76:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f78:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8004f7c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f7e:	6802      	ldr	r2, [r0, #0]
 8004f80:	4422      	add	r2, r4
 8004f82:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004f86:	0a12      	lsrs	r2, r2, #8
 8004f88:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f8a:	6802      	ldr	r2, [r0, #0]
 8004f8c:	4422      	add	r2, r4
 8004f8e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004f92:	0c12      	lsrs	r2, r2, #16
 8004f94:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f96:	6802      	ldr	r2, [r0, #0]
 8004f98:	4422      	add	r2, r4
 8004f9a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004f9e:	0e12      	lsrs	r2, r2, #24
 8004fa0:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004fa2:	6802      	ldr	r2, [r0, #0]
 8004fa4:	4422      	add	r2, r4
 8004fa6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004faa:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004fac:	6802      	ldr	r2, [r0, #0]
 8004fae:	4422      	add	r2, r4
 8004fb0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004fb4:	0a12      	lsrs	r2, r2, #8
 8004fb6:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fb8:	6802      	ldr	r2, [r0, #0]
 8004fba:	4422      	add	r2, r4
 8004fbc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004fc0:	0c12      	lsrs	r2, r2, #16
 8004fc2:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004fc4:	6802      	ldr	r2, [r0, #0]
 8004fc6:	4422      	add	r2, r4
 8004fc8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004fcc:	0e12      	lsrs	r2, r2, #24
 8004fce:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fd0:	6803      	ldr	r3, [r0, #0]
 8004fd2:	b951      	cbnz	r1, 8004fea <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	f042 0220 	orr.w	r2, r2, #32
 8004fda:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8004fdc:	2000      	movs	r0, #0
  }
}
 8004fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004fe0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004fe4:	08ff      	lsrs	r7, r7, #3
 8004fe6:	6057      	str	r7, [r2, #4]
 8004fe8:	e7b2      	b.n	8004f50 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	f042 0220 	orr.w	r2, r2, #32
 8004ff0:	611a      	str	r2, [r3, #16]
 8004ff2:	e7f3      	b.n	8004fdc <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ff4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ffa:	e796      	b.n	8004f2a <HAL_CAN_GetRxMessage+0x1c>

08004ffc <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ffc:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005000:	3b01      	subs	r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d807      	bhi.n	8005016 <HAL_CAN_GetRxFifoFillLevel+0x1a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005006:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0)
 8005008:	b919      	cbnz	r1, 8005012 <HAL_CAN_GetRxFifoFillLevel+0x16>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800500a:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800500c:	f000 0003 	and.w	r0, r0, #3
 8005010:	4770      	bx	lr
 8005012:	6918      	ldr	r0, [r3, #16]
 8005014:	e7fa      	b.n	800500c <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8005016:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8005018:	4770      	bx	lr
	...

0800501c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800501c:	4907      	ldr	r1, [pc, #28]	; (800503c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800501e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005020:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005022:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800502a:	0412      	lsls	r2, r2, #16
 800502c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800502e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005038:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800503a:	4770      	bx	lr
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005042:	b530      	push	{r4, r5, lr}
 8005044:	68dc      	ldr	r4, [r3, #12]
 8005046:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800504a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800504e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005050:	2b04      	cmp	r3, #4
 8005052:	bf28      	it	cs
 8005054:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005056:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005058:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505c:	bf98      	it	ls
 800505e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005060:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005064:	bf88      	it	hi
 8005066:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005068:	ea21 0303 	bic.w	r3, r1, r3
 800506c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800506e:	fa05 f404 	lsl.w	r4, r5, r4
 8005072:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8005076:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005078:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507c:	bfac      	ite	ge
 800507e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005082:	4a07      	ldrlt	r2, [pc, #28]	; (80050a0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005084:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005088:	b2db      	uxtb	r3, r3
 800508a:	bfab      	itete	ge
 800508c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005090:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005094:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005098:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800509a:	bd30      	pop	{r4, r5, pc}
 800509c:	e000ed00 	.word	0xe000ed00
 80050a0:	e000ed14 	.word	0xe000ed14

080050a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80050a4:	2800      	cmp	r0, #0
 80050a6:	db08      	blt.n	80050ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050a8:	2301      	movs	r3, #1
 80050aa:	0942      	lsrs	r2, r0, #5
 80050ac:	f000 001f 	and.w	r0, r0, #31
 80050b0:	fa03 f000 	lsl.w	r0, r3, r0
 80050b4:	4b01      	ldr	r3, [pc, #4]	; (80050bc <HAL_NVIC_EnableIRQ+0x18>)
 80050b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80050ba:	4770      	bx	lr
 80050bc:	e000e100 	.word	0xe000e100

080050c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c0:	3801      	subs	r0, #1
 80050c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80050c6:	d20b      	bcs.n	80050e0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050cc:	21f0      	movs	r1, #240	; 0xf0
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050d6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050d8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050da:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050dc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050de:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80050e0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80050e2:	4770      	bx	lr
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050ec:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80050ee:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80050f0:	4f61      	ldr	r7, [pc, #388]	; (8005278 <HAL_GPIO_Init+0x190>)
 80050f2:	4b62      	ldr	r3, [pc, #392]	; (800527c <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 80050f4:	f8df c188 	ldr.w	ip, [pc, #392]	; 8005280 <HAL_GPIO_Init+0x198>
 80050f8:	f8df e188 	ldr.w	lr, [pc, #392]	; 8005284 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050fc:	680d      	ldr	r5, [r1, #0]
 80050fe:	fa35 f406 	lsrs.w	r4, r5, r6
 8005102:	d102      	bne.n	800510a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8005104:	b003      	add	sp, #12
 8005106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800510a:	f04f 0801 	mov.w	r8, #1
 800510e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005112:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8005116:	ea38 0505 	bics.w	r5, r8, r5
 800511a:	d177      	bne.n	800520c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800511c:	684d      	ldr	r5, [r1, #4]
 800511e:	2d03      	cmp	r5, #3
 8005120:	d807      	bhi.n	8005132 <HAL_GPIO_Init+0x4a>
 8005122:	3d01      	subs	r5, #1
 8005124:	2d02      	cmp	r5, #2
 8005126:	f200 8082 	bhi.w	800522e <HAL_GPIO_Init+0x146>
 800512a:	e8df f005 	tbb	[pc, r5]
 800512e:	9792      	.short	0x9792
 8005130:	9d          	.byte	0x9d
 8005131:	00          	.byte	0x00
 8005132:	2d12      	cmp	r5, #18
 8005134:	f000 8095 	beq.w	8005262 <HAL_GPIO_Init+0x17a>
 8005138:	d86a      	bhi.n	8005210 <HAL_GPIO_Init+0x128>
 800513a:	2d11      	cmp	r5, #17
 800513c:	f000 808b 	beq.w	8005256 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005140:	2cff      	cmp	r4, #255	; 0xff
 8005142:	bf98      	it	ls
 8005144:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005146:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800514a:	bf88      	it	hi
 800514c:	f100 0a04 	addhi.w	sl, r0, #4
 8005150:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005154:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005158:	bf88      	it	hi
 800515a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800515c:	fa09 fb05 	lsl.w	fp, r9, r5
 8005160:	ea28 080b 	bic.w	r8, r8, fp
 8005164:	fa02 f505 	lsl.w	r5, r2, r5
 8005168:	ea48 0505 	orr.w	r5, r8, r5
 800516c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005170:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005174:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8005178:	d048      	beq.n	800520c <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800517a:	69bd      	ldr	r5, [r7, #24]
 800517c:	f026 0803 	bic.w	r8, r6, #3
 8005180:	f045 0501 	orr.w	r5, r5, #1
 8005184:	61bd      	str	r5, [r7, #24]
 8005186:	69bd      	ldr	r5, [r7, #24]
 8005188:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800518c:	f005 0501 	and.w	r5, r5, #1
 8005190:	9501      	str	r5, [sp, #4]
 8005192:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005196:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800519a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800519c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80051a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80051a4:	fa09 f90b 	lsl.w	r9, r9, fp
 80051a8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80051ac:	4d36      	ldr	r5, [pc, #216]	; (8005288 <HAL_GPIO_Init+0x1a0>)
 80051ae:	42a8      	cmp	r0, r5
 80051b0:	d05e      	beq.n	8005270 <HAL_GPIO_Init+0x188>
 80051b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051b6:	42a8      	cmp	r0, r5
 80051b8:	d05c      	beq.n	8005274 <HAL_GPIO_Init+0x18c>
 80051ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051be:	42a8      	cmp	r0, r5
 80051c0:	bf0c      	ite	eq
 80051c2:	2502      	moveq	r5, #2
 80051c4:	2503      	movne	r5, #3
 80051c6:	fa05 f50b 	lsl.w	r5, r5, fp
 80051ca:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80051ce:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80051d2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051d4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80051d8:	bf14      	ite	ne
 80051da:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80051dc:	43a5      	biceq	r5, r4
 80051de:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80051e0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051e2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80051e6:	bf14      	ite	ne
 80051e8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80051ea:	43a5      	biceq	r5, r4
 80051ec:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80051ee:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051f0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80051f4:	bf14      	ite	ne
 80051f6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051f8:	43a5      	biceq	r5, r4
 80051fa:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80051fc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051fe:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8005202:	bf14      	ite	ne
 8005204:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005206:	ea25 0404 	biceq.w	r4, r5, r4
 800520a:	60dc      	str	r4, [r3, #12]
	position++;
 800520c:	3601      	adds	r6, #1
 800520e:	e775      	b.n	80050fc <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8005210:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800528c <HAL_GPIO_Init+0x1a4>
 8005214:	454d      	cmp	r5, r9
 8005216:	d00a      	beq.n	800522e <HAL_GPIO_Init+0x146>
 8005218:	d815      	bhi.n	8005246 <HAL_GPIO_Init+0x15e>
 800521a:	4575      	cmp	r5, lr
 800521c:	d007      	beq.n	800522e <HAL_GPIO_Init+0x146>
 800521e:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8005222:	454d      	cmp	r5, r9
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x146>
 8005226:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800522a:	454d      	cmp	r5, r9
 800522c:	d188      	bne.n	8005140 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800522e:	688a      	ldr	r2, [r1, #8]
 8005230:	b1e2      	cbz	r2, 800526c <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005232:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8005234:	bf08      	it	eq
 8005236:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800523a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800523e:	bf18      	it	ne
 8005240:	f8c0 8014 	strne.w	r8, [r0, #20]
 8005244:	e77c      	b.n	8005140 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005246:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8005290 <HAL_GPIO_Init+0x1a8>
 800524a:	454d      	cmp	r5, r9
 800524c:	d0ef      	beq.n	800522e <HAL_GPIO_Init+0x146>
 800524e:	4565      	cmp	r5, ip
 8005250:	e7ec      	b.n	800522c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005252:	68ca      	ldr	r2, [r1, #12]
          break;
 8005254:	e774      	b.n	8005140 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005256:	68ca      	ldr	r2, [r1, #12]
 8005258:	3204      	adds	r2, #4
          break;
 800525a:	e771      	b.n	8005140 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800525c:	68ca      	ldr	r2, [r1, #12]
 800525e:	3208      	adds	r2, #8
          break;
 8005260:	e76e      	b.n	8005140 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005262:	68ca      	ldr	r2, [r1, #12]
 8005264:	320c      	adds	r2, #12
          break;
 8005266:	e76b      	b.n	8005140 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005268:	2200      	movs	r2, #0
 800526a:	e769      	b.n	8005140 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800526c:	2204      	movs	r2, #4
 800526e:	e767      	b.n	8005140 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005270:	2500      	movs	r5, #0
 8005272:	e7a8      	b.n	80051c6 <HAL_GPIO_Init+0xde>
 8005274:	2501      	movs	r5, #1
 8005276:	e7a6      	b.n	80051c6 <HAL_GPIO_Init+0xde>
 8005278:	40021000 	.word	0x40021000
 800527c:	40010400 	.word	0x40010400
 8005280:	10320000 	.word	0x10320000
 8005284:	10120000 	.word	0x10120000
 8005288:	40010800 	.word	0x40010800
 800528c:	10220000 	.word	0x10220000
 8005290:	10310000 	.word	0x10310000

08005294 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005294:	6883      	ldr	r3, [r0, #8]
 8005296:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005298:	bf14      	ite	ne
 800529a:	2001      	movne	r0, #1
 800529c:	2000      	moveq	r0, #0
 800529e:	4770      	bx	lr

080052a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a0:	b10a      	cbz	r2, 80052a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052a2:	6101      	str	r1, [r0, #16]
  }
}
 80052a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052a6:	0409      	lsls	r1, r1, #16
 80052a8:	e7fb      	b.n	80052a2 <HAL_GPIO_WritePin+0x2>
	...

080052ac <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80052ae:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052b0:	6951      	ldr	r1, [r2, #20]
 80052b2:	4201      	tst	r1, r0
 80052b4:	d002      	beq.n	80052bc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052b6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052b8:	f7ff f83c 	bl	8004334 <HAL_GPIO_EXTI_Callback>
  }
}
 80052bc:	bd08      	pop	{r3, pc}
 80052be:	bf00      	nop
 80052c0:	40010400 	.word	0x40010400

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052c8:	4605      	mov	r5, r0
 80052ca:	b338      	cbz	r0, 800531c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052cc:	6803      	ldr	r3, [r0, #0]
 80052ce:	07db      	lsls	r3, r3, #31
 80052d0:	d410      	bmi.n	80052f4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	079f      	lsls	r7, r3, #30
 80052d6:	d45e      	bmi.n	8005396 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	0719      	lsls	r1, r3, #28
 80052dc:	f100 8095 	bmi.w	800540a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	075a      	lsls	r2, r3, #29
 80052e4:	f100 80c1 	bmi.w	800546a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e8:	69e8      	ldr	r0, [r5, #28]
 80052ea:	2800      	cmp	r0, #0
 80052ec:	f040 812c 	bne.w	8005548 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80052f0:	2000      	movs	r0, #0
 80052f2:	e029      	b.n	8005348 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f4:	4c90      	ldr	r4, [pc, #576]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	f003 030c 	and.w	r3, r3, #12
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d007      	beq.n	8005310 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b08      	cmp	r3, #8
 8005308:	d10a      	bne.n	8005320 <HAL_RCC_OscConfig+0x5c>
 800530a:	6863      	ldr	r3, [r4, #4]
 800530c:	03de      	lsls	r6, r3, #15
 800530e:	d507      	bpl.n	8005320 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	039c      	lsls	r4, r3, #14
 8005314:	d5dd      	bpl.n	80052d2 <HAL_RCC_OscConfig+0xe>
 8005316:	686b      	ldr	r3, [r5, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1da      	bne.n	80052d2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800531c:	2001      	movs	r0, #1
 800531e:	e013      	b.n	8005348 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005320:	686b      	ldr	r3, [r5, #4]
 8005322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005326:	d112      	bne.n	800534e <HAL_RCC_OscConfig+0x8a>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005330:	f7ff fcdc 	bl	8004cec <HAL_GetTick>
 8005334:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	0398      	lsls	r0, r3, #14
 800533a:	d4ca      	bmi.n	80052d2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533c:	f7ff fcd6 	bl	8004cec <HAL_GetTick>
 8005340:	1b80      	subs	r0, r0, r6
 8005342:	2864      	cmp	r0, #100	; 0x64
 8005344:	d9f7      	bls.n	8005336 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8005346:	2003      	movs	r0, #3
}
 8005348:	b002      	add	sp, #8
 800534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534e:	b99b      	cbnz	r3, 8005378 <HAL_RCC_OscConfig+0xb4>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800535e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005360:	f7ff fcc4 	bl	8004cec <HAL_GetTick>
 8005364:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	0399      	lsls	r1, r3, #14
 800536a:	d5b2      	bpl.n	80052d2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800536c:	f7ff fcbe 	bl	8004cec <HAL_GetTick>
 8005370:	1b80      	subs	r0, r0, r6
 8005372:	2864      	cmp	r0, #100	; 0x64
 8005374:	d9f7      	bls.n	8005366 <HAL_RCC_OscConfig+0xa2>
 8005376:	e7e6      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	d103      	bne.n	8005388 <HAL_RCC_OscConfig+0xc4>
 8005380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	e7cf      	b.n	8005328 <HAL_RCC_OscConfig+0x64>
 8005388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005394:	e7cb      	b.n	800532e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005396:	4c68      	ldr	r4, [pc, #416]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	f013 0f0c 	tst.w	r3, #12
 800539e:	d007      	beq.n	80053b0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d110      	bne.n	80053cc <HAL_RCC_OscConfig+0x108>
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	03da      	lsls	r2, r3, #15
 80053ae:	d40d      	bmi.n	80053cc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	079b      	lsls	r3, r3, #30
 80053b4:	d502      	bpl.n	80053bc <HAL_RCC_OscConfig+0xf8>
 80053b6:	692b      	ldr	r3, [r5, #16]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d1af      	bne.n	800531c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	696a      	ldr	r2, [r5, #20]
 80053c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	e785      	b.n	80052d8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053cc:	692a      	ldr	r2, [r5, #16]
 80053ce:	4b5b      	ldr	r3, [pc, #364]	; (800553c <HAL_RCC_OscConfig+0x278>)
 80053d0:	b16a      	cbz	r2, 80053ee <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80053d6:	f7ff fc89 	bl	8004cec <HAL_GetTick>
 80053da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	079f      	lsls	r7, r3, #30
 80053e0:	d4ec      	bmi.n	80053bc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e2:	f7ff fc83 	bl	8004cec <HAL_GetTick>
 80053e6:	1b80      	subs	r0, r0, r6
 80053e8:	2802      	cmp	r0, #2
 80053ea:	d9f7      	bls.n	80053dc <HAL_RCC_OscConfig+0x118>
 80053ec:	e7ab      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80053ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80053f0:	f7ff fc7c 	bl	8004cec <HAL_GetTick>
 80053f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	0798      	lsls	r0, r3, #30
 80053fa:	f57f af6d 	bpl.w	80052d8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053fe:	f7ff fc75 	bl	8004cec <HAL_GetTick>
 8005402:	1b80      	subs	r0, r0, r6
 8005404:	2802      	cmp	r0, #2
 8005406:	d9f6      	bls.n	80053f6 <HAL_RCC_OscConfig+0x132>
 8005408:	e79d      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800540a:	69aa      	ldr	r2, [r5, #24]
 800540c:	4e4a      	ldr	r6, [pc, #296]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 800540e:	4b4b      	ldr	r3, [pc, #300]	; (800553c <HAL_RCC_OscConfig+0x278>)
 8005410:	b1e2      	cbz	r2, 800544c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8005412:	2201      	movs	r2, #1
 8005414:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005418:	f7ff fc68 	bl	8004cec <HAL_GetTick>
 800541c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800541e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005420:	079b      	lsls	r3, r3, #30
 8005422:	d50d      	bpl.n	8005440 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005424:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005428:	4b45      	ldr	r3, [pc, #276]	; (8005540 <HAL_RCC_OscConfig+0x27c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005430:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005432:	bf00      	nop
  }
  while (Delay --);
 8005434:	9b01      	ldr	r3, [sp, #4]
 8005436:	1e5a      	subs	r2, r3, #1
 8005438:	9201      	str	r2, [sp, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f9      	bne.n	8005432 <HAL_RCC_OscConfig+0x16e>
 800543e:	e74f      	b.n	80052e0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005440:	f7ff fc54 	bl	8004cec <HAL_GetTick>
 8005444:	1b00      	subs	r0, r0, r4
 8005446:	2802      	cmp	r0, #2
 8005448:	d9e9      	bls.n	800541e <HAL_RCC_OscConfig+0x15a>
 800544a:	e77c      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800544c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005450:	f7ff fc4c 	bl	8004cec <HAL_GetTick>
 8005454:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005456:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005458:	079f      	lsls	r7, r3, #30
 800545a:	f57f af41 	bpl.w	80052e0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545e:	f7ff fc45 	bl	8004cec <HAL_GetTick>
 8005462:	1b00      	subs	r0, r0, r4
 8005464:	2802      	cmp	r0, #2
 8005466:	d9f6      	bls.n	8005456 <HAL_RCC_OscConfig+0x192>
 8005468:	e76d      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546a:	4c33      	ldr	r4, [pc, #204]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 800546c:	69e3      	ldr	r3, [r4, #28]
 800546e:	00d8      	lsls	r0, r3, #3
 8005470:	d424      	bmi.n	80054bc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8005472:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005474:	69e3      	ldr	r3, [r4, #28]
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547a:	61e3      	str	r3, [r4, #28]
 800547c:	69e3      	ldr	r3, [r4, #28]
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005486:	4e2f      	ldr	r6, [pc, #188]	; (8005544 <HAL_RCC_OscConfig+0x280>)
 8005488:	6833      	ldr	r3, [r6, #0]
 800548a:	05d9      	lsls	r1, r3, #23
 800548c:	d518      	bpl.n	80054c0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548e:	68eb      	ldr	r3, [r5, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d126      	bne.n	80054e2 <HAL_RCC_OscConfig+0x21e>
 8005494:	6a23      	ldr	r3, [r4, #32]
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800549c:	f7ff fc26 	bl	8004cec <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80054a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a6:	6a23      	ldr	r3, [r4, #32]
 80054a8:	079b      	lsls	r3, r3, #30
 80054aa:	d53f      	bpl.n	800552c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80054ac:	2f00      	cmp	r7, #0
 80054ae:	f43f af1b 	beq.w	80052e8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b2:	69e3      	ldr	r3, [r4, #28]
 80054b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b8:	61e3      	str	r3, [r4, #28]
 80054ba:	e715      	b.n	80052e8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80054bc:	2700      	movs	r7, #0
 80054be:	e7e2      	b.n	8005486 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80054c8:	f7ff fc10 	bl	8004cec <HAL_GetTick>
 80054cc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ce:	6833      	ldr	r3, [r6, #0]
 80054d0:	05da      	lsls	r2, r3, #23
 80054d2:	d4dc      	bmi.n	800548e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d4:	f7ff fc0a 	bl	8004cec <HAL_GetTick>
 80054d8:	eba0 0008 	sub.w	r0, r0, r8
 80054dc:	2864      	cmp	r0, #100	; 0x64
 80054de:	d9f6      	bls.n	80054ce <HAL_RCC_OscConfig+0x20a>
 80054e0:	e731      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e2:	b9ab      	cbnz	r3, 8005510 <HAL_RCC_OscConfig+0x24c>
 80054e4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	6223      	str	r3, [r4, #32]
 80054f0:	6a23      	ldr	r3, [r4, #32]
 80054f2:	f023 0304 	bic.w	r3, r3, #4
 80054f6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80054f8:	f7ff fbf8 	bl	8004cec <HAL_GetTick>
 80054fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fe:	6a23      	ldr	r3, [r4, #32]
 8005500:	0798      	lsls	r0, r3, #30
 8005502:	d5d3      	bpl.n	80054ac <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005504:	f7ff fbf2 	bl	8004cec <HAL_GetTick>
 8005508:	1b80      	subs	r0, r0, r6
 800550a:	4540      	cmp	r0, r8
 800550c:	d9f7      	bls.n	80054fe <HAL_RCC_OscConfig+0x23a>
 800550e:	e71a      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005510:	2b05      	cmp	r3, #5
 8005512:	6a23      	ldr	r3, [r4, #32]
 8005514:	d103      	bne.n	800551e <HAL_RCC_OscConfig+0x25a>
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	6223      	str	r3, [r4, #32]
 800551c:	e7ba      	b.n	8005494 <HAL_RCC_OscConfig+0x1d0>
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	6223      	str	r3, [r4, #32]
 8005524:	6a23      	ldr	r3, [r4, #32]
 8005526:	f023 0304 	bic.w	r3, r3, #4
 800552a:	e7b6      	b.n	800549a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552c:	f7ff fbde 	bl	8004cec <HAL_GetTick>
 8005530:	1b80      	subs	r0, r0, r6
 8005532:	4540      	cmp	r0, r8
 8005534:	d9b7      	bls.n	80054a6 <HAL_RCC_OscConfig+0x1e2>
 8005536:	e706      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
 8005538:	40021000 	.word	0x40021000
 800553c:	42420000 	.word	0x42420000
 8005540:	20000004 	.word	0x20000004
 8005544:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005548:	4c2a      	ldr	r4, [pc, #168]	; (80055f4 <HAL_RCC_OscConfig+0x330>)
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b08      	cmp	r3, #8
 8005552:	d03e      	beq.n	80055d2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005554:	2200      	movs	r2, #0
 8005556:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005558:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800555a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800555c:	d12c      	bne.n	80055b8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800555e:	f7ff fbc5 	bl	8004cec <HAL_GetTick>
 8005562:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	0199      	lsls	r1, r3, #6
 8005568:	d420      	bmi.n	80055ac <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800556a:	6a2b      	ldr	r3, [r5, #32]
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005570:	d105      	bne.n	800557e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005572:	6862      	ldr	r2, [r4, #4]
 8005574:	68a9      	ldr	r1, [r5, #8]
 8005576:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800557a:	430a      	orrs	r2, r1
 800557c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005580:	6862      	ldr	r2, [r4, #4]
 8005582:	430b      	orrs	r3, r1
 8005584:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005588:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800558a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800558c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005590:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005592:	f7ff fbab 	bl	8004cec <HAL_GetTick>
 8005596:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	019a      	lsls	r2, r3, #6
 800559c:	f53f aea8 	bmi.w	80052f0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7ff fba4 	bl	8004cec <HAL_GetTick>
 80055a4:	1b40      	subs	r0, r0, r5
 80055a6:	2802      	cmp	r0, #2
 80055a8:	d9f6      	bls.n	8005598 <HAL_RCC_OscConfig+0x2d4>
 80055aa:	e6cc      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ac:	f7ff fb9e 	bl	8004cec <HAL_GetTick>
 80055b0:	1b80      	subs	r0, r0, r6
 80055b2:	2802      	cmp	r0, #2
 80055b4:	d9d6      	bls.n	8005564 <HAL_RCC_OscConfig+0x2a0>
 80055b6:	e6c6      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80055b8:	f7ff fb98 	bl	8004cec <HAL_GetTick>
 80055bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	019b      	lsls	r3, r3, #6
 80055c2:	f57f ae95 	bpl.w	80052f0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c6:	f7ff fb91 	bl	8004cec <HAL_GetTick>
 80055ca:	1b40      	subs	r0, r0, r5
 80055cc:	2802      	cmp	r0, #2
 80055ce:	d9f6      	bls.n	80055be <HAL_RCC_OscConfig+0x2fa>
 80055d0:	e6b9      	b.n	8005346 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d2:	2801      	cmp	r0, #1
 80055d4:	f43f aeb8 	beq.w	8005348 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80055d8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055da:	6a2a      	ldr	r2, [r5, #32]
 80055dc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80055e0:	4291      	cmp	r1, r2
 80055e2:	f47f ae9b 	bne.w	800531c <HAL_RCC_OscConfig+0x58>
 80055e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ec:	4293      	cmp	r3, r2
 80055ee:	f43f ae7f 	beq.w	80052f0 <HAL_RCC_OscConfig+0x2c>
 80055f2:	e693      	b.n	800531c <HAL_RCC_OscConfig+0x58>
 80055f4:	40021000 	.word	0x40021000
 80055f8:	42420000 	.word	0x42420000

080055fc <HAL_RCC_GetSysClockFreq>:
{
 80055fc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80055fe:	4b18      	ldr	r3, [pc, #96]	; (8005660 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8005600:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005602:	ac02      	add	r4, sp, #8
 8005604:	f103 0510 	add.w	r5, r3, #16
 8005608:	4622      	mov	r2, r4
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	3308      	adds	r3, #8
 8005610:	c203      	stmia	r2!, {r0, r1}
 8005612:	42ab      	cmp	r3, r5
 8005614:	4614      	mov	r4, r2
 8005616:	d1f7      	bne.n	8005608 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005618:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800561c:	4911      	ldr	r1, [pc, #68]	; (8005664 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800561e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8005622:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005624:	f003 020c 	and.w	r2, r3, #12
 8005628:	2a08      	cmp	r2, #8
 800562a:	d117      	bne.n	800565c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800562c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005630:	3218      	adds	r2, #24
 8005632:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005634:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005636:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800563a:	d50c      	bpl.n	8005656 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800563c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005640:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005644:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005646:	3318      	adds	r3, #24
 8005648:	446b      	add	r3, sp
 800564a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800564e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005652:	b007      	add	sp, #28
 8005654:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <HAL_RCC_GetSysClockFreq+0x70>)
 8005658:	4358      	muls	r0, r3
 800565a:	e7fa      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800565c:	4802      	ldr	r0, [pc, #8]	; (8005668 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800565e:	e7f8      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x56>
 8005660:	080073fb 	.word	0x080073fb
 8005664:	40021000 	.word	0x40021000
 8005668:	007a1200 	.word	0x007a1200
 800566c:	003d0900 	.word	0x003d0900

08005670 <HAL_RCC_ClockConfig>:
{
 8005670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005674:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005676:	4604      	mov	r4, r0
 8005678:	b910      	cbnz	r0, 8005680 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800567a:	2001      	movs	r0, #1
}
 800567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005680:	4a44      	ldr	r2, [pc, #272]	; (8005794 <HAL_RCC_ClockConfig+0x124>)
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	428b      	cmp	r3, r1
 800568a:	d328      	bcc.n	80056de <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568c:	6821      	ldr	r1, [r4, #0]
 800568e:	078e      	lsls	r6, r1, #30
 8005690:	d430      	bmi.n	80056f4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005692:	07ca      	lsls	r2, r1, #31
 8005694:	d443      	bmi.n	800571e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005696:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <HAL_RCC_ClockConfig+0x124>)
 8005698:	6813      	ldr	r3, [r2, #0]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	42ab      	cmp	r3, r5
 80056a0:	d865      	bhi.n	800576e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	4d3c      	ldr	r5, [pc, #240]	; (8005798 <HAL_RCC_ClockConfig+0x128>)
 80056a6:	f012 0f04 	tst.w	r2, #4
 80056aa:	d16c      	bne.n	8005786 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ac:	0713      	lsls	r3, r2, #28
 80056ae:	d506      	bpl.n	80056be <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056b0:	686b      	ldr	r3, [r5, #4]
 80056b2:	6922      	ldr	r2, [r4, #16]
 80056b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80056b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80056bc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056be:	f7ff ff9d 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80056c2:	686b      	ldr	r3, [r5, #4]
 80056c4:	4a35      	ldr	r2, [pc, #212]	; (800579c <HAL_RCC_ClockConfig+0x12c>)
 80056c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80056ca:	5cd3      	ldrb	r3, [r2, r3]
 80056cc:	40d8      	lsrs	r0, r3
 80056ce:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <HAL_RCC_ClockConfig+0x130>)
 80056d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80056d2:	4b34      	ldr	r3, [pc, #208]	; (80057a4 <HAL_RCC_ClockConfig+0x134>)
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f7ff fac7 	bl	8004c68 <HAL_InitTick>
  return HAL_OK;
 80056da:	2000      	movs	r0, #0
 80056dc:	e7ce      	b.n	800567c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	428b      	cmp	r3, r1
 80056f0:	d1c3      	bne.n	800567a <HAL_RCC_ClockConfig+0xa>
 80056f2:	e7cb      	b.n	800568c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_RCC_ClockConfig+0x128>)
 80056f6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056fa:	bf1e      	ittt	ne
 80056fc:	685a      	ldrne	r2, [r3, #4]
 80056fe:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005702:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005704:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005706:	bf42      	ittt	mi
 8005708:	685a      	ldrmi	r2, [r3, #4]
 800570a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800570e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68a0      	ldr	r0, [r4, #8]
 8005714:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005718:	4302      	orrs	r2, r0
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	e7b9      	b.n	8005692 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571e:	6862      	ldr	r2, [r4, #4]
 8005720:	4e1d      	ldr	r6, [pc, #116]	; (8005798 <HAL_RCC_ClockConfig+0x128>)
 8005722:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005724:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005726:	d11a      	bne.n	800575e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005728:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572c:	d0a5      	beq.n	800567a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005730:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005734:	f023 0303 	bic.w	r3, r3, #3
 8005738:	4313      	orrs	r3, r2
 800573a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800573c:	f7ff fad6 	bl	8004cec <HAL_GetTick>
 8005740:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005742:	6873      	ldr	r3, [r6, #4]
 8005744:	6862      	ldr	r2, [r4, #4]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800574e:	d0a2      	beq.n	8005696 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005750:	f7ff facc 	bl	8004cec <HAL_GetTick>
 8005754:	1bc0      	subs	r0, r0, r7
 8005756:	4540      	cmp	r0, r8
 8005758:	d9f3      	bls.n	8005742 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800575a:	2003      	movs	r0, #3
 800575c:	e78e      	b.n	800567c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800575e:	2a02      	cmp	r2, #2
 8005760:	d102      	bne.n	8005768 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005762:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005766:	e7e1      	b.n	800572c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005768:	f013 0f02 	tst.w	r3, #2
 800576c:	e7de      	b.n	800572c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	f023 0307 	bic.w	r3, r3, #7
 8005774:	432b      	orrs	r3, r5
 8005776:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	42ab      	cmp	r3, r5
 8005780:	f47f af7b 	bne.w	800567a <HAL_RCC_ClockConfig+0xa>
 8005784:	e78d      	b.n	80056a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005786:	686b      	ldr	r3, [r5, #4]
 8005788:	68e1      	ldr	r1, [r4, #12]
 800578a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800578e:	430b      	orrs	r3, r1
 8005790:	606b      	str	r3, [r5, #4]
 8005792:	e78b      	b.n	80056ac <HAL_RCC_ClockConfig+0x3c>
 8005794:	40022000 	.word	0x40022000
 8005798:	40021000 	.word	0x40021000
 800579c:	080072b4 	.word	0x080072b4
 80057a0:	20000004 	.word	0x20000004
 80057a4:	2000000c 	.word	0x2000000c

080057a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80057aa:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80057b2:	5cd3      	ldrb	r3, [r2, r3]
 80057b4:	4a03      	ldr	r2, [pc, #12]	; (80057c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80057b6:	6810      	ldr	r0, [r2, #0]
}
 80057b8:	40d8      	lsrs	r0, r3
 80057ba:	4770      	bx	lr
 80057bc:	40021000 	.word	0x40021000
 80057c0:	080072c4 	.word	0x080072c4
 80057c4:	20000004 	.word	0x20000004

080057c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80057ca:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80057d2:	5cd3      	ldrb	r3, [r2, r3]
 80057d4:	4a03      	ldr	r2, [pc, #12]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80057d6:	6810      	ldr	r0, [r2, #0]
}
 80057d8:	40d8      	lsrs	r0, r3
 80057da:	4770      	bx	lr
 80057dc:	40021000 	.word	0x40021000
 80057e0:	080072c4 	.word	0x080072c4
 80057e4:	20000004 	.word	0x20000004

080057e8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e8:	6a03      	ldr	r3, [r0, #32]
{
 80057ea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80057fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005800:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005802:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005806:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005808:	4d0a      	ldr	r5, [pc, #40]	; (8005834 <TIM_OC1_SetConfig+0x4c>)
 800580a:	42a8      	cmp	r0, r5
 800580c:	d10b      	bne.n	8005826 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800580e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005810:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005814:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005816:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800581a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800581e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005820:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005824:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005826:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005828:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800582a:	684a      	ldr	r2, [r1, #4]
 800582c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582e:	6203      	str	r3, [r0, #32]
}
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00

08005838 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005838:	6a03      	ldr	r3, [r0, #32]
{
 800583a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800583c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005840:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005846:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005848:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800584a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800584e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005850:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005852:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005856:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585a:	4d0b      	ldr	r5, [pc, #44]	; (8005888 <TIM_OC3_SetConfig+0x50>)
 800585c:	42a8      	cmp	r0, r5
 800585e:	d10d      	bne.n	800587c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005860:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005866:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800586a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005872:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005878:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005880:	684a      	ldr	r2, [r1, #4]
 8005882:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	6203      	str	r3, [r0, #32]
}
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	40012c00 	.word	0x40012c00

0800588c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800588c:	6a03      	ldr	r3, [r0, #32]
{
 800588e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005894:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800589e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80058a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b0:	4d06      	ldr	r5, [pc, #24]	; (80058cc <TIM_OC4_SetConfig+0x40>)
 80058b2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b4:	bf02      	ittt	eq
 80058b6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058bc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058c4:	684a      	ldr	r2, [r1, #4]
 80058c6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c8:	6203      	str	r3, [r0, #32]
}
 80058ca:	bd30      	pop	{r4, r5, pc}
 80058cc:	40012c00 	.word	0x40012c00

080058d0 <HAL_TIM_PWM_MspInit>:
 80058d0:	4770      	bx	lr
	...

080058d4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <TIM_Base_SetConfig+0x5c>)
{
 80058d6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80058da:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058dc:	d005      	beq.n	80058ea <TIM_Base_SetConfig+0x16>
 80058de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80058e2:	d002      	beq.n	80058ea <TIM_Base_SetConfig+0x16>
 80058e4:	4c13      	ldr	r4, [pc, #76]	; (8005934 <TIM_Base_SetConfig+0x60>)
 80058e6:	42a0      	cmp	r0, r4
 80058e8:	d110      	bne.n	800590c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 80058ea:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f0:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80058f2:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f6:	d005      	beq.n	8005904 <TIM_Base_SetConfig+0x30>
 80058f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80058fc:	d002      	beq.n	8005904 <TIM_Base_SetConfig+0x30>
 80058fe:	4a0d      	ldr	r2, [pc, #52]	; (8005934 <TIM_Base_SetConfig+0x60>)
 8005900:	4290      	cmp	r0, r2
 8005902:	d103      	bne.n	800590c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005904:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800590c:	694a      	ldr	r2, [r1, #20]
 800590e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005912:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005914:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005916:	688b      	ldr	r3, [r1, #8]
 8005918:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800591a:	680b      	ldr	r3, [r1, #0]
 800591c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <TIM_Base_SetConfig+0x5c>)
 8005920:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8005922:	bf04      	itt	eq
 8005924:	690b      	ldreq	r3, [r1, #16]
 8005926:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005928:	2301      	movs	r3, #1
 800592a:	6143      	str	r3, [r0, #20]
}
 800592c:	bd10      	pop	{r4, pc}
 800592e:	bf00      	nop
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40000400 	.word	0x40000400

08005938 <HAL_TIM_Base_Init>:
{
 8005938:	b510      	push	{r4, lr}
  if (htim == NULL)
 800593a:	4604      	mov	r4, r0
 800593c:	b330      	cbz	r0, 800598c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005942:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005946:	b91b      	cbnz	r3, 8005950 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005948:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800594c:	f7fe fb54 	bl	8003ff8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005952:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005958:	1d21      	adds	r1, r4, #4
 800595a:	f7ff ffbb 	bl	80058d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595e:	2301      	movs	r3, #1
  return HAL_OK;
 8005960:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005962:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005966:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800596a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800596e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005972:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800597a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800598a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800598c:	2001      	movs	r0, #1
 800598e:	e7fc      	b.n	800598a <HAL_TIM_Base_Init+0x52>

08005990 <HAL_TIM_PWM_Init>:
{
 8005990:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005992:	4604      	mov	r4, r0
 8005994:	b330      	cbz	r0, 80059e4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005996:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800599a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800599e:	b91b      	cbnz	r3, 80059a8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80059a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80059a4:	f7ff ff94 	bl	80058d0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059aa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b0:	1d21      	adds	r1, r4, #4
 80059b2:	f7ff ff8f 	bl	80058d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	2301      	movs	r3, #1
  return HAL_OK;
 80059b8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80059c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80059c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80059ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80059da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80059de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80059e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80059e4:	2001      	movs	r0, #1
 80059e6:	e7fc      	b.n	80059e2 <HAL_TIM_PWM_Init+0x52>

080059e8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e8:	6a03      	ldr	r3, [r0, #32]
{
 80059ea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ec:	f023 0310 	bic.w	r3, r3, #16
 80059f0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80059f2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80059f4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80059f6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a02:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005a04:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a0c:	4d0b      	ldr	r5, [pc, #44]	; (8005a3c <TIM_OC2_SetConfig+0x54>)
 8005a0e:	42a8      	cmp	r0, r5
 8005a10:	d10d      	bne.n	8005a2e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a12:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a1c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a20:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005a24:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a2a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005a2e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005a30:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005a32:	684a      	ldr	r2, [r1, #4]
 8005a34:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005a36:	6203      	str	r3, [r0, #32]
}
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40012c00 	.word	0x40012c00

08005a40 <HAL_TIM_PWM_ConfigChannel>:
{
 8005a40:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005a42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005a46:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d052      	beq.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0xb2>
 8005a4c:	2301      	movs	r3, #1
  switch (Channel)
 8005a4e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005a50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005a54:	d03c      	beq.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8005a56:	d806      	bhi.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x26>
 8005a58:	b1c2      	cbz	r2, 8005a8c <HAL_TIM_PWM_ConfigChannel+0x4c>
 8005a5a:	2a04      	cmp	r2, #4
 8005a5c:	d027      	beq.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005a64:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005a66:	2a0c      	cmp	r2, #12
 8005a68:	d1f9      	bne.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a6a:	6800      	ldr	r0, [r0, #0]
 8005a6c:	f7ff ff0e 	bl	800588c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a70:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a72:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a8a:	e030      	b.n	8005aee <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a8c:	6800      	ldr	r0, [r0, #0]
 8005a8e:	f7ff feab 	bl	80057e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a92:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a94:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	f042 0208 	orr.w	r2, r2, #8
 8005a9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	f022 0204 	bic.w	r2, r2, #4
 8005aa4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aaa:	619a      	str	r2, [r3, #24]
      break;
 8005aac:	e7d7      	b.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aae:	6800      	ldr	r0, [r0, #0]
 8005ab0:	f7ff ff9a 	bl	80059e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ab4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ace:	e7ec      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ad0:	6800      	ldr	r0, [r0, #0]
 8005ad2:	f7ff feb1 	bl	8005838 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ad6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ad8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	f042 0208 	orr.w	r2, r2, #8
 8005ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	f022 0204 	bic.w	r2, r2, #4
 8005ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aee:	61da      	str	r2, [r3, #28]
      break;
 8005af0:	e7b5      	b.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8005af2:	2002      	movs	r0, #2
 8005af4:	e7b6      	b.n	8005a64 <HAL_TIM_PWM_ConfigChannel+0x24>

08005af6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af6:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005af8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005afa:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b00:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005b04:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b06:	6082      	str	r2, [r0, #8]
}
 8005b08:	bd10      	pop	{r4, pc}

08005b0a <HAL_TIM_ConfigClockSource>:
{
 8005b0a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005b0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005b10:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	f04f 0002 	mov.w	r0, #2
 8005b18:	d027      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x60>
 8005b1a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005b22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005b26:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005b30:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b32:	680b      	ldr	r3, [r1, #0]
 8005b34:	2b60      	cmp	r3, #96	; 0x60
 8005b36:	d04d      	beq.n	8005bd4 <HAL_TIM_ConfigClockSource+0xca>
 8005b38:	d832      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x96>
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d062      	beq.n	8005c04 <HAL_TIM_ConfigClockSource+0xfa>
 8005b3e:	d815      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x62>
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d003      	beq.n	8005b4c <HAL_TIM_ConfigClockSource+0x42>
 8005b44:	d809      	bhi.n	8005b5a <HAL_TIM_ConfigClockSource+0x50>
 8005b46:	f033 0210 	bics.w	r2, r3, #16
 8005b4a:	d108      	bne.n	8005b5e <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8005b4c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f043 0307 	orr.w	r3, r3, #7
 8005b58:	e020      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005b5a:	2b30      	cmp	r3, #48	; 0x30
 8005b5c:	d0f6      	beq.n	8005b4c <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8005b5e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005b60:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b66:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005b6c:	2b50      	cmp	r3, #80	; 0x50
 8005b6e:	d1f6      	bne.n	8005b5e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b70:	684a      	ldr	r2, [r1, #4]
 8005b72:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005b74:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b76:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b78:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7c:	f025 0501 	bic.w	r5, r5, #1
 8005b80:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b82:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005b84:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b8a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005b8e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005b90:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005b92:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b98:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005b9c:	6083      	str	r3, [r0, #8]
}
 8005b9e:	e7de      	b.n	8005b5e <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8005ba0:	2b70      	cmp	r3, #112	; 0x70
 8005ba2:	d00c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xb4>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	d1d9      	bne.n	8005b5e <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8005baa:	68cb      	ldr	r3, [r1, #12]
 8005bac:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005bb0:	f7ff ffa1 	bl	8005af6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	6893      	ldr	r3, [r2, #8]
 8005bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bbc:	e008      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8005bbe:	68cb      	ldr	r3, [r1, #12]
 8005bc0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005bc4:	f7ff ff97 	bl	8005af6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bd0:	6093      	str	r3, [r2, #8]
      break;
 8005bd2:	e7c4      	b.n	8005b5e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd4:	684d      	ldr	r5, [r1, #4]
 8005bd6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd8:	6a01      	ldr	r1, [r0, #32]
 8005bda:	f021 0110 	bic.w	r1, r1, #16
 8005bde:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005be2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bf6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005bf8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bfe:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005c02:	e7cb      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c04:	684a      	ldr	r2, [r1, #4]
 8005c06:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c08:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c10:	f025 0501 	bic.w	r5, r5, #1
 8005c14:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c16:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005c18:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c1e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005c22:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c24:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005c26:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005c30:	e7b4      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x92>

08005c32 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c32:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c34:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c36:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c38:	f001 011f 	and.w	r1, r1, #31
 8005c3c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005c3e:	ea23 0304 	bic.w	r3, r3, r4
 8005c42:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c44:	6a03      	ldr	r3, [r0, #32]
 8005c46:	408a      	lsls	r2, r1
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	6202      	str	r2, [r0, #32]
}
 8005c4c:	bd10      	pop	{r4, pc}
	...

08005c50 <HAL_TIM_OC_Start>:
{
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c54:	b929      	cbnz	r1, 8005c62 <HAL_TIM_OC_Start+0x12>
 8005c56:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d021      	beq.n	8005ca2 <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 8005c5e:	2001      	movs	r0, #1
}
 8005c60:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c62:	2904      	cmp	r1, #4
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_OC_Start+0x26>
 8005c66:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d1f7      	bne.n	8005c5e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6e:	2302      	movs	r3, #2
 8005c70:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c74:	e018      	b.n	8005ca8 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c76:	2908      	cmp	r1, #8
 8005c78:	d107      	bne.n	8005c8a <HAL_TIM_OC_Start+0x3a>
 8005c7a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d1ed      	bne.n	8005c5e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c82:	2302      	movs	r3, #2
 8005c84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c88:	e00e      	b.n	8005ca8 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d1e5      	bne.n	8005c5e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c92:	2904      	cmp	r1, #4
 8005c94:	d0eb      	beq.n	8005c6e <HAL_TIM_OC_Start+0x1e>
 8005c96:	2908      	cmp	r1, #8
 8005c98:	d0f3      	beq.n	8005c82 <HAL_TIM_OC_Start+0x32>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005ca0:	e002      	b.n	8005ca8 <HAL_TIM_OC_Start+0x58>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca8:	2201      	movs	r2, #1
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	f7ff ffc1 	bl	8005c32 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <HAL_TIM_OC_Start+0x94>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d10a      	bne.n	8005cce <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8005cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cbe:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc6:	2a06      	cmp	r2, #6
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e7c8      	b.n	8005c60 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d0f5      	beq.n	8005cc0 <HAL_TIM_OC_Start+0x70>
 8005cd4:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <HAL_TIM_OC_Start+0x98>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d0f2      	beq.n	8005cc0 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e7f2      	b.n	8005cca <HAL_TIM_OC_Start+0x7a>
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40000400 	.word	0x40000400

08005cec <HAL_TIM_PWM_Start>:
 8005cec:	f7ff bfb0 	b.w	8005c50 <HAL_TIM_OC_Start>

08005cf0 <HAL_TIM_OC_Stop>:
{
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	6800      	ldr	r0, [r0, #0]
{
 8005cf8:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005cfa:	f7ff ff9a 	bl	8005c32 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <HAL_TIM_OC_Stop+0x74>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10d      	bne.n	8005d22 <HAL_TIM_OC_Stop+0x32>
    __HAL_TIM_MOE_DISABLE(htim);
 8005d06:	f241 1211 	movw	r2, #4369	; 0x1111
 8005d0a:	6a19      	ldr	r1, [r3, #32]
 8005d0c:	4211      	tst	r1, r2
 8005d0e:	d108      	bne.n	8005d22 <HAL_TIM_OC_Stop+0x32>
 8005d10:	f240 4244 	movw	r2, #1092	; 0x444
 8005d14:	6a19      	ldr	r1, [r3, #32]
 8005d16:	4211      	tst	r1, r2
 8005d18:	bf02      	ittt	eq
 8005d1a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8005d1c:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8005d20:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8005d22:	f241 1211 	movw	r2, #4369	; 0x1111
 8005d26:	6a19      	ldr	r1, [r3, #32]
 8005d28:	4211      	tst	r1, r2
 8005d2a:	d108      	bne.n	8005d3e <HAL_TIM_OC_Stop+0x4e>
 8005d2c:	f240 4244 	movw	r2, #1092	; 0x444
 8005d30:	6a19      	ldr	r1, [r3, #32]
 8005d32:	4211      	tst	r1, r2
 8005d34:	bf02      	ittt	eq
 8005d36:	681a      	ldreq	r2, [r3, #0]
 8005d38:	f022 0201 	biceq.w	r2, r2, #1
 8005d3c:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d3e:	2301      	movs	r3, #1
 8005d40:	b91d      	cbnz	r5, 8005d4a <HAL_TIM_OC_Stop+0x5a>
 8005d42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005d46:	2000      	movs	r0, #0
 8005d48:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d4a:	2d04      	cmp	r5, #4
 8005d4c:	d102      	bne.n	8005d54 <HAL_TIM_OC_Stop+0x64>
 8005d4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d52:	e7f8      	b.n	8005d46 <HAL_TIM_OC_Stop+0x56>
 8005d54:	2d08      	cmp	r5, #8
 8005d56:	bf0c      	ite	eq
 8005d58:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8005d5c:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8005d60:	e7f1      	b.n	8005d46 <HAL_TIM_OC_Stop+0x56>
 8005d62:	bf00      	nop
 8005d64:	40012c00 	.word	0x40012c00

08005d68 <HAL_TIM_PWM_Stop>:
 8005d68:	f7ff bfc2 	b.w	8005cf0 <HAL_TIM_OC_Stop>

08005d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d6c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 8005d72:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005d74:	2a01      	cmp	r2, #1
 8005d76:	f04f 0002 	mov.w	r0, #2
 8005d7a:	d01e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d7c:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005d82:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d86:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d8a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8005d8c:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8e:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d90:	4c0a      	ldr	r4, [pc, #40]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005d92:	42a2      	cmp	r2, r4
 8005d94:	d006      	beq.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8005d96:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8005d9c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8005da0:	42a2      	cmp	r2, r4
 8005da2:	d104      	bne.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005daa:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dac:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dae:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8005db0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005db6:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8005dba:	bd30      	pop	{r4, r5, pc}
 8005dbc:	40012c00 	.word	0x40012c00

08005dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d01f      	beq.n	8005e08 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dc8:	68cb      	ldr	r3, [r1, #12]
 8005dca:	688a      	ldr	r2, [r1, #8]
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dd2:	684a      	ldr	r2, [r1, #4]
 8005dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dda:	680a      	ldr	r2, [r1, #0]
 8005ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005de2:	690a      	ldr	r2, [r1, #16]
 8005de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005de8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dea:	694a      	ldr	r2, [r1, #20]
 8005dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005df2:	69ca      	ldr	r2, [r1, #28]
 8005df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df8:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dfa:	6802      	ldr	r2, [r0, #0]
 8005dfc:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005e04:	4618      	mov	r0, r3
 8005e06:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e08:	2002      	movs	r0, #2
}
 8005e0a:	4770      	bx	lr

08005e0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8005e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005e0e:	2400      	movs	r4, #0
 8005e10:	2310      	movs	r3, #16
 8005e12:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005e16:	6803      	ldr	r3, [r0, #0]
 8005e18:	4615      	mov	r5, r2
 8005e1a:	699e      	ldr	r6, [r3, #24]
 8005e1c:	e9cd 4400 	strd	r4, r4, [sp]
 8005e20:	466b      	mov	r3, sp
 8005e22:	6812      	ldr	r2, [r2, #0]
 8005e24:	47b0      	blx	r6
 8005e26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005e2a:	f003 0306 	and.w	r3, r3, #6
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	bf09      	itett	eq
 8005e32:	2001      	moveq	r0, #1
 8005e34:	4620      	movne	r0, r4
 8005e36:	9b00      	ldreq	r3, [sp, #0]
 8005e38:	602b      	streq	r3, [r5, #0]
 8005e3a:	b004      	add	sp, #16
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}

08005e3e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005e3e:	9800      	ldr	r0, [sp, #0]
 8005e40:	4290      	cmp	r0, r2
 8005e42:	bf14      	ite	ne
 8005e44:	2001      	movne	r0, #1
 8005e46:	2006      	moveq	r0, #6
 8005e48:	4770      	bx	lr
	...

08005e4c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8005e52:	6003      	str	r3, [r0, #0]
 8005e54:	f000 fc3b 	bl	80066ce <_ZNSt9type_infoD1Ev>
 8005e58:	4620      	mov	r0, r4
 8005e5a:	bd10      	pop	{r4, pc}
 8005e5c:	08007444 	.word	0x08007444

08005e60 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
 8005e64:	f7ff fff2 	bl	8005e4c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005e68:	4620      	mov	r0, r4
 8005e6a:	2108      	movs	r1, #8
 8005e6c:	f000 f842 	bl	8005ef4 <_ZdlPvj>
 8005e70:	4620      	mov	r0, r4
 8005e72:	bd10      	pop	{r4, pc}

08005e74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005e7c:	461f      	mov	r7, r3
 8005e7e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005e82:	4598      	cmp	r8, r3
 8005e84:	4606      	mov	r6, r0
 8005e86:	4615      	mov	r5, r2
 8005e88:	d107      	bne.n	8005e9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005e8a:	9907      	ldr	r1, [sp, #28]
 8005e8c:	f000 fc22 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 8005e90:	b118      	cbz	r0, 8005e9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005e92:	7165      	strb	r5, [r4, #5]
 8005e94:	2000      	movs	r0, #0
 8005e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f000 fc19 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0f6      	beq.n	8005e94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f8c4 8000 	str.w	r8, [r4]
 8005eac:	7125      	strb	r5, [r4, #4]
 8005eae:	71a3      	strb	r3, [r4, #6]
 8005eb0:	e7f0      	b.n	8005e94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08005eb2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005eb2:	b538      	push	{r3, r4, r5, lr}
 8005eb4:	4615      	mov	r5, r2
 8005eb6:	461c      	mov	r4, r3
 8005eb8:	f000 fc0c 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 8005ebc:	b120      	cbz	r0, 8005ec8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	60e3      	str	r3, [r4, #12]
 8005ec2:	2306      	movs	r3, #6
 8005ec4:	6025      	str	r5, [r4, #0]
 8005ec6:	7123      	strb	r3, [r4, #4]
 8005ec8:	bd38      	pop	{r3, r4, r5, pc}

08005eca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	4605      	mov	r5, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4616      	mov	r6, r2
 8005ed4:	461f      	mov	r7, r3
 8005ed6:	f000 fbfd 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 8005eda:	b948      	cbnz	r0, 8005ef0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005edc:	2f03      	cmp	r7, #3
 8005ede:	d807      	bhi.n	8005ef0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	4718      	bx	r3
 8005ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ef4 <_ZdlPvj>:
 8005ef4:	f000 be47 	b.w	8006b86 <_ZdlPv>

08005ef8 <__cxa_end_cleanup>:
 8005ef8:	b41e      	push	{r1, r2, r3, r4}
 8005efa:	f000 f89c 	bl	8006036 <__gnu_end_cleanup>
 8005efe:	bc1e      	pop	{r1, r2, r3, r4}
 8005f00:	f7fb fdc2 	bl	8001a88 <_Unwind_Resume>

08005f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005f04:	7803      	ldrb	r3, [r0, #0]
 8005f06:	2b47      	cmp	r3, #71	; 0x47
 8005f08:	d117      	bne.n	8005f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005f0a:	7843      	ldrb	r3, [r0, #1]
 8005f0c:	2b4e      	cmp	r3, #78	; 0x4e
 8005f0e:	d114      	bne.n	8005f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005f10:	7883      	ldrb	r3, [r0, #2]
 8005f12:	2b55      	cmp	r3, #85	; 0x55
 8005f14:	d111      	bne.n	8005f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005f16:	78c3      	ldrb	r3, [r0, #3]
 8005f18:	2b43      	cmp	r3, #67	; 0x43
 8005f1a:	d10e      	bne.n	8005f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005f1c:	7903      	ldrb	r3, [r0, #4]
 8005f1e:	2b43      	cmp	r3, #67	; 0x43
 8005f20:	d10b      	bne.n	8005f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005f22:	7943      	ldrb	r3, [r0, #5]
 8005f24:	2b2b      	cmp	r3, #43	; 0x2b
 8005f26:	d108      	bne.n	8005f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005f28:	7983      	ldrb	r3, [r0, #6]
 8005f2a:	2b2b      	cmp	r3, #43	; 0x2b
 8005f2c:	d105      	bne.n	8005f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005f2e:	79c0      	ldrb	r0, [r0, #7]
 8005f30:	2801      	cmp	r0, #1
 8005f32:	bf8c      	ite	hi
 8005f34:	2000      	movhi	r0, #0
 8005f36:	2001      	movls	r0, #1
 8005f38:	4770      	bx	lr
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	4770      	bx	lr
	...

08005f40 <__cxa_type_match>:
 8005f40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f44:	461d      	mov	r5, r3
 8005f46:	7803      	ldrb	r3, [r0, #0]
 8005f48:	460e      	mov	r6, r1
 8005f4a:	2b47      	cmp	r3, #71	; 0x47
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	79c1      	ldrb	r1, [r0, #7]
 8005f50:	d113      	bne.n	8005f7a <__cxa_type_match+0x3a>
 8005f52:	7843      	ldrb	r3, [r0, #1]
 8005f54:	2b4e      	cmp	r3, #78	; 0x4e
 8005f56:	d110      	bne.n	8005f7a <__cxa_type_match+0x3a>
 8005f58:	7883      	ldrb	r3, [r0, #2]
 8005f5a:	2b55      	cmp	r3, #85	; 0x55
 8005f5c:	d10d      	bne.n	8005f7a <__cxa_type_match+0x3a>
 8005f5e:	78c3      	ldrb	r3, [r0, #3]
 8005f60:	2b43      	cmp	r3, #67	; 0x43
 8005f62:	d10a      	bne.n	8005f7a <__cxa_type_match+0x3a>
 8005f64:	7903      	ldrb	r3, [r0, #4]
 8005f66:	2b46      	cmp	r3, #70	; 0x46
 8005f68:	d107      	bne.n	8005f7a <__cxa_type_match+0x3a>
 8005f6a:	7943      	ldrb	r3, [r0, #5]
 8005f6c:	2b4f      	cmp	r3, #79	; 0x4f
 8005f6e:	d104      	bne.n	8005f7a <__cxa_type_match+0x3a>
 8005f70:	7983      	ldrb	r3, [r0, #6]
 8005f72:	2b52      	cmp	r3, #82	; 0x52
 8005f74:	d101      	bne.n	8005f7a <__cxa_type_match+0x3a>
 8005f76:	2900      	cmp	r1, #0
 8005f78:	d030      	beq.n	8005fdc <__cxa_type_match+0x9c>
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f7ff ffc2 	bl	8005f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005f80:	2300      	movs	r3, #0
 8005f82:	f080 0401 	eor.w	r4, r0, #1
 8005f86:	b2e4      	uxtb	r4, r4
 8005f88:	2000      	movs	r0, #0
 8005f8a:	9001      	str	r0, [sp, #4]
 8005f8c:	bb4b      	cbnz	r3, 8005fe2 <__cxa_type_match+0xa2>
 8005f8e:	bb54      	cbnz	r4, 8005fe6 <__cxa_type_match+0xa6>
 8005f90:	2901      	cmp	r1, #1
 8005f92:	bf0a      	itet	eq
 8005f94:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005f98:	f1a2 0320 	subne.w	r3, r2, #32
 8005f9c:	3b78      	subeq	r3, #120	; 0x78
 8005f9e:	2901      	cmp	r1, #1
 8005fa0:	bf0c      	ite	eq
 8005fa2:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005fa6:	3258      	addne	r2, #88	; 0x58
 8005fa8:	681c      	ldr	r4, [r3, #0]
 8005faa:	9201      	str	r2, [sp, #4]
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	4620      	mov	r0, r4
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	4798      	blx	r3
 8005fb4:	b1c8      	cbz	r0, 8005fea <__cxa_type_match+0xaa>
 8005fb6:	2702      	movs	r7, #2
 8005fb8:	9b01      	ldr	r3, [sp, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	6833      	ldr	r3, [r6, #0]
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	2301      	movs	r3, #1
 8005fca:	aa01      	add	r2, sp, #4
 8005fcc:	47c0      	blx	r8
 8005fce:	b170      	cbz	r0, 8005fee <__cxa_type_match+0xae>
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	b002      	add	sp, #8
 8005fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fdc:	2301      	movs	r3, #1
 8005fde:	460c      	mov	r4, r1
 8005fe0:	e7d2      	b.n	8005f88 <__cxa_type_match+0x48>
 8005fe2:	4c04      	ldr	r4, [pc, #16]	; (8005ff4 <__cxa_type_match+0xb4>)
 8005fe4:	e7e2      	b.n	8005fac <__cxa_type_match+0x6c>
 8005fe6:	4c04      	ldr	r4, [pc, #16]	; (8005ff8 <__cxa_type_match+0xb8>)
 8005fe8:	e7e0      	b.n	8005fac <__cxa_type_match+0x6c>
 8005fea:	2701      	movs	r7, #1
 8005fec:	e7e7      	b.n	8005fbe <__cxa_type_match+0x7e>
 8005fee:	4607      	mov	r7, r0
 8005ff0:	e7f0      	b.n	8005fd4 <__cxa_type_match+0x94>
 8005ff2:	bf00      	nop
 8005ff4:	08007468 	.word	0x08007468
 8005ff8:	08007470 	.word	0x08007470

08005ffc <__cxa_begin_cleanup>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	4604      	mov	r4, r0
 8006000:	f000 f832 	bl	8006068 <__cxa_get_globals>
 8006004:	4602      	mov	r2, r0
 8006006:	4620      	mov	r0, r4
 8006008:	f1a4 0120 	sub.w	r1, r4, #32
 800600c:	f7ff ff7a 	bl	8005f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006010:	b160      	cbz	r0, 800602c <__cxa_begin_cleanup+0x30>
 8006012:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006016:	3301      	adds	r3, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	f844 3c04 	str.w	r3, [r4, #-4]
 800601e:	d103      	bne.n	8006028 <__cxa_begin_cleanup+0x2c>
 8006020:	6893      	ldr	r3, [r2, #8]
 8006022:	f844 3c08 	str.w	r3, [r4, #-8]
 8006026:	6091      	str	r1, [r2, #8]
 8006028:	2001      	movs	r0, #1
 800602a:	bd10      	pop	{r4, pc}
 800602c:	6893      	ldr	r3, [r2, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f9      	beq.n	8006026 <__cxa_begin_cleanup+0x2a>
 8006032:	f000 faa3 	bl	800657c <_ZSt9terminatev>

08006036 <__gnu_end_cleanup>:
 8006036:	b510      	push	{r4, lr}
 8006038:	f000 f816 	bl	8006068 <__cxa_get_globals>
 800603c:	6882      	ldr	r2, [r0, #8]
 800603e:	4601      	mov	r1, r0
 8006040:	b90a      	cbnz	r2, 8006046 <__gnu_end_cleanup+0x10>
 8006042:	f000 fa9b 	bl	800657c <_ZSt9terminatev>
 8006046:	f102 0420 	add.w	r4, r2, #32
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff ff5a 	bl	8005f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006050:	b140      	cbz	r0, 8006064 <__gnu_end_cleanup+0x2e>
 8006052:	69d3      	ldr	r3, [r2, #28]
 8006054:	3b01      	subs	r3, #1
 8006056:	61d3      	str	r3, [r2, #28]
 8006058:	b913      	cbnz	r3, 8006060 <__gnu_end_cleanup+0x2a>
 800605a:	6990      	ldr	r0, [r2, #24]
 800605c:	6088      	str	r0, [r1, #8]
 800605e:	6193      	str	r3, [r2, #24]
 8006060:	4620      	mov	r0, r4
 8006062:	bd10      	pop	{r4, pc}
 8006064:	6088      	str	r0, [r1, #8]
 8006066:	e7fb      	b.n	8006060 <__gnu_end_cleanup+0x2a>

08006068 <__cxa_get_globals>:
 8006068:	4800      	ldr	r0, [pc, #0]	; (800606c <__cxa_get_globals+0x4>)
 800606a:	4770      	bx	lr
 800606c:	20000434 	.word	0x20000434

08006070 <_ZL12read_uleb128PKhPm>:
 8006070:	2300      	movs	r3, #0
 8006072:	461a      	mov	r2, r3
 8006074:	b530      	push	{r4, r5, lr}
 8006076:	f810 5b01 	ldrb.w	r5, [r0], #1
 800607a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800607e:	4094      	lsls	r4, r2
 8006080:	4323      	orrs	r3, r4
 8006082:	062c      	lsls	r4, r5, #24
 8006084:	f102 0207 	add.w	r2, r2, #7
 8006088:	d4f5      	bmi.n	8006076 <_ZL12read_uleb128PKhPm+0x6>
 800608a:	600b      	str	r3, [r1, #0]
 800608c:	bd30      	pop	{r4, r5, pc}

0800608e <_ZL12read_sleb128PKhPl>:
 800608e:	2300      	movs	r3, #0
 8006090:	461a      	mov	r2, r3
 8006092:	b530      	push	{r4, r5, lr}
 8006094:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006098:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800609c:	4095      	lsls	r5, r2
 800609e:	432b      	orrs	r3, r5
 80060a0:	0625      	lsls	r5, r4, #24
 80060a2:	f102 0207 	add.w	r2, r2, #7
 80060a6:	d4f5      	bmi.n	8006094 <_ZL12read_sleb128PKhPl+0x6>
 80060a8:	2a1f      	cmp	r2, #31
 80060aa:	d806      	bhi.n	80060ba <_ZL12read_sleb128PKhPl+0x2c>
 80060ac:	0664      	lsls	r4, r4, #25
 80060ae:	bf42      	ittt	mi
 80060b0:	f04f 34ff 	movmi.w	r4, #4294967295
 80060b4:	fa04 f202 	lslmi.w	r2, r4, r2
 80060b8:	4313      	orrmi	r3, r2
 80060ba:	600b      	str	r3, [r1, #0]
 80060bc:	bd30      	pop	{r4, r5, pc}

080060be <_ZL28read_encoded_value_with_basehjPKhPj>:
 80060be:	2850      	cmp	r0, #80	; 0x50
 80060c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060c4:	4606      	mov	r6, r0
 80060c6:	4688      	mov	r8, r1
 80060c8:	4615      	mov	r5, r2
 80060ca:	461f      	mov	r7, r3
 80060cc:	d108      	bne.n	80060e0 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80060ce:	1cd0      	adds	r0, r2, #3
 80060d0:	f020 0003 	bic.w	r0, r0, #3
 80060d4:	f850 4b04 	ldr.w	r4, [r0], #4
 80060d8:	603c      	str	r4, [r7, #0]
 80060da:	b002      	add	sp, #8
 80060dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e0:	f000 030f 	and.w	r3, r0, #15
 80060e4:	2b0c      	cmp	r3, #12
 80060e6:	d82e      	bhi.n	8006146 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80060e8:	e8df f003 	tbb	[pc, r3]
 80060ec:	251d0725 	.word	0x251d0725
 80060f0:	2d2d2d29 	.word	0x2d2d2d29
 80060f4:	2521182d 	.word	0x2521182d
 80060f8:	29          	.byte	0x29
 80060f9:	00          	.byte	0x00
 80060fa:	4628      	mov	r0, r5
 80060fc:	a901      	add	r1, sp, #4
 80060fe:	f7ff ffb7 	bl	8006070 <_ZL12read_uleb128PKhPm>
 8006102:	9c01      	ldr	r4, [sp, #4]
 8006104:	2c00      	cmp	r4, #0
 8006106:	d0e7      	beq.n	80060d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8006108:	f006 0370 	and.w	r3, r6, #112	; 0x70
 800610c:	2b10      	cmp	r3, #16
 800610e:	bf08      	it	eq
 8006110:	46a8      	moveq	r8, r5
 8006112:	0633      	lsls	r3, r6, #24
 8006114:	4444      	add	r4, r8
 8006116:	bf48      	it	mi
 8006118:	6824      	ldrmi	r4, [r4, #0]
 800611a:	e7dd      	b.n	80060d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 800611c:	4628      	mov	r0, r5
 800611e:	a901      	add	r1, sp, #4
 8006120:	f7ff ffb5 	bl	800608e <_ZL12read_sleb128PKhPl>
 8006124:	e7ed      	b.n	8006102 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8006126:	4628      	mov	r0, r5
 8006128:	f830 4b02 	ldrh.w	r4, [r0], #2
 800612c:	e7ea      	b.n	8006104 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800612e:	4628      	mov	r0, r5
 8006130:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8006134:	e7e6      	b.n	8006104 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006136:	4628      	mov	r0, r5
 8006138:	f850 4b04 	ldr.w	r4, [r0], #4
 800613c:	e7e2      	b.n	8006104 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800613e:	4628      	mov	r0, r5
 8006140:	f850 4b08 	ldr.w	r4, [r0], #8
 8006144:	e7de      	b.n	8006104 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006146:	f000 fdaf 	bl	8006ca8 <abort>

0800614a <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800614a:	b508      	push	{r3, lr}
 800614c:	4603      	mov	r3, r0
 800614e:	2bff      	cmp	r3, #255	; 0xff
 8006150:	4608      	mov	r0, r1
 8006152:	d010      	beq.n	8006176 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8006154:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006158:	2a30      	cmp	r2, #48	; 0x30
 800615a:	d012      	beq.n	8006182 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800615c:	d807      	bhi.n	800616e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800615e:	2a20      	cmp	r2, #32
 8006160:	d00b      	beq.n	800617a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8006162:	d802      	bhi.n	800616a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8006164:	f013 0f60 	tst.w	r3, #96	; 0x60
 8006168:	d005      	beq.n	8006176 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800616a:	f000 fd9d 	bl	8006ca8 <abort>
 800616e:	2a40      	cmp	r2, #64	; 0x40
 8006170:	d00b      	beq.n	800618a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8006172:	2a50      	cmp	r2, #80	; 0x50
 8006174:	d1f9      	bne.n	800616a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8006176:	2000      	movs	r0, #0
 8006178:	bd08      	pop	{r3, pc}
 800617a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800617e:	f000 bf46 	b.w	800700e <_Unwind_GetTextRelBase>
 8006182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006186:	f000 bf3f 	b.w	8007008 <_Unwind_GetDataRelBase>
 800618a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800618e:	f7fb be79 	b.w	8001e84 <_Unwind_GetRegionStart>

08006192 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006192:	b570      	push	{r4, r5, r6, lr}
 8006194:	460c      	mov	r4, r1
 8006196:	4601      	mov	r1, r0
 8006198:	4620      	mov	r0, r4
 800619a:	4615      	mov	r5, r2
 800619c:	461e      	mov	r6, r3
 800619e:	f7ff ffd4 	bl	800614a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80061a2:	4633      	mov	r3, r6
 80061a4:	4601      	mov	r1, r0
 80061a6:	462a      	mov	r2, r5
 80061a8:	4620      	mov	r0, r4
 80061aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061ae:	f7ff bf86 	b.w	80060be <_ZL28read_encoded_value_with_basehjPKhPj>

080061b2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80061b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b4:	460c      	mov	r4, r1
 80061b6:	4615      	mov	r5, r2
 80061b8:	4606      	mov	r6, r0
 80061ba:	b328      	cbz	r0, 8006208 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 80061bc:	f7fb fe62 	bl	8001e84 <_Unwind_GetRegionStart>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4620      	mov	r0, r4
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80061ca:	29ff      	cmp	r1, #255	; 0xff
 80061cc:	d01e      	beq.n	800620c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 80061ce:	4602      	mov	r2, r0
 80061d0:	1d2b      	adds	r3, r5, #4
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7ff ffdd 	bl	8006192 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80061d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061dc:	2bff      	cmp	r3, #255	; 0xff
 80061de:	752b      	strb	r3, [r5, #20]
 80061e0:	d016      	beq.n	8006210 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 80061e2:	2310      	movs	r3, #16
 80061e4:	a901      	add	r1, sp, #4
 80061e6:	752b      	strb	r3, [r5, #20]
 80061e8:	f7ff ff42 	bl	8006070 <_ZL12read_uleb128PKhPm>
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	4403      	add	r3, r0
 80061f0:	60eb      	str	r3, [r5, #12]
 80061f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061f6:	a901      	add	r1, sp, #4
 80061f8:	756b      	strb	r3, [r5, #21]
 80061fa:	f7ff ff39 	bl	8006070 <_ZL12read_uleb128PKhPm>
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	4403      	add	r3, r0
 8006202:	612b      	str	r3, [r5, #16]
 8006204:	b002      	add	sp, #8
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	4603      	mov	r3, r0
 800620a:	e7da      	b.n	80061c2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 800620c:	606b      	str	r3, [r5, #4]
 800620e:	e7e3      	b.n	80061d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8006210:	2300      	movs	r3, #0
 8006212:	e7ed      	b.n	80061f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08006214 <_Unwind_GetGR>:
 8006214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006216:	ab03      	add	r3, sp, #12
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	2300      	movs	r3, #0
 800621c:	460a      	mov	r2, r1
 800621e:	4619      	mov	r1, r3
 8006220:	f7fb f886 	bl	8001330 <_Unwind_VRS_Get>
 8006224:	9803      	ldr	r0, [sp, #12]
 8006226:	b005      	add	sp, #20
 8006228:	f85d fb04 	ldr.w	pc, [sp], #4

0800622c <__gxx_personality_v0>:
 800622c:	2300      	movs	r3, #0
 800622e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006232:	b091      	sub	sp, #68	; 0x44
 8006234:	9305      	str	r3, [sp, #20]
 8006236:	f000 0303 	and.w	r3, r0, #3
 800623a:	2b01      	cmp	r3, #1
 800623c:	4606      	mov	r6, r0
 800623e:	460c      	mov	r4, r1
 8006240:	4617      	mov	r7, r2
 8006242:	d00e      	beq.n	8006262 <__gxx_personality_v0+0x36>
 8006244:	2b02      	cmp	r3, #2
 8006246:	d003      	beq.n	8006250 <__gxx_personality_v0+0x24>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d13b      	bne.n	80062c4 <__gxx_personality_v0+0x98>
 800624c:	0701      	lsls	r1, r0, #28
 800624e:	d53b      	bpl.n	80062c8 <__gxx_personality_v0+0x9c>
 8006250:	4639      	mov	r1, r7
 8006252:	4620      	mov	r0, r4
 8006254:	f7fb fdfe 	bl	8001e54 <__gnu_unwind_frame>
 8006258:	b390      	cbz	r0, 80062c0 <__gxx_personality_v0+0x94>
 800625a:	2009      	movs	r0, #9
 800625c:	b011      	add	sp, #68	; 0x44
 800625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006262:	0702      	lsls	r2, r0, #28
 8006264:	d406      	bmi.n	8006274 <__gxx_personality_v0+0x48>
 8006266:	6a0d      	ldr	r5, [r1, #32]
 8006268:	4638      	mov	r0, r7
 800626a:	210d      	movs	r1, #13
 800626c:	f7ff ffd2 	bl	8006214 <_Unwind_GetGR>
 8006270:	4285      	cmp	r5, r0
 8006272:	d02b      	beq.n	80062cc <__gxx_personality_v0+0xa0>
 8006274:	2002      	movs	r0, #2
 8006276:	2300      	movs	r3, #0
 8006278:	f006 0608 	and.w	r6, r6, #8
 800627c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8006280:	4306      	orrs	r6, r0
 8006282:	220c      	movs	r2, #12
 8006284:	4619      	mov	r1, r3
 8006286:	4638      	mov	r0, r7
 8006288:	f8cd a000 	str.w	sl, [sp]
 800628c:	940a      	str	r4, [sp, #40]	; 0x28
 800628e:	f7fb f875 	bl	800137c <_Unwind_VRS_Set>
 8006292:	2e06      	cmp	r6, #6
 8006294:	d11c      	bne.n	80062d0 <__gxx_personality_v0+0xa4>
 8006296:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 800629a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800629e:	f1b8 0f00 	cmp.w	r8, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	f04f 0b01 	moveq.w	fp, #1
 80062a8:	f04f 0b03 	movne.w	fp, #3
 80062ac:	f016 0608 	ands.w	r6, r6, #8
 80062b0:	f000 8107 	beq.w	80064c2 <__gxx_personality_v0+0x296>
 80062b4:	f1bb 0f01 	cmp.w	fp, #1
 80062b8:	f040 80ff 	bne.w	80064ba <__gxx_personality_v0+0x28e>
 80062bc:	f000 f95e 	bl	800657c <_ZSt9terminatev>
 80062c0:	2008      	movs	r0, #8
 80062c2:	e7cb      	b.n	800625c <__gxx_personality_v0+0x30>
 80062c4:	f000 fcf0 	bl	8006ca8 <abort>
 80062c8:	2001      	movs	r0, #1
 80062ca:	e7d4      	b.n	8006276 <__gxx_personality_v0+0x4a>
 80062cc:	2006      	movs	r0, #6
 80062ce:	e7d2      	b.n	8006276 <__gxx_personality_v0+0x4a>
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7fb fddd 	bl	8001e90 <_Unwind_GetLanguageSpecificData>
 80062d6:	4681      	mov	r9, r0
 80062d8:	2800      	cmp	r0, #0
 80062da:	d0b9      	beq.n	8006250 <__gxx_personality_v0+0x24>
 80062dc:	4652      	mov	r2, sl
 80062de:	4601      	mov	r1, r0
 80062e0:	4638      	mov	r0, r7
 80062e2:	f7ff ff66 	bl	80061b2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80062e6:	4639      	mov	r1, r7
 80062e8:	4605      	mov	r5, r0
 80062ea:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80062ee:	f7ff ff2c 	bl	800614a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80062f2:	210f      	movs	r1, #15
 80062f4:	900c      	str	r0, [sp, #48]	; 0x30
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7ff ff8c 	bl	8006214 <_Unwind_GetGR>
 80062fc:	f020 0801 	bic.w	r8, r0, #1
 8006300:	f108 38ff 	add.w	r8, r8, #4294967295
 8006304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006306:	42ab      	cmp	r3, r5
 8006308:	f240 80bf 	bls.w	800648a <__gxx_personality_v0+0x25e>
 800630c:	462a      	mov	r2, r5
 800630e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006312:	ab06      	add	r3, sp, #24
 8006314:	2000      	movs	r0, #0
 8006316:	f7ff ff3c 	bl	8006192 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800631a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800631e:	4602      	mov	r2, r0
 8006320:	ab07      	add	r3, sp, #28
 8006322:	2000      	movs	r0, #0
 8006324:	f7ff ff35 	bl	8006192 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006328:	ab08      	add	r3, sp, #32
 800632a:	4602      	mov	r2, r0
 800632c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006330:	2000      	movs	r0, #0
 8006332:	f7ff ff2e 	bl	8006192 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006336:	a909      	add	r1, sp, #36	; 0x24
 8006338:	f7ff fe9a 	bl	8006070 <_ZL12read_uleb128PKhPm>
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	9a06      	ldr	r2, [sp, #24]
 8006340:	4605      	mov	r5, r0
 8006342:	4413      	add	r3, r2
 8006344:	4543      	cmp	r3, r8
 8006346:	d901      	bls.n	800634c <__gxx_personality_v0+0x120>
 8006348:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800634a:	e7db      	b.n	8006304 <__gxx_personality_v0+0xd8>
 800634c:	9a07      	ldr	r2, [sp, #28]
 800634e:	4413      	add	r3, r2
 8006350:	4543      	cmp	r3, r8
 8006352:	d9d7      	bls.n	8006304 <__gxx_personality_v0+0xd8>
 8006354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006358:	f1b8 0f00 	cmp.w	r8, #0
 800635c:	d001      	beq.n	8006362 <__gxx_personality_v0+0x136>
 800635e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006360:	4498      	add	r8, r3
 8006362:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006364:	b115      	cbz	r5, 800636c <__gxx_personality_v0+0x140>
 8006366:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006368:	3d01      	subs	r5, #1
 800636a:	4405      	add	r5, r0
 800636c:	f1b8 0f00 	cmp.w	r8, #0
 8006370:	f43f af6e 	beq.w	8006250 <__gxx_personality_v0+0x24>
 8006374:	2d00      	cmp	r5, #0
 8006376:	f000 80f2 	beq.w	800655e <__gxx_personality_v0+0x332>
 800637a:	f016 0308 	ands.w	r3, r6, #8
 800637e:	9302      	str	r3, [sp, #8]
 8006380:	d034      	beq.n	80063ec <__gxx_personality_v0+0x1c0>
 8006382:	2347      	movs	r3, #71	; 0x47
 8006384:	7023      	strb	r3, [r4, #0]
 8006386:	234e      	movs	r3, #78	; 0x4e
 8006388:	7063      	strb	r3, [r4, #1]
 800638a:	2355      	movs	r3, #85	; 0x55
 800638c:	70a3      	strb	r3, [r4, #2]
 800638e:	2343      	movs	r3, #67	; 0x43
 8006390:	70e3      	strb	r3, [r4, #3]
 8006392:	2346      	movs	r3, #70	; 0x46
 8006394:	7123      	strb	r3, [r4, #4]
 8006396:	234f      	movs	r3, #79	; 0x4f
 8006398:	7163      	strb	r3, [r4, #5]
 800639a:	2352      	movs	r3, #82	; 0x52
 800639c:	71a3      	strb	r3, [r4, #6]
 800639e:	2300      	movs	r3, #0
 80063a0:	71e3      	strb	r3, [r4, #7]
 80063a2:	f04f 0b00 	mov.w	fp, #0
 80063a6:	a907      	add	r1, sp, #28
 80063a8:	4628      	mov	r0, r5
 80063aa:	f7ff fe70 	bl	800608e <_ZL12read_sleb128PKhPl>
 80063ae:	a908      	add	r1, sp, #32
 80063b0:	9003      	str	r0, [sp, #12]
 80063b2:	f7ff fe6c 	bl	800608e <_ZL12read_sleb128PKhPl>
 80063b6:	9907      	ldr	r1, [sp, #28]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	d063      	beq.n	8006484 <__gxx_personality_v0+0x258>
 80063bc:	dd3a      	ble.n	8006434 <__gxx_personality_v0+0x208>
 80063be:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80063c2:	28ff      	cmp	r0, #255	; 0xff
 80063c4:	d032      	beq.n	800642c <__gxx_personality_v0+0x200>
 80063c6:	f000 0307 	and.w	r3, r0, #7
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	f63f af7a 	bhi.w	80062c4 <__gxx_personality_v0+0x98>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <__gxx_personality_v0+0x1ac>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	08006431 	.word	0x08006431
 80063dc:	080062c5 	.word	0x080062c5
 80063e0:	080063ff 	.word	0x080063ff
 80063e4:	08006431 	.word	0x08006431
 80063e8:	08006429 	.word	0x08006429
 80063ec:	79e3      	ldrb	r3, [r4, #7]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	bf0c      	ite	eq
 80063f2:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80063f6:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80063fa:	9305      	str	r3, [sp, #20]
 80063fc:	e7d1      	b.n	80063a2 <__gxx_personality_v0+0x176>
 80063fe:	2502      	movs	r5, #2
 8006400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006402:	ab09      	add	r3, sp, #36	; 0x24
 8006404:	fb05 2211 	mls	r2, r5, r1, r2
 8006408:	990c      	ldr	r1, [sp, #48]	; 0x30
 800640a:	f7ff fe58 	bl	80060be <_ZL28read_encoded_value_with_basehjPKhPj>
 800640e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006410:	b131      	cbz	r1, 8006420 <__gxx_personality_v0+0x1f4>
 8006412:	b35c      	cbz	r4, 800646c <__gxx_personality_v0+0x240>
 8006414:	2200      	movs	r2, #0
 8006416:	4620      	mov	r0, r4
 8006418:	ab05      	add	r3, sp, #20
 800641a:	f7ff fd91 	bl	8005f40 <__cxa_type_match>
 800641e:	b328      	cbz	r0, 800646c <__gxx_personality_v0+0x240>
 8006420:	f04f 0b03 	mov.w	fp, #3
 8006424:	9d07      	ldr	r5, [sp, #28]
 8006426:	e034      	b.n	8006492 <__gxx_personality_v0+0x266>
 8006428:	2508      	movs	r5, #8
 800642a:	e7e9      	b.n	8006400 <__gxx_personality_v0+0x1d4>
 800642c:	2500      	movs	r5, #0
 800642e:	e7e7      	b.n	8006400 <__gxx_personality_v0+0x1d4>
 8006430:	2504      	movs	r5, #4
 8006432:	e7e5      	b.n	8006400 <__gxx_personality_v0+0x1d4>
 8006434:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8006438:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 800643c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800643e:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8006442:	313f      	adds	r1, #63	; 0x3f
 8006444:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8006448:	b1bc      	cbz	r4, 800647a <__gxx_personality_v0+0x24e>
 800644a:	9a02      	ldr	r2, [sp, #8]
 800644c:	b9aa      	cbnz	r2, 800647a <__gxx_personality_v0+0x24e>
 800644e:	9b05      	ldr	r3, [sp, #20]
 8006450:	3d04      	subs	r5, #4
 8006452:	9309      	str	r3, [sp, #36]	; 0x24
 8006454:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8006458:	2900      	cmp	r1, #0
 800645a:	d0e1      	beq.n	8006420 <__gxx_personality_v0+0x1f4>
 800645c:	2200      	movs	r2, #0
 800645e:	4620      	mov	r0, r4
 8006460:	ab09      	add	r3, sp, #36	; 0x24
 8006462:	4429      	add	r1, r5
 8006464:	f7ff fd6c 	bl	8005f40 <__cxa_type_match>
 8006468:	2800      	cmp	r0, #0
 800646a:	d0f3      	beq.n	8006454 <__gxx_personality_v0+0x228>
 800646c:	9d08      	ldr	r5, [sp, #32]
 800646e:	2d00      	cmp	r5, #0
 8006470:	d071      	beq.n	8006556 <__gxx_personality_v0+0x32a>
 8006472:	9b03      	ldr	r3, [sp, #12]
 8006474:	442b      	add	r3, r5
 8006476:	461d      	mov	r5, r3
 8006478:	e795      	b.n	80063a6 <__gxx_personality_v0+0x17a>
 800647a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f4      	bne.n	800646c <__gxx_personality_v0+0x240>
 8006482:	e7cd      	b.n	8006420 <__gxx_personality_v0+0x1f4>
 8006484:	f04f 0b01 	mov.w	fp, #1
 8006488:	e7f0      	b.n	800646c <__gxx_personality_v0+0x240>
 800648a:	2500      	movs	r5, #0
 800648c:	f04f 0b01 	mov.w	fp, #1
 8006490:	46a8      	mov	r8, r5
 8006492:	07f3      	lsls	r3, r6, #31
 8006494:	f57f af0a 	bpl.w	80062ac <__gxx_personality_v0+0x80>
 8006498:	f1bb 0f02 	cmp.w	fp, #2
 800649c:	f43f aed8 	beq.w	8006250 <__gxx_personality_v0+0x24>
 80064a0:	210d      	movs	r1, #13
 80064a2:	4638      	mov	r0, r7
 80064a4:	9e05      	ldr	r6, [sp, #20]
 80064a6:	f7ff feb5 	bl	8006214 <_Unwind_GetGR>
 80064aa:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 80064ae:	e9c4 0608 	strd	r0, r6, [r4, #32]
 80064b2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80064b6:	2006      	movs	r0, #6
 80064b8:	e6d0      	b.n	800625c <__gxx_personality_v0+0x30>
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	da22      	bge.n	8006504 <__gxx_personality_v0+0x2d8>
 80064be:	f000 f86f 	bl	80065a0 <_ZSt10unexpectedv>
 80064c2:	f1bb 0f01 	cmp.w	fp, #1
 80064c6:	d102      	bne.n	80064ce <__gxx_personality_v0+0x2a2>
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fb7b 	bl	8006bc4 <__cxa_call_terminate>
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	da18      	bge.n	8006504 <__gxx_personality_v0+0x2d8>
 80064d2:	4652      	mov	r2, sl
 80064d4:	4649      	mov	r1, r9
 80064d6:	4638      	mov	r0, r7
 80064d8:	f7ff fe6b 	bl	80061b2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80064dc:	4639      	mov	r1, r7
 80064de:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80064e2:	f7ff fe32 	bl	800614a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80064e6:	43eb      	mvns	r3, r5
 80064e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064ea:	900c      	str	r0, [sp, #48]	; 0x30
 80064ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064f0:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80064f4:	b10a      	cbz	r2, 80064fa <__gxx_personality_v0+0x2ce>
 80064f6:	3601      	adds	r6, #1
 80064f8:	e7fa      	b.n	80064f0 <__gxx_personality_v0+0x2c4>
 80064fa:	2204      	movs	r2, #4
 80064fc:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8006500:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8006504:	2300      	movs	r3, #0
 8006506:	ae09      	add	r6, sp, #36	; 0x24
 8006508:	461a      	mov	r2, r3
 800650a:	4619      	mov	r1, r3
 800650c:	4638      	mov	r0, r7
 800650e:	9600      	str	r6, [sp, #0]
 8006510:	9409      	str	r4, [sp, #36]	; 0x24
 8006512:	f7fa ff33 	bl	800137c <_Unwind_VRS_Set>
 8006516:	2300      	movs	r3, #0
 8006518:	2201      	movs	r2, #1
 800651a:	4619      	mov	r1, r3
 800651c:	4638      	mov	r0, r7
 800651e:	9600      	str	r6, [sp, #0]
 8006520:	9509      	str	r5, [sp, #36]	; 0x24
 8006522:	f7fa ff2b 	bl	800137c <_Unwind_VRS_Set>
 8006526:	210f      	movs	r1, #15
 8006528:	4638      	mov	r0, r7
 800652a:	f7ff fe73 	bl	8006214 <_Unwind_GetGR>
 800652e:	2300      	movs	r3, #0
 8006530:	f000 0001 	and.w	r0, r0, #1
 8006534:	ea40 0008 	orr.w	r0, r0, r8
 8006538:	9009      	str	r0, [sp, #36]	; 0x24
 800653a:	220f      	movs	r2, #15
 800653c:	4619      	mov	r1, r3
 800653e:	4638      	mov	r0, r7
 8006540:	9600      	str	r6, [sp, #0]
 8006542:	f7fa ff1b 	bl	800137c <_Unwind_VRS_Set>
 8006546:	f1bb 0f02 	cmp.w	fp, #2
 800654a:	d102      	bne.n	8006552 <__gxx_personality_v0+0x326>
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff fd55 	bl	8005ffc <__cxa_begin_cleanup>
 8006552:	2007      	movs	r0, #7
 8006554:	e682      	b.n	800625c <__gxx_personality_v0+0x30>
 8006556:	f1bb 0f00 	cmp.w	fp, #0
 800655a:	f43f ae79 	beq.w	8006250 <__gxx_personality_v0+0x24>
 800655e:	f04f 0b02 	mov.w	fp, #2
 8006562:	e796      	b.n	8006492 <__gxx_personality_v0+0x266>

08006564 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006564:	b508      	push	{r3, lr}
 8006566:	4780      	blx	r0
 8006568:	f000 fb9e 	bl	8006ca8 <abort>

0800656c <_ZSt13get_terminatev>:
 800656c:	4b02      	ldr	r3, [pc, #8]	; (8006578 <_ZSt13get_terminatev+0xc>)
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	f3bf 8f5b 	dmb	ish
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	20000014 	.word	0x20000014

0800657c <_ZSt9terminatev>:
 800657c:	b508      	push	{r3, lr}
 800657e:	f7ff fff5 	bl	800656c <_ZSt13get_terminatev>
 8006582:	f7ff ffef 	bl	8006564 <_ZN10__cxxabiv111__terminateEPFvvE>

08006586 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8006586:	b508      	push	{r3, lr}
 8006588:	4780      	blx	r0
 800658a:	f7ff fff7 	bl	800657c <_ZSt9terminatev>
	...

08006590 <_ZSt14get_unexpectedv>:
 8006590:	4b02      	ldr	r3, [pc, #8]	; (800659c <_ZSt14get_unexpectedv+0xc>)
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	f3bf 8f5b 	dmb	ish
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000010 	.word	0x20000010

080065a0 <_ZSt10unexpectedv>:
 80065a0:	b508      	push	{r3, lr}
 80065a2:	f7ff fff5 	bl	8006590 <_ZSt14get_unexpectedv>
 80065a6:	f7ff ffee 	bl	8006586 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080065aa <_Znwj>:
 80065aa:	2801      	cmp	r0, #1
 80065ac:	bf38      	it	cc
 80065ae:	2001      	movcc	r0, #1
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4604      	mov	r4, r0
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 fba9 	bl	8006d0c <malloc>
 80065ba:	b930      	cbnz	r0, 80065ca <_Znwj+0x20>
 80065bc:	f000 fb6c 	bl	8006c98 <_ZSt15get_new_handlerv>
 80065c0:	b908      	cbnz	r0, 80065c6 <_Znwj+0x1c>
 80065c2:	f000 fb71 	bl	8006ca8 <abort>
 80065c6:	4780      	blx	r0
 80065c8:	e7f4      	b.n	80065b4 <_Znwj+0xa>
 80065ca:	bd10      	pop	{r4, pc}

080065cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4604      	mov	r4, r0
 80065d0:	4b02      	ldr	r3, [pc, #8]	; (80065dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80065d2:	6003      	str	r3, [r0, #0]
 80065d4:	f7ff fc3a 	bl	8005e4c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80065d8:	4620      	mov	r0, r4
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	080074f8 	.word	0x080074f8

080065e0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	4604      	mov	r4, r0
 80065e4:	f7ff fff2 	bl	80065cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80065e8:	4620      	mov	r0, r4
 80065ea:	210c      	movs	r1, #12
 80065ec:	f7ff fc82 	bl	8005ef4 <_ZdlPvj>
 80065f0:	4620      	mov	r0, r4
 80065f2:	bd10      	pop	{r4, pc}

080065f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80065f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80065fc:	4606      	mov	r6, r0
 80065fe:	4590      	cmp	r8, r2
 8006600:	460f      	mov	r7, r1
 8006602:	4615      	mov	r5, r2
 8006604:	461c      	mov	r4, r3
 8006606:	d00b      	beq.n	8006620 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8006608:	68b0      	ldr	r0, [r6, #8]
 800660a:	462a      	mov	r2, r5
 800660c:	6803      	ldr	r3, [r0, #0]
 800660e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006612:	6a1e      	ldr	r6, [r3, #32]
 8006614:	4639      	mov	r1, r7
 8006616:	4623      	mov	r3, r4
 8006618:	46b4      	mov	ip, r6
 800661a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	4760      	bx	ip
 8006620:	4619      	mov	r1, r3
 8006622:	f000 f857 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 8006626:	2800      	cmp	r0, #0
 8006628:	d0ee      	beq.n	8006608 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 800662a:	2006      	movs	r0, #6
 800662c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8006630:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	460d      	mov	r5, r1
 8006636:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 800663a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 800663e:	4619      	mov	r1, r3
 8006640:	4681      	mov	r9, r0
 8006642:	4617      	mov	r7, r2
 8006644:	4698      	mov	r8, r3
 8006646:	f000 f845 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 800664a:	b190      	cbz	r0, 8006672 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800664c:	2d00      	cmp	r5, #0
 800664e:	6034      	str	r4, [r6, #0]
 8006650:	7137      	strb	r7, [r6, #4]
 8006652:	db09      	blt.n	8006668 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8006654:	442c      	add	r4, r5
 8006656:	45a2      	cmp	sl, r4
 8006658:	bf0c      	ite	eq
 800665a:	2406      	moveq	r4, #6
 800665c:	2401      	movne	r4, #1
 800665e:	71b4      	strb	r4, [r6, #6]
 8006660:	2000      	movs	r0, #0
 8006662:	b001      	add	sp, #4
 8006664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	3502      	adds	r5, #2
 800666a:	d1f9      	bne.n	8006660 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800666c:	2301      	movs	r3, #1
 800666e:	71b3      	strb	r3, [r6, #6]
 8006670:	e7f6      	b.n	8006660 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8006672:	4554      	cmp	r4, sl
 8006674:	d106      	bne.n	8006684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8006676:	4659      	mov	r1, fp
 8006678:	4648      	mov	r0, r9
 800667a:	f000 f82b 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 800667e:	b108      	cbz	r0, 8006684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8006680:	7177      	strb	r7, [r6, #5]
 8006682:	e7ed      	b.n	8006660 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8006684:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8006688:	463a      	mov	r2, r7
 800668a:	6803      	ldr	r3, [r0, #0]
 800668c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8006690:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8006694:	69dc      	ldr	r4, [r3, #28]
 8006696:	4629      	mov	r1, r5
 8006698:	4643      	mov	r3, r8
 800669a:	46a4      	mov	ip, r4
 800669c:	b001      	add	sp, #4
 800669e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a2:	4760      	bx	ip

080066a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	4607      	mov	r7, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4615      	mov	r5, r2
 80066ae:	461e      	mov	r6, r3
 80066b0:	f7ff fbff 	bl	8005eb2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80066b4:	b948      	cbnz	r0, 80066ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80066b6:	68b8      	ldr	r0, [r7, #8]
 80066b8:	462a      	mov	r2, r5
 80066ba:	6803      	ldr	r3, [r0, #0]
 80066bc:	4621      	mov	r1, r4
 80066be:	699f      	ldr	r7, [r3, #24]
 80066c0:	4633      	mov	r3, r6
 80066c2:	46bc      	mov	ip, r7
 80066c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c8:	4760      	bx	ip
 80066ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066ce <_ZNSt9type_infoD1Ev>:
 80066ce:	4770      	bx	lr

080066d0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80066d0:	2000      	movs	r0, #0
 80066d2:	4770      	bx	lr

080066d4 <_ZNKSt9type_infoeqERKS_>:
 80066d4:	4281      	cmp	r1, r0
 80066d6:	b508      	push	{r3, lr}
 80066d8:	d00e      	beq.n	80066f8 <_ZNKSt9type_infoeqERKS_+0x24>
 80066da:	6840      	ldr	r0, [r0, #4]
 80066dc:	7803      	ldrb	r3, [r0, #0]
 80066de:	2b2a      	cmp	r3, #42	; 0x2a
 80066e0:	d00c      	beq.n	80066fc <_ZNKSt9type_infoeqERKS_+0x28>
 80066e2:	6849      	ldr	r1, [r1, #4]
 80066e4:	780b      	ldrb	r3, [r1, #0]
 80066e6:	2b2a      	cmp	r3, #42	; 0x2a
 80066e8:	bf08      	it	eq
 80066ea:	3101      	addeq	r1, #1
 80066ec:	f7f9 fd30 	bl	8000150 <strcmp>
 80066f0:	fab0 f080 	clz	r0, r0
 80066f4:	0940      	lsrs	r0, r0, #5
 80066f6:	bd08      	pop	{r3, pc}
 80066f8:	2001      	movs	r0, #1
 80066fa:	e7fc      	b.n	80066f6 <_ZNKSt9type_infoeqERKS_+0x22>
 80066fc:	2000      	movs	r0, #0
 80066fe:	e7fa      	b.n	80066f6 <_ZNKSt9type_infoeqERKS_+0x22>

08006700 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8006700:	b510      	push	{r4, lr}
 8006702:	4604      	mov	r4, r0
 8006704:	4b02      	ldr	r3, [pc, #8]	; (8006710 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8006706:	6003      	str	r3, [r0, #0]
 8006708:	f7ff fba0 	bl	8005e4c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800670c:	4620      	mov	r0, r4
 800670e:	bd10      	pop	{r4, pc}
 8006710:	08007570 	.word	0x08007570

08006714 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8006714:	b510      	push	{r4, lr}
 8006716:	4604      	mov	r4, r0
 8006718:	f7ff fff2 	bl	8006700 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 800671c:	4620      	mov	r0, r4
 800671e:	2118      	movs	r1, #24
 8006720:	f7ff fbe8 	bl	8005ef4 <_ZdlPvj>
 8006724:	4620      	mov	r0, r4
 8006726:	bd10      	pop	{r4, pc}

08006728 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8006728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8006730:	4604      	mov	r4, r0
 8006732:	454a      	cmp	r2, r9
 8006734:	460f      	mov	r7, r1
 8006736:	4616      	mov	r6, r2
 8006738:	469a      	mov	sl, r3
 800673a:	d024      	beq.n	8006786 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 800673c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8006740:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8006744:	f1b8 0f00 	cmp.w	r8, #0
 8006748:	d028      	beq.n	800679c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 800674a:	68e5      	ldr	r5, [r4, #12]
 800674c:	07aa      	lsls	r2, r5, #30
 800674e:	d521      	bpl.n	8006794 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8006750:	122a      	asrs	r2, r5, #8
 8006752:	f015 0501 	ands.w	r5, r5, #1
 8006756:	d003      	beq.n	8006760 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8006758:	1cfb      	adds	r3, r7, #3
 800675a:	d01b      	beq.n	8006794 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	589a      	ldr	r2, [r3, r2]
 8006760:	68a0      	ldr	r0, [r4, #8]
 8006762:	4639      	mov	r1, r7
 8006764:	6803      	ldr	r3, [r0, #0]
 8006766:	f8cd 9000 	str.w	r9, [sp]
 800676a:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800676e:	4432      	add	r2, r6
 8006770:	4653      	mov	r3, sl
 8006772:	47d8      	blx	fp
 8006774:	2803      	cmp	r0, #3
 8006776:	d90d      	bls.n	8006794 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8006778:	b115      	cbz	r5, 8006780 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 800677a:	f040 0001 	orr.w	r0, r0, #1
 800677e:	b2c0      	uxtb	r0, r0
 8006780:	b003      	add	sp, #12
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	4619      	mov	r1, r3
 8006788:	f7ff ffa4 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 800678c:	2800      	cmp	r0, #0
 800678e:	d0d5      	beq.n	800673c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8006790:	2006      	movs	r0, #6
 8006792:	e7f5      	b.n	8006780 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8006794:	f108 38ff 	add.w	r8, r8, #4294967295
 8006798:	3c08      	subs	r4, #8
 800679a:	e7d3      	b.n	8006744 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 800679c:	2001      	movs	r0, #1
 800679e:	e7ef      	b.n	8006780 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

080067a0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 80067a0:	b4f0      	push	{r4, r5, r6, r7}
 80067a2:	1e0d      	subs	r5, r1, #0
 80067a4:	9c04      	ldr	r4, [sp, #16]
 80067a6:	db06      	blt.n	80067b6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 80067a8:	1950      	adds	r0, r2, r5
 80067aa:	4284      	cmp	r4, r0
 80067ac:	bf14      	ite	ne
 80067ae:	2001      	movne	r0, #1
 80067b0:	2006      	moveq	r0, #6
 80067b2:	bcf0      	pop	{r4, r5, r6, r7}
 80067b4:	4770      	bx	lr
 80067b6:	3502      	adds	r5, #2
 80067b8:	d005      	beq.n	80067c6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 80067ba:	6805      	ldr	r5, [r0, #0]
 80067bc:	9404      	str	r4, [sp, #16]
 80067be:	6a2c      	ldr	r4, [r5, #32]
 80067c0:	46a4      	mov	ip, r4
 80067c2:	bcf0      	pop	{r4, r5, r6, r7}
 80067c4:	4760      	bx	ip
 80067c6:	2001      	movs	r0, #1
 80067c8:	e7f3      	b.n	80067b2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

080067ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80067ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ce:	b091      	sub	sp, #68	; 0x44
 80067d0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80067d2:	469a      	mov	sl, r3
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	4688      	mov	r8, r1
 80067d8:	06d9      	lsls	r1, r3, #27
 80067da:	bf48      	it	mi
 80067dc:	6883      	ldrmi	r3, [r0, #8]
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	bf48      	it	mi
 80067e2:	60a3      	strmi	r3, [r4, #8]
 80067e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80067e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80067e8:	4681      	mov	r9, r0
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d107      	bne.n	80067fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80067ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80067f0:	f7ff ff70 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 80067f4:	b118      	cbz	r0, 80067fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80067f6:	9b06      	ldr	r3, [sp, #24]
 80067f8:	7163      	strb	r3, [r4, #5]
 80067fa:	2700      	movs	r7, #0
 80067fc:	e085      	b.n	800690a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80067fe:	4651      	mov	r1, sl
 8006800:	4648      	mov	r0, r9
 8006802:	f7ff ff67 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 8006806:	b1c0      	cbz	r0, 800683a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 8006808:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800680a:	f1b8 0f00 	cmp.w	r8, #0
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	7123      	strb	r3, [r4, #4]
 8006814:	db0b      	blt.n	800682e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 8006816:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006818:	4498      	add	r8, r3
 800681a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800681c:	4543      	cmp	r3, r8
 800681e:	bf0c      	ite	eq
 8006820:	f04f 0806 	moveq.w	r8, #6
 8006824:	f04f 0801 	movne.w	r8, #1
 8006828:	f884 8006 	strb.w	r8, [r4, #6]
 800682c:	e7e5      	b.n	80067fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800682e:	f118 0f02 	cmn.w	r8, #2
 8006832:	d1e2      	bne.n	80067fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8006834:	2301      	movs	r3, #1
 8006836:	71a3      	strb	r3, [r4, #6]
 8006838:	e7df      	b.n	80067fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800683a:	f1b8 0f00 	cmp.w	r8, #0
 800683e:	bfa8      	it	ge
 8006840:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8006842:	f04f 0700 	mov.w	r7, #0
 8006846:	bfa4      	itt	ge
 8006848:	eba3 0308 	subge.w	r3, r3, r8
 800684c:	9307      	strge	r3, [sp, #28]
 800684e:	f04f 0302 	mov.w	r3, #2
 8006852:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 8006856:	f04f 0301 	mov.w	r3, #1
 800685a:	9308      	str	r3, [sp, #32]
 800685c:	9b06      	ldr	r3, [sp, #24]
 800685e:	bfb8      	it	lt
 8006860:	9007      	strlt	r0, [sp, #28]
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	930b      	str	r3, [sp, #44]	; 0x2c
 8006868:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800686c:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8006870:	9305      	str	r3, [sp, #20]
 8006872:	f1bb 0f00 	cmp.w	fp, #0
 8006876:	f000 80d5 	beq.w	8006a24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25a>
 800687a:	2300      	movs	r3, #0
 800687c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8006880:	9b05      	ldr	r3, [sp, #20]
 8006882:	68a5      	ldr	r5, [r4, #8]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	950f      	str	r5, [sp, #60]	; 0x3c
 8006888:	07da      	lsls	r2, r3, #31
 800688a:	bf48      	it	mi
 800688c:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 800688e:	ea4f 2123 	mov.w	r1, r3, asr #8
 8006892:	bf42      	ittt	mi
 8006894:	6800      	ldrmi	r0, [r0, #0]
 8006896:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 8006898:	5841      	ldrmi	r1, [r0, r1]
 800689a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800689c:	bf58      	it	pl
 800689e:	9a06      	ldrpl	r2, [sp, #24]
 80068a0:	4401      	add	r1, r0
 80068a2:	9807      	ldr	r0, [sp, #28]
 80068a4:	b138      	cbz	r0, 80068b6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 80068a6:	4288      	cmp	r0, r1
 80068a8:	bf2c      	ite	cs
 80068aa:	2000      	movcs	r0, #0
 80068ac:	2001      	movcc	r0, #1
 80068ae:	9e08      	ldr	r6, [sp, #32]
 80068b0:	42b0      	cmp	r0, r6
 80068b2:	f000 80b3 	beq.w	8006a1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 80068b6:	079b      	lsls	r3, r3, #30
 80068b8:	d407      	bmi.n	80068ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>
 80068ba:	f118 0f02 	cmn.w	r8, #2
 80068be:	d102      	bne.n	80068c6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xfc>
 80068c0:	07ae      	lsls	r6, r5, #30
 80068c2:	f000 80ad 	beq.w	8006a20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x256>
 80068c6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80068ca:	9b05      	ldr	r3, [sp, #20]
 80068cc:	ad0d      	add	r5, sp, #52	; 0x34
 80068ce:	6898      	ldr	r0, [r3, #8]
 80068d0:	6803      	ldr	r3, [r0, #0]
 80068d2:	9503      	str	r5, [sp, #12]
 80068d4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80068d6:	9502      	str	r5, [sp, #8]
 80068d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80068da:	e9cd 1500 	strd	r1, r5, [sp]
 80068de:	4641      	mov	r1, r8
 80068e0:	69dd      	ldr	r5, [r3, #28]
 80068e2:	4653      	mov	r3, sl
 80068e4:	47a8      	blx	r5
 80068e6:	7963      	ldrb	r3, [r4, #5]
 80068e8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80068ec:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 80068f0:	4313      	orrs	r3, r2
 80068f2:	2d06      	cmp	r5, #6
 80068f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068f6:	7163      	strb	r3, [r4, #5]
 80068f8:	d001      	beq.n	80068fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 80068fa:	2d02      	cmp	r5, #2
 80068fc:	d109      	bne.n	8006912 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 80068fe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8006902:	6021      	str	r1, [r4, #0]
 8006904:	7123      	strb	r3, [r4, #4]
 8006906:	71a5      	strb	r5, [r4, #6]
 8006908:	4607      	mov	r7, r0
 800690a:	4638      	mov	r0, r7
 800690c:	b011      	add	sp, #68	; 0x44
 800690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006912:	6822      	ldr	r2, [r4, #0]
 8006914:	b9a7      	cbnz	r7, 8006940 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 8006916:	b9aa      	cbnz	r2, 8006944 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8006918:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800691c:	6021      	str	r1, [r4, #0]
 800691e:	7122      	strb	r2, [r4, #4]
 8006920:	b121      	cbz	r1, 800692c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8006922:	b11b      	cbz	r3, 800692c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8006924:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006928:	07dd      	lsls	r5, r3, #31
 800692a:	d5ed      	bpl.n	8006908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 800692c:	7963      	ldrb	r3, [r4, #5]
 800692e:	2b04      	cmp	r3, #4
 8006930:	d0ea      	beq.n	8006908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	4607      	mov	r7, r0
 8006936:	3b08      	subs	r3, #8
 8006938:	f10b 3bff 	add.w	fp, fp, #4294967295
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	e798      	b.n	8006872 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
 8006940:	2a00      	cmp	r2, #0
 8006942:	d037      	beq.n	80069b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 8006944:	4291      	cmp	r1, r2
 8006946:	d106      	bne.n	8006956 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 8006948:	7923      	ldrb	r3, [r4, #4]
 800694a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800694e:	4313      	orrs	r3, r2
 8006950:	7123      	strb	r3, [r4, #4]
 8006952:	4638      	mov	r0, r7
 8006954:	e7ea      	b.n	800692c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8006956:	b909      	cbnz	r1, 800695c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 8006958:	2800      	cmp	r0, #0
 800695a:	d0fa      	beq.n	8006952 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 800695c:	2b03      	cmp	r3, #3
 800695e:	79a6      	ldrb	r6, [r4, #6]
 8006960:	d904      	bls.n	800696c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 8006962:	07d9      	lsls	r1, r3, #31
 8006964:	d529      	bpl.n	80069ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	079b      	lsls	r3, r3, #30
 800696a:	d526      	bpl.n	80069ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 800696c:	b97e      	cbnz	r6, 800698e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 800696e:	2d03      	cmp	r5, #3
 8006970:	d905      	bls.n	800697e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 8006972:	07ee      	lsls	r6, r5, #31
 8006974:	d541      	bpl.n	80069fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8006976:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800697a:	0798      	lsls	r0, r3, #30
 800697c:	d53d      	bpl.n	80069fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 800697e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006980:	4641      	mov	r1, r8
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	4650      	mov	r0, sl
 8006986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006988:	f7ff ff0a 	bl	80067a0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 800698c:	4606      	mov	r6, r0
 800698e:	b9e5      	cbnz	r5, 80069ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8006990:	2e03      	cmp	r6, #3
 8006992:	d905      	bls.n	80069a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 8006994:	07f1      	lsls	r1, r6, #31
 8006996:	d532      	bpl.n	80069fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8006998:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800699c:	079a      	lsls	r2, r3, #30
 800699e:	d52e      	bpl.n	80069fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 80069a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80069a2:	4641      	mov	r1, r8
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	4650      	mov	r0, sl
 80069a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069ac:	f7ff fef8 	bl	80067a0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 80069b0:	4605      	mov	r5, r0
 80069b2:	e00a      	b.n	80069ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d1d1      	bne.n	800695c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 80069b8:	e7cb      	b.n	8006952 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 80069ba:	2e01      	cmp	r6, #1
 80069bc:	bf38      	it	cc
 80069be:	2601      	movcc	r6, #1
 80069c0:	2d01      	cmp	r5, #1
 80069c2:	bf38      	it	cc
 80069c4:	2501      	movcc	r5, #1
 80069c6:	b2f6      	uxtb	r6, r6
 80069c8:	b2ed      	uxtb	r5, r5
 80069ca:	ea85 0306 	eor.w	r3, r5, r6
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d916      	bls.n	8006a02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 80069d4:	2d03      	cmp	r5, #3
 80069d6:	bf81      	itttt	hi
 80069d8:	462e      	movhi	r6, r5
 80069da:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 80069dc:	2000      	movhi	r0, #0
 80069de:	6023      	strhi	r3, [r4, #0]
 80069e0:	bf8a      	itet	hi
 80069e2:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 80069e6:	4638      	movls	r0, r7
 80069e8:	7123      	strbhi	r3, [r4, #4]
 80069ea:	07b3      	lsls	r3, r6, #30
 80069ec:	71a6      	strb	r6, [r4, #6]
 80069ee:	d402      	bmi.n	80069f6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 80069f0:	f016 0601 	ands.w	r6, r6, #1
 80069f4:	d19a      	bne.n	800692c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e786      	b.n	8006908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80069fa:	2601      	movs	r6, #1
 80069fc:	e7e5      	b.n	80069ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 80069fe:	2501      	movs	r5, #1
 8006a00:	e7e3      	b.n	80069ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8006a02:	2300      	movs	r3, #0
 8006a04:	4035      	ands	r5, r6
 8006a06:	b2ed      	uxtb	r5, r5
 8006a08:	2d03      	cmp	r5, #3
 8006a0a:	6023      	str	r3, [r4, #0]
 8006a0c:	d903      	bls.n	8006a16 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	2001      	movs	r0, #1
 8006a12:	71a3      	strb	r3, [r4, #6]
 8006a14:	e778      	b.n	8006908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8006a16:	2001      	movs	r0, #1
 8006a18:	71a0      	strb	r0, [r4, #6]
 8006a1a:	e787      	b.n	800692c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	4638      	mov	r0, r7
 8006a22:	e786      	b.n	8006932 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 8006a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f43f af6f 	beq.w	800690a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8006a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	f43f af6b 	beq.w	800690a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8006a34:	2301      	movs	r3, #1
 8006a36:	f8cd b020 	str.w	fp, [sp, #32]
 8006a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a3c:	e714      	b.n	8006868 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9e>

08006a3e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8006a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	4606      	mov	r6, r0
 8006a46:	4617      	mov	r7, r2
 8006a48:	461c      	mov	r4, r3
 8006a4a:	9102      	str	r1, [sp, #8]
 8006a4c:	f7ff fa31 	bl	8005eb2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8006a50:	4605      	mov	r5, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d15f      	bne.n	8006b16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8006a56:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8006a5a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8006a5e:	f019 0f10 	tst.w	r9, #16
 8006a62:	bf18      	it	ne
 8006a64:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 8006a68:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8006a6c:	f009 0301 	and.w	r3, r9, #1
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	f10d 0b10 	add.w	fp, sp, #16
 8006a76:	f1ba 0f00 	cmp.w	sl, #0
 8006a7a:	d072      	beq.n	8006b62 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x124>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9304      	str	r3, [sp, #16]
 8006a80:	f88d 3014 	strb.w	r3, [sp, #20]
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006a8a:	9307      	str	r3, [sp, #28]
 8006a8c:	f002 0301 	and.w	r3, r2, #1
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	f002 0302 	and.w	r3, r2, #2
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	f002 0102 	and.w	r1, r2, #2
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	f8cd 9018 	str.w	r9, [sp, #24]
 8006aa4:	d104      	bne.n	8006ab0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x72>
 8006aa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aaa:	f1a8 0808 	sub.w	r8, r8, #8
 8006aae:	e7e2      	b.n	8006a76 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 8006ab0:	2f00      	cmp	r7, #0
 8006ab2:	d034      	beq.n	8006b1e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 8006ab4:	9b00      	ldr	r3, [sp, #0]
 8006ab6:	1212      	asrs	r2, r2, #8
 8006ab8:	b10b      	cbz	r3, 8006abe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x80>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	589a      	ldr	r2, [r3, r2]
 8006abe:	443a      	add	r2, r7
 8006ac0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006ac4:	9902      	ldr	r1, [sp, #8]
 8006ac6:	6803      	ldr	r3, [r0, #0]
 8006ac8:	699d      	ldr	r5, [r3, #24]
 8006aca:	465b      	mov	r3, fp
 8006acc:	47a8      	blx	r5
 8006ace:	4605      	mov	r5, r0
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d0e8      	beq.n	8006aa6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d104      	bne.n	8006ae4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 8006ada:	9b00      	ldr	r3, [sp, #0]
 8006adc:	b113      	cbz	r3, 8006ae4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 8006ade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ae2:	9307      	str	r3, [sp, #28]
 8006ae4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d905      	bls.n	8006af8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8006aec:	9a01      	ldr	r2, [sp, #4]
 8006aee:	b91a      	cbnz	r2, 8006af8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8006af0:	f023 0302 	bic.w	r3, r3, #2
 8006af4:	f88d 3014 	strb.w	r3, [sp, #20]
 8006af8:	68e1      	ldr	r1, [r4, #12]
 8006afa:	b9c1      	cbnz	r1, 8006b2e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 8006afc:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8006b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006b04:	7923      	ldrb	r3, [r4, #4]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d905      	bls.n	8006b16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8006b0a:	079a      	lsls	r2, r3, #30
 8006b0c:	d509      	bpl.n	8006b22 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8006b0e:	68b3      	ldr	r3, [r6, #8]
 8006b10:	f013 0f01 	tst.w	r3, #1
 8006b14:	d1c7      	bne.n	8006aa6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8006b16:	4628      	mov	r0, r5
 8006b18:	b009      	add	sp, #36	; 0x24
 8006b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	463a      	mov	r2, r7
 8006b20:	e7ce      	b.n	8006ac0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x82>
 8006b22:	07db      	lsls	r3, r3, #31
 8006b24:	d5f7      	bpl.n	8006b16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8006b26:	68b3      	ldr	r3, [r6, #8]
 8006b28:	f013 0f02 	tst.w	r3, #2
 8006b2c:	e7f2      	b.n	8006b14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd6>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	9a04      	ldr	r2, [sp, #16]
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
 8006b36:	2300      	movs	r3, #0
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	7123      	strb	r3, [r4, #4]
 8006b3e:	e7ea      	b.n	8006b16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8006b40:	b12b      	cbz	r3, 8006b4e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x110>
 8006b42:	7923      	ldrb	r3, [r4, #4]
 8006b44:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	7123      	strb	r3, [r4, #4]
 8006b4c:	e7ab      	b.n	8006aa6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8006b4e:	9807      	ldr	r0, [sp, #28]
 8006b50:	2808      	cmp	r0, #8
 8006b52:	d0f2      	beq.n	8006b3a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8006b54:	2908      	cmp	r1, #8
 8006b56:	d0f0      	beq.n	8006b3a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8006b58:	f7ff fdbc 	bl	80066d4 <_ZNKSt9type_infoeqERKS_>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d1f0      	bne.n	8006b42 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8006b60:	e7eb      	b.n	8006b3a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8006b62:	7925      	ldrb	r5, [r4, #4]
 8006b64:	3d00      	subs	r5, #0
 8006b66:	bf18      	it	ne
 8006b68:	2501      	movne	r5, #1
 8006b6a:	e7d4      	b.n	8006b16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>

08006b6c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8006b6c:	684b      	ldr	r3, [r1, #4]
 8006b6e:	6001      	str	r1, [r0, #0]
 8006b70:	6043      	str	r3, [r0, #4]
 8006b72:	684b      	ldr	r3, [r1, #4]
 8006b74:	6018      	str	r0, [r3, #0]
 8006b76:	6048      	str	r0, [r1, #4]
 8006b78:	4770      	bx	lr

08006b7a <_ZSt20__throw_length_errorPKc>:
 8006b7a:	b508      	push	{r3, lr}
 8006b7c:	f000 f894 	bl	8006ca8 <abort>

08006b80 <_ZSt25__throw_bad_function_callv>:
 8006b80:	b508      	push	{r3, lr}
 8006b82:	f000 f891 	bl	8006ca8 <abort>

08006b86 <_ZdlPv>:
 8006b86:	f000 b8c9 	b.w	8006d1c <free>

08006b8a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006b8a:	7803      	ldrb	r3, [r0, #0]
 8006b8c:	2b47      	cmp	r3, #71	; 0x47
 8006b8e:	d117      	bne.n	8006bc0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b90:	7843      	ldrb	r3, [r0, #1]
 8006b92:	2b4e      	cmp	r3, #78	; 0x4e
 8006b94:	d114      	bne.n	8006bc0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b96:	7883      	ldrb	r3, [r0, #2]
 8006b98:	2b55      	cmp	r3, #85	; 0x55
 8006b9a:	d111      	bne.n	8006bc0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b9c:	78c3      	ldrb	r3, [r0, #3]
 8006b9e:	2b43      	cmp	r3, #67	; 0x43
 8006ba0:	d10e      	bne.n	8006bc0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006ba2:	7903      	ldrb	r3, [r0, #4]
 8006ba4:	2b43      	cmp	r3, #67	; 0x43
 8006ba6:	d10b      	bne.n	8006bc0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006ba8:	7943      	ldrb	r3, [r0, #5]
 8006baa:	2b2b      	cmp	r3, #43	; 0x2b
 8006bac:	d108      	bne.n	8006bc0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006bae:	7983      	ldrb	r3, [r0, #6]
 8006bb0:	2b2b      	cmp	r3, #43	; 0x2b
 8006bb2:	d105      	bne.n	8006bc0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006bb4:	79c0      	ldrb	r0, [r0, #7]
 8006bb6:	2801      	cmp	r0, #1
 8006bb8:	bf8c      	ite	hi
 8006bba:	2000      	movhi	r0, #0
 8006bbc:	2001      	movls	r0, #1
 8006bbe:	4770      	bx	lr
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr

08006bc4 <__cxa_call_terminate>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	b148      	cbz	r0, 8006bde <__cxa_call_terminate+0x1a>
 8006bca:	f000 f83b 	bl	8006c44 <__cxa_begin_catch>
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7ff ffdb 	bl	8006b8a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006bd4:	b118      	cbz	r0, 8006bde <__cxa_call_terminate+0x1a>
 8006bd6:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8006bda:	f7ff fcc3 	bl	8006564 <_ZN10__cxxabiv111__terminateEPFvvE>
 8006bde:	f7ff fccd 	bl	800657c <_ZSt9terminatev>

08006be2 <__cxa_call_unexpected>:
 8006be2:	b538      	push	{r3, r4, r5, lr}
 8006be4:	4602      	mov	r2, r0
 8006be6:	f7ff ffd0 	bl	8006b8a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006bea:	4604      	mov	r4, r0
 8006bec:	b140      	cbz	r0, 8006c00 <__cxa_call_unexpected+0x1e>
 8006bee:	2500      	movs	r5, #0
 8006bf0:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f000 f825 	bl	8006c44 <__cxa_begin_catch>
 8006bfa:	b11d      	cbz	r5, 8006c04 <__cxa_call_unexpected+0x22>
 8006bfc:	f7ff fcd0 	bl	80065a0 <_ZSt10unexpectedv>
 8006c00:	2501      	movs	r5, #1
 8006c02:	e7f7      	b.n	8006bf4 <__cxa_call_unexpected+0x12>
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7ff fcbe 	bl	8006586 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08006c0a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006c0a:	7803      	ldrb	r3, [r0, #0]
 8006c0c:	2b47      	cmp	r3, #71	; 0x47
 8006c0e:	d117      	bne.n	8006c40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c10:	7843      	ldrb	r3, [r0, #1]
 8006c12:	2b4e      	cmp	r3, #78	; 0x4e
 8006c14:	d114      	bne.n	8006c40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c16:	7883      	ldrb	r3, [r0, #2]
 8006c18:	2b55      	cmp	r3, #85	; 0x55
 8006c1a:	d111      	bne.n	8006c40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c1c:	78c3      	ldrb	r3, [r0, #3]
 8006c1e:	2b43      	cmp	r3, #67	; 0x43
 8006c20:	d10e      	bne.n	8006c40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c22:	7903      	ldrb	r3, [r0, #4]
 8006c24:	2b43      	cmp	r3, #67	; 0x43
 8006c26:	d10b      	bne.n	8006c40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c28:	7943      	ldrb	r3, [r0, #5]
 8006c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8006c2c:	d108      	bne.n	8006c40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c2e:	7983      	ldrb	r3, [r0, #6]
 8006c30:	2b2b      	cmp	r3, #43	; 0x2b
 8006c32:	d105      	bne.n	8006c40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c34:	79c0      	ldrb	r0, [r0, #7]
 8006c36:	2801      	cmp	r0, #1
 8006c38:	bf8c      	ite	hi
 8006c3a:	2000      	movhi	r0, #0
 8006c3c:	2001      	movls	r0, #1
 8006c3e:	4770      	bx	lr
 8006c40:	2000      	movs	r0, #0
 8006c42:	4770      	bx	lr

08006c44 <__cxa_begin_catch>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	f7ff fa0e 	bl	8006068 <__cxa_get_globals>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6805      	ldr	r5, [r0, #0]
 8006c50:	4620      	mov	r0, r4
 8006c52:	f1a4 0120 	sub.w	r1, r4, #32
 8006c56:	f7ff ffd8 	bl	8006c0a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006c5a:	b928      	cbnz	r0, 8006c68 <__cxa_begin_catch+0x24>
 8006c5c:	b10d      	cbz	r5, 8006c62 <__cxa_begin_catch+0x1e>
 8006c5e:	f7ff fc8d 	bl	800657c <_ZSt9terminatev>
 8006c62:	6011      	str	r1, [r2, #0]
 8006c64:	4628      	mov	r0, r5
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bfb4      	ite	lt
 8006c72:	f1c3 0301 	rsblt	r3, r3, #1
 8006c76:	3301      	addge	r3, #1
 8006c78:	f844 3c0c 	str.w	r3, [r4, #-12]
 8006c7c:	6853      	ldr	r3, [r2, #4]
 8006c7e:	428d      	cmp	r5, r1
 8006c80:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c84:	6053      	str	r3, [r2, #4]
 8006c86:	bf1c      	itt	ne
 8006c88:	f844 5c10 	strne.w	r5, [r4, #-16]
 8006c8c:	6011      	strne	r1, [r2, #0]
 8006c8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c90:	f7fa fb46 	bl	8001320 <_Unwind_Complete>
 8006c94:	e7e6      	b.n	8006c64 <__cxa_begin_catch+0x20>
	...

08006c98 <_ZSt15get_new_handlerv>:
 8006c98:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <_ZSt15get_new_handlerv+0xc>)
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	f3bf 8f5b 	dmb	ish
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000440 	.word	0x20000440

08006ca8 <abort>:
 8006ca8:	2006      	movs	r0, #6
 8006caa:	b508      	push	{r3, lr}
 8006cac:	f000 f982 	bl	8006fb4 <raise>
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	f7fd fa15 	bl	80040e0 <_exit>
	...

08006cb8 <__errno>:
 8006cb8:	4b01      	ldr	r3, [pc, #4]	; (8006cc0 <__errno+0x8>)
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20000018 	.word	0x20000018

08006cc4 <__libc_init_array>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	4d0c      	ldr	r5, [pc, #48]	; (8006cfc <__libc_init_array+0x38>)
 8006cca:	4c0d      	ldr	r4, [pc, #52]	; (8006d00 <__libc_init_array+0x3c>)
 8006ccc:	1b64      	subs	r4, r4, r5
 8006cce:	10a4      	asrs	r4, r4, #2
 8006cd0:	42a6      	cmp	r6, r4
 8006cd2:	d109      	bne.n	8006ce8 <__libc_init_array+0x24>
 8006cd4:	f000 f99e 	bl	8007014 <_init>
 8006cd8:	2600      	movs	r6, #0
 8006cda:	4d0a      	ldr	r5, [pc, #40]	; (8006d04 <__libc_init_array+0x40>)
 8006cdc:	4c0a      	ldr	r4, [pc, #40]	; (8006d08 <__libc_init_array+0x44>)
 8006cde:	1b64      	subs	r4, r4, r5
 8006ce0:	10a4      	asrs	r4, r4, #2
 8006ce2:	42a6      	cmp	r6, r4
 8006ce4:	d105      	bne.n	8006cf2 <__libc_init_array+0x2e>
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cec:	4798      	blx	r3
 8006cee:	3601      	adds	r6, #1
 8006cf0:	e7ee      	b.n	8006cd0 <__libc_init_array+0xc>
 8006cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf6:	4798      	blx	r3
 8006cf8:	3601      	adds	r6, #1
 8006cfa:	e7f2      	b.n	8006ce2 <__libc_init_array+0x1e>
 8006cfc:	08007980 	.word	0x08007980
 8006d00:	08007980 	.word	0x08007980
 8006d04:	08007980 	.word	0x08007980
 8006d08:	08007994 	.word	0x08007994

08006d0c <malloc>:
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <malloc+0xc>)
 8006d0e:	4601      	mov	r1, r0
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	f000 b8a3 	b.w	8006e5c <_malloc_r>
 8006d16:	bf00      	nop
 8006d18:	20000018 	.word	0x20000018

08006d1c <free>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <free+0xc>)
 8006d1e:	4601      	mov	r1, r0
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f000 b833 	b.w	8006d8c <_free_r>
 8006d26:	bf00      	nop
 8006d28:	20000018 	.word	0x20000018

08006d2c <memcpy>:
 8006d2c:	440a      	add	r2, r1
 8006d2e:	4291      	cmp	r1, r2
 8006d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d34:	d100      	bne.n	8006d38 <memcpy+0xc>
 8006d36:	4770      	bx	lr
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d3e:	4291      	cmp	r1, r2
 8006d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d44:	d1f9      	bne.n	8006d3a <memcpy+0xe>
 8006d46:	bd10      	pop	{r4, pc}

08006d48 <memmove>:
 8006d48:	4288      	cmp	r0, r1
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	eb01 0402 	add.w	r4, r1, r2
 8006d50:	d902      	bls.n	8006d58 <memmove+0x10>
 8006d52:	4284      	cmp	r4, r0
 8006d54:	4623      	mov	r3, r4
 8006d56:	d807      	bhi.n	8006d68 <memmove+0x20>
 8006d58:	1e43      	subs	r3, r0, #1
 8006d5a:	42a1      	cmp	r1, r4
 8006d5c:	d008      	beq.n	8006d70 <memmove+0x28>
 8006d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d66:	e7f8      	b.n	8006d5a <memmove+0x12>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	4402      	add	r2, r0
 8006d6c:	428a      	cmp	r2, r1
 8006d6e:	d100      	bne.n	8006d72 <memmove+0x2a>
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d7a:	e7f7      	b.n	8006d6c <memmove+0x24>

08006d7c <memset>:
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	4402      	add	r2, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <_free_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4605      	mov	r5, r0
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d040      	beq.n	8006e16 <_free_r+0x8a>
 8006d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d98:	1f0c      	subs	r4, r1, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bfb8      	it	lt
 8006d9e:	18e4      	addlt	r4, r4, r3
 8006da0:	f000 f924 	bl	8006fec <__malloc_lock>
 8006da4:	4a1c      	ldr	r2, [pc, #112]	; (8006e18 <_free_r+0x8c>)
 8006da6:	6813      	ldr	r3, [r2, #0]
 8006da8:	b933      	cbnz	r3, 8006db8 <_free_r+0x2c>
 8006daa:	6063      	str	r3, [r4, #4]
 8006dac:	6014      	str	r4, [r2, #0]
 8006dae:	4628      	mov	r0, r5
 8006db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006db4:	f000 b920 	b.w	8006ff8 <__malloc_unlock>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d908      	bls.n	8006dce <_free_r+0x42>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	1821      	adds	r1, r4, r0
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	bf01      	itttt	eq
 8006dc4:	6819      	ldreq	r1, [r3, #0]
 8006dc6:	685b      	ldreq	r3, [r3, #4]
 8006dc8:	1809      	addeq	r1, r1, r0
 8006dca:	6021      	streq	r1, [r4, #0]
 8006dcc:	e7ed      	b.n	8006daa <_free_r+0x1e>
 8006dce:	461a      	mov	r2, r3
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	b10b      	cbz	r3, 8006dd8 <_free_r+0x4c>
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	d9fa      	bls.n	8006dce <_free_r+0x42>
 8006dd8:	6811      	ldr	r1, [r2, #0]
 8006dda:	1850      	adds	r0, r2, r1
 8006ddc:	42a0      	cmp	r0, r4
 8006dde:	d10b      	bne.n	8006df8 <_free_r+0x6c>
 8006de0:	6820      	ldr	r0, [r4, #0]
 8006de2:	4401      	add	r1, r0
 8006de4:	1850      	adds	r0, r2, r1
 8006de6:	4283      	cmp	r3, r0
 8006de8:	6011      	str	r1, [r2, #0]
 8006dea:	d1e0      	bne.n	8006dae <_free_r+0x22>
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4401      	add	r1, r0
 8006df2:	6011      	str	r1, [r2, #0]
 8006df4:	6053      	str	r3, [r2, #4]
 8006df6:	e7da      	b.n	8006dae <_free_r+0x22>
 8006df8:	d902      	bls.n	8006e00 <_free_r+0x74>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	602b      	str	r3, [r5, #0]
 8006dfe:	e7d6      	b.n	8006dae <_free_r+0x22>
 8006e00:	6820      	ldr	r0, [r4, #0]
 8006e02:	1821      	adds	r1, r4, r0
 8006e04:	428b      	cmp	r3, r1
 8006e06:	bf01      	itttt	eq
 8006e08:	6819      	ldreq	r1, [r3, #0]
 8006e0a:	685b      	ldreq	r3, [r3, #4]
 8006e0c:	1809      	addeq	r1, r1, r0
 8006e0e:	6021      	streq	r1, [r4, #0]
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	6054      	str	r4, [r2, #4]
 8006e14:	e7cb      	b.n	8006dae <_free_r+0x22>
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	20000444 	.word	0x20000444

08006e1c <sbrk_aligned>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4e0e      	ldr	r6, [pc, #56]	; (8006e58 <sbrk_aligned+0x3c>)
 8006e20:	460c      	mov	r4, r1
 8006e22:	6831      	ldr	r1, [r6, #0]
 8006e24:	4605      	mov	r5, r0
 8006e26:	b911      	cbnz	r1, 8006e2e <sbrk_aligned+0x12>
 8006e28:	f000 f88c 	bl	8006f44 <_sbrk_r>
 8006e2c:	6030      	str	r0, [r6, #0]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 f887 	bl	8006f44 <_sbrk_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d00a      	beq.n	8006e50 <sbrk_aligned+0x34>
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d007      	beq.n	8006e54 <sbrk_aligned+0x38>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f87c 	bl	8006f44 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d101      	bne.n	8006e54 <sbrk_aligned+0x38>
 8006e50:	f04f 34ff 	mov.w	r4, #4294967295
 8006e54:	4620      	mov	r0, r4
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	20000448 	.word	0x20000448

08006e5c <_malloc_r>:
 8006e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e60:	1ccd      	adds	r5, r1, #3
 8006e62:	f025 0503 	bic.w	r5, r5, #3
 8006e66:	3508      	adds	r5, #8
 8006e68:	2d0c      	cmp	r5, #12
 8006e6a:	bf38      	it	cc
 8006e6c:	250c      	movcc	r5, #12
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	4607      	mov	r7, r0
 8006e72:	db01      	blt.n	8006e78 <_malloc_r+0x1c>
 8006e74:	42a9      	cmp	r1, r5
 8006e76:	d905      	bls.n	8006e84 <_malloc_r+0x28>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	4e2e      	ldr	r6, [pc, #184]	; (8006f40 <_malloc_r+0xe4>)
 8006e86:	f000 f8b1 	bl	8006fec <__malloc_lock>
 8006e8a:	6833      	ldr	r3, [r6, #0]
 8006e8c:	461c      	mov	r4, r3
 8006e8e:	bb34      	cbnz	r4, 8006ede <_malloc_r+0x82>
 8006e90:	4629      	mov	r1, r5
 8006e92:	4638      	mov	r0, r7
 8006e94:	f7ff ffc2 	bl	8006e1c <sbrk_aligned>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	d14d      	bne.n	8006f3a <_malloc_r+0xde>
 8006e9e:	6834      	ldr	r4, [r6, #0]
 8006ea0:	4626      	mov	r6, r4
 8006ea2:	2e00      	cmp	r6, #0
 8006ea4:	d140      	bne.n	8006f28 <_malloc_r+0xcc>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4638      	mov	r0, r7
 8006eac:	eb04 0803 	add.w	r8, r4, r3
 8006eb0:	f000 f848 	bl	8006f44 <_sbrk_r>
 8006eb4:	4580      	cmp	r8, r0
 8006eb6:	d13a      	bne.n	8006f2e <_malloc_r+0xd2>
 8006eb8:	6821      	ldr	r1, [r4, #0]
 8006eba:	3503      	adds	r5, #3
 8006ebc:	1a6d      	subs	r5, r5, r1
 8006ebe:	f025 0503 	bic.w	r5, r5, #3
 8006ec2:	3508      	adds	r5, #8
 8006ec4:	2d0c      	cmp	r5, #12
 8006ec6:	bf38      	it	cc
 8006ec8:	250c      	movcc	r5, #12
 8006eca:	4638      	mov	r0, r7
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7ff ffa5 	bl	8006e1c <sbrk_aligned>
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d02b      	beq.n	8006f2e <_malloc_r+0xd2>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	442b      	add	r3, r5
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	e00e      	b.n	8006efc <_malloc_r+0xa0>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	1b52      	subs	r2, r2, r5
 8006ee2:	d41e      	bmi.n	8006f22 <_malloc_r+0xc6>
 8006ee4:	2a0b      	cmp	r2, #11
 8006ee6:	d916      	bls.n	8006f16 <_malloc_r+0xba>
 8006ee8:	1961      	adds	r1, r4, r5
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	6025      	str	r5, [r4, #0]
 8006eee:	bf18      	it	ne
 8006ef0:	6059      	strne	r1, [r3, #4]
 8006ef2:	6863      	ldr	r3, [r4, #4]
 8006ef4:	bf08      	it	eq
 8006ef6:	6031      	streq	r1, [r6, #0]
 8006ef8:	5162      	str	r2, [r4, r5]
 8006efa:	604b      	str	r3, [r1, #4]
 8006efc:	4638      	mov	r0, r7
 8006efe:	f104 060b 	add.w	r6, r4, #11
 8006f02:	f000 f879 	bl	8006ff8 <__malloc_unlock>
 8006f06:	f026 0607 	bic.w	r6, r6, #7
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	1af2      	subs	r2, r6, r3
 8006f0e:	d0b6      	beq.n	8006e7e <_malloc_r+0x22>
 8006f10:	1b9b      	subs	r3, r3, r6
 8006f12:	50a3      	str	r3, [r4, r2]
 8006f14:	e7b3      	b.n	8006e7e <_malloc_r+0x22>
 8006f16:	6862      	ldr	r2, [r4, #4]
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	bf0c      	ite	eq
 8006f1c:	6032      	streq	r2, [r6, #0]
 8006f1e:	605a      	strne	r2, [r3, #4]
 8006f20:	e7ec      	b.n	8006efc <_malloc_r+0xa0>
 8006f22:	4623      	mov	r3, r4
 8006f24:	6864      	ldr	r4, [r4, #4]
 8006f26:	e7b2      	b.n	8006e8e <_malloc_r+0x32>
 8006f28:	4634      	mov	r4, r6
 8006f2a:	6876      	ldr	r6, [r6, #4]
 8006f2c:	e7b9      	b.n	8006ea2 <_malloc_r+0x46>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	4638      	mov	r0, r7
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	f000 f860 	bl	8006ff8 <__malloc_unlock>
 8006f38:	e7a1      	b.n	8006e7e <_malloc_r+0x22>
 8006f3a:	6025      	str	r5, [r4, #0]
 8006f3c:	e7de      	b.n	8006efc <_malloc_r+0xa0>
 8006f3e:	bf00      	nop
 8006f40:	20000444 	.word	0x20000444

08006f44 <_sbrk_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	2300      	movs	r3, #0
 8006f48:	4d05      	ldr	r5, [pc, #20]	; (8006f60 <_sbrk_r+0x1c>)
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f7fd f8cc 	bl	80040ec <_sbrk>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_sbrk_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_sbrk_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	2000044c 	.word	0x2000044c

08006f64 <_raise_r>:
 8006f64:	291f      	cmp	r1, #31
 8006f66:	b538      	push	{r3, r4, r5, lr}
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	d904      	bls.n	8006f78 <_raise_r+0x14>
 8006f6e:	2316      	movs	r3, #22
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f7a:	b112      	cbz	r2, 8006f82 <_raise_r+0x1e>
 8006f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f80:	b94b      	cbnz	r3, 8006f96 <_raise_r+0x32>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f830 	bl	8006fe8 <_getpid_r>
 8006f88:	462a      	mov	r2, r5
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f92:	f000 b817 	b.w	8006fc4 <_kill_r>
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d00a      	beq.n	8006fb0 <_raise_r+0x4c>
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	d103      	bne.n	8006fa6 <_raise_r+0x42>
 8006f9e:	2316      	movs	r3, #22
 8006fa0:	6003      	str	r3, [r0, #0]
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e7e7      	b.n	8006f76 <_raise_r+0x12>
 8006fa6:	2400      	movs	r4, #0
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fae:	4798      	blx	r3
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e7e0      	b.n	8006f76 <_raise_r+0x12>

08006fb4 <raise>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <raise+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f7ff bfd3 	b.w	8006f64 <_raise_r>
 8006fbe:	bf00      	nop
 8006fc0:	20000018 	.word	0x20000018

08006fc4 <_kill_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4d06      	ldr	r5, [pc, #24]	; (8006fe4 <_kill_r+0x20>)
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	f7fd f87d 	bl	80040d0 <_kill>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	d102      	bne.n	8006fe0 <_kill_r+0x1c>
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	b103      	cbz	r3, 8006fe0 <_kill_r+0x1c>
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	bd38      	pop	{r3, r4, r5, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000044c 	.word	0x2000044c

08006fe8 <_getpid_r>:
 8006fe8:	f7fd b870 	b.w	80040cc <_getpid>

08006fec <__malloc_lock>:
 8006fec:	4801      	ldr	r0, [pc, #4]	; (8006ff4 <__malloc_lock+0x8>)
 8006fee:	f000 b809 	b.w	8007004 <__retarget_lock_acquire_recursive>
 8006ff2:	bf00      	nop
 8006ff4:	20000450 	.word	0x20000450

08006ff8 <__malloc_unlock>:
 8006ff8:	4801      	ldr	r0, [pc, #4]	; (8007000 <__malloc_unlock+0x8>)
 8006ffa:	f000 b804 	b.w	8007006 <__retarget_lock_release_recursive>
 8006ffe:	bf00      	nop
 8007000:	20000450 	.word	0x20000450

08007004 <__retarget_lock_acquire_recursive>:
 8007004:	4770      	bx	lr

08007006 <__retarget_lock_release_recursive>:
 8007006:	4770      	bx	lr

08007008 <_Unwind_GetDataRelBase>:
 8007008:	b508      	push	{r3, lr}
 800700a:	f7ff fe4d 	bl	8006ca8 <abort>

0800700e <_Unwind_GetTextRelBase>:
 800700e:	b508      	push	{r3, lr}
 8007010:	f7ff fffa 	bl	8007008 <_Unwind_GetDataRelBase>

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
